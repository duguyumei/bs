{"ast":null,"code":"import { defineComponent, inject, ref, unref, nextTick, computed, provide, resolveComponent, openBlock, createBlock, withCtx, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElCollectionItem, ROVING_FOCUS_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY } from './roving-focus-group.mjs';\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY, ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY } from './tokens.mjs';\nimport { getFocusIntent, reorderArray, focusFirst } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\n\nconst _sfc_main = defineComponent({\n  components: {\n    ElRovingFocusCollectionItem: ElCollectionItem\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      default: true\n    },\n    active: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"mousedown\", \"focus\", \"keydown\"],\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      currentTabbedId,\n      loop,\n      onItemFocus,\n      onItemShiftTab\n    } = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);\n    const {\n      getItems\n    } = inject(COLLECTION_INJECTION_KEY, void 0);\n    const id = useId();\n    const rovingFocusGroupItemRef = ref(null);\n    const handleMousedown = composeEventHandlers(e => {\n      emit(\"mousedown\", e);\n    }, e => {\n      if (!props.focusable) {\n        e.preventDefault();\n      } else {\n        onItemFocus(unref(id));\n      }\n    });\n    const handleFocus = composeEventHandlers(e => {\n      emit(\"focus\", e);\n    }, () => {\n      onItemFocus(unref(id));\n    });\n    const handleKeydown = composeEventHandlers(e => {\n      emit(\"keydown\", e);\n    }, e => {\n      const {\n        key,\n        shiftKey,\n        target,\n        currentTarget\n      } = e;\n\n      if (key === EVENT_CODE.tab && shiftKey) {\n        onItemShiftTab();\n        return;\n      }\n\n      if (target !== currentTarget) return;\n      const focusIntent = getFocusIntent(e);\n\n      if (focusIntent) {\n        e.preventDefault();\n        const items = getItems().filter(item => item.focusable);\n        let elements = items.map(item => item.ref);\n\n        switch (focusIntent) {\n          case \"last\":\n            {\n              elements.reverse();\n              break;\n            }\n\n          case \"prev\":\n          case \"next\":\n            {\n              if (focusIntent === \"prev\") {\n                elements.reverse();\n              }\n\n              const currentIdx = elements.indexOf(currentTarget);\n              elements = loop.value ? reorderArray(elements, currentIdx + 1) : elements.slice(currentIdx + 1);\n              break;\n            }\n\n          default:\n            {\n              break;\n            }\n        }\n\n        nextTick(() => {\n          focusFirst(elements);\n        });\n      }\n    });\n    const isCurrentTab = computed(() => currentTabbedId.value === unref(id));\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef,\n      tabIndex: computed(() => unref(isCurrentTab) ? 0 : -1),\n      handleMousedown,\n      handleFocus,\n      handleKeydown\n    });\n    return {\n      id,\n      handleKeydown,\n      handleFocus,\n      handleMousedown\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_roving_focus_collection_item = resolveComponent(\"el-roving-focus-collection-item\");\n\n  return openBlock(), createBlock(_component_el_roving_focus_collection_item, {\n    id: _ctx.id,\n    focusable: _ctx.focusable,\n    active: _ctx.active\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 8, [\"id\", \"focusable\", \"active\"]);\n}\n\nvar ElRovingFocusItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElRovingFocusItem as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","components","ElRovingFocusCollectionItem","props","focusable","type","Boolean","default","active","emits","setup","emit","currentTabbedId","loop","onItemFocus","onItemShiftTab","inject","ROVING_FOCUS_GROUP_INJECTION_KEY","getItems","ROVING_FOCUS_COLLECTION_INJECTION_KEY","id","useId","rovingFocusGroupItemRef","ref","handleMousedown","composeEventHandlers","e","preventDefault","unref","handleFocus","handleKeydown","key","shiftKey","target","currentTarget","EVENT_CODE","tab","focusIntent","getFocusIntent","items","filter","item","elements","map","reverse","currentIdx","indexOf","value","reorderArray","slice","nextTick","focusFirst","isCurrentTab","computed","provide","ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY","tabIndex","_createBlock","_component_el_roving_focus_collection_item","_ctx","_renderSlot","_"],"sources":["../../../../../../packages/components/roving-focus-group/src/roving-focus-item.vue"],"sourcesContent":["<template>\n  <el-roving-focus-collection-item\n    :id=\"id\"\n    :focusable=\"focusable\"\n    :active=\"active\"\n  >\n    <slot />\n  </el-roving-focus-collection-item>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  ref,\n  unref,\n  nextTick,\n  provide,\n} from 'vue'\nimport { useId } from '@element-plus/hooks'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport {\n  ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n  ElCollectionItem as ElRovingFocusCollectionItem,\n} from './roving-focus-group'\nimport {\n  ROVING_FOCUS_GROUP_INJECTION_KEY,\n  ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY,\n} from './tokens'\nimport { getFocusIntent, reorderArray, focusFirst } from './utils'\n\nexport default defineComponent({\n  components: {\n    ElRovingFocusCollectionItem,\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      default: true,\n    },\n    active: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['mousedown', 'focus', 'keydown'],\n  setup(props, { emit }) {\n    const { currentTabbedId, loop, onItemFocus, onItemShiftTab } = inject(\n      ROVING_FOCUS_GROUP_INJECTION_KEY,\n      undefined\n    )!\n\n    const { getItems } = inject(\n      ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n      undefined\n    )!\n\n    const id = useId()\n    const rovingFocusGroupItemRef = ref<HTMLElement | null>(null)\n\n    const handleMousedown = composeEventHandlers(\n      (e: Event) => {\n        emit('mousedown', e)\n      },\n      (e) => {\n        if (!props.focusable) {\n          e.preventDefault()\n        } else {\n          onItemFocus(unref(id))\n        }\n      }\n    )\n\n    const handleFocus = composeEventHandlers(\n      (e: Event) => {\n        emit('focus', e)\n      },\n      () => {\n        onItemFocus(unref(id))\n      }\n    )\n\n    const handleKeydown = composeEventHandlers(\n      (e: Event) => {\n        emit('keydown', e)\n      },\n      (e) => {\n        const { key, shiftKey, target, currentTarget } = e as KeyboardEvent\n        if (key === EVENT_CODE.tab && shiftKey) {\n          onItemShiftTab()\n          return\n        }\n        if (target !== currentTarget) return\n        const focusIntent = getFocusIntent(e as KeyboardEvent)\n\n        if (focusIntent) {\n          e.preventDefault()\n          const items = getItems<typeof props>().filter(\n            (item) => item.focusable\n          )\n\n          let elements = items.map((item) => item.ref!)\n\n          switch (focusIntent) {\n            case 'last': {\n              elements.reverse()\n              break\n            }\n            case 'prev':\n            case 'next': {\n              if (focusIntent === 'prev') {\n                elements.reverse()\n              }\n              const currentIdx = elements.indexOf(currentTarget as HTMLElement)\n              elements = loop.value\n                ? reorderArray(elements, currentIdx + 1)\n                : elements.slice(currentIdx + 1)\n              break\n            }\n            default: {\n              break\n            }\n          }\n\n          nextTick(() => {\n            focusFirst(elements)\n          })\n        }\n      }\n    )\n\n    const isCurrentTab = computed(() => currentTabbedId.value === unref(id))\n\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef,\n      tabIndex: computed(() => (unref(isCurrentTab) ? 0 : -1)),\n      handleMousedown,\n      handleFocus,\n      handleKeydown,\n    })\n\n    return {\n      id,\n      handleKeydown,\n      handleFocus,\n      handleMousedown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}