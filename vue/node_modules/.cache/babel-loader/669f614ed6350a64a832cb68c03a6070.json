{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, shallowRef, computed, nextTick, watch, onMounted, onUpdated, resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, normalizeStyle, createCommentVNode, Fragment, renderSlot, createElementVNode, mergeProps, createBlock, withCtx, resolveDynamicComponent, withModifiers, createVNode, toDisplayString, vShow } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleClose, View } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport { calcTextareaHeight } from './calc-textarea-height.mjs';\nimport { inputProps, inputEmits } from './input.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useAttrs } from '../../../hooks/use-attrs/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { ValidateComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { isObject } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\nconst PENDANT_MAP = {\n  suffix: \"append\",\n  prefix: \"prepend\"\n};\n\nconst _sfc_main = defineComponent({\n  name: \"ElInput\",\n  components: {\n    ElIcon,\n    CircleClose,\n    IconView: View\n  },\n  inheritAttrs: false,\n  props: inputProps,\n  emits: inputEmits,\n\n  setup(props, {\n    slots,\n    emit,\n    attrs: rawAttrs\n  }) {\n    const instance = getCurrentInstance();\n    const attrs = useAttrs();\n    const {\n      form,\n      formItem\n    } = useFormItem();\n    const inputSize = useSize();\n    const inputDisabled = useDisabled();\n    const nsInput = useNamespace(\"input\");\n    const nsTextarea = useNamespace(\"textarea\");\n    const input = ref();\n    const textarea = ref();\n    const focused = ref(false);\n    const hovering = ref(false);\n    const isComposing = ref(false);\n    const passwordVisible = ref(false);\n\n    const _textareaCalcStyle = shallowRef(props.inputStyle);\n\n    const inputOrTextarea = computed(() => input.value || textarea.value);\n    const needStatusIcon = computed(() => {\n      var _a;\n\n      return (_a = form == null ? void 0 : form.statusIcon) != null ? _a : false;\n    });\n    const validateState = computed(() => (formItem == null ? void 0 : formItem.validateState) || \"\");\n    const validateIcon = computed(() => ValidateComponentsMap[validateState.value]);\n    const containerStyle = computed(() => rawAttrs.style);\n    const computedTextareaStyle = computed(() => [props.inputStyle, _textareaCalcStyle.value, {\n      resize: props.resize\n    }]);\n    const nativeInputValue = computed(() => props.modelValue === null || props.modelValue === void 0 ? \"\" : String(props.modelValue));\n    const showClear = computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (focused.value || hovering.value));\n    const showPwdVisible = computed(() => props.showPassword && !inputDisabled.value && !props.readonly && (!!nativeInputValue.value || focused.value));\n    const isWordLimitVisible = computed(() => props.showWordLimit && !!attrs.value.maxlength && (props.type === \"text\" || props.type === \"textarea\") && !inputDisabled.value && !props.readonly && !props.showPassword);\n    const textLength = computed(() => Array.from(nativeInputValue.value).length);\n    const inputExceed = computed(() => !!isWordLimitVisible.value && textLength.value > Number(attrs.value.maxlength));\n\n    const resizeTextarea = () => {\n      const {\n        type,\n        autosize\n      } = props;\n      if (!isClient || type !== \"textarea\") return;\n\n      if (autosize) {\n        const minRows = isObject(autosize) ? autosize.minRows : void 0;\n        const maxRows = isObject(autosize) ? autosize.maxRows : void 0;\n        _textareaCalcStyle.value = { ...calcTextareaHeight(textarea.value, minRows, maxRows)\n        };\n      } else {\n        _textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value).minHeight\n        };\n      }\n    };\n\n    const setNativeInputValue = () => {\n      const input2 = inputOrTextarea.value;\n      if (!input2 || input2.value === nativeInputValue.value) return;\n      input2.value = nativeInputValue.value;\n    };\n\n    const calcIconOffset = place => {\n      const {\n        el\n      } = instance.vnode;\n      if (!el) return;\n      const elList = Array.from(el.querySelectorAll(`.${nsInput.e(place)}`));\n      const target = elList.find(item => item.parentNode === el);\n      if (!target) return;\n      const pendant = PENDANT_MAP[place];\n\n      if (slots[pendant]) {\n        target.style.transform = `translateX(${place === \"suffix\" ? \"-\" : \"\"}${el.querySelector(`.${nsInput.be(\"group\", pendant)}`).offsetWidth}px)`;\n      } else {\n        target.removeAttribute(\"style\");\n      }\n    };\n\n    const updateIconOffset = () => {\n      calcIconOffset(\"prefix\");\n      calcIconOffset(\"suffix\");\n    };\n\n    const handleInput = event => {\n      const {\n        value\n      } = event.target;\n      if (isComposing.value) return;\n      if (value === nativeInputValue.value) return;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"input\", value);\n      nextTick(setNativeInputValue);\n    };\n\n    const handleChange = event => {\n      emit(\"change\", event.target.value);\n    };\n\n    const focus = () => {\n      nextTick(() => {\n        var _a;\n\n        (_a = inputOrTextarea.value) == null ? void 0 : _a.focus();\n      });\n    };\n\n    const blur = () => {\n      var _a;\n\n      (_a = inputOrTextarea.value) == null ? void 0 : _a.blur();\n    };\n\n    const handleFocus = event => {\n      focused.value = true;\n      emit(\"focus\", event);\n    };\n\n    const handleBlur = event => {\n      var _a;\n\n      focused.value = false;\n      emit(\"blur\", event);\n\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\");\n      }\n    };\n\n    const select = () => {\n      var _a;\n\n      (_a = inputOrTextarea.value) == null ? void 0 : _a.select();\n    };\n\n    const handleCompositionStart = event => {\n      emit(\"compositionstart\", event);\n      isComposing.value = true;\n    };\n\n    const handleCompositionUpdate = event => {\n      var _a;\n\n      emit(\"compositionupdate\", event);\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      const lastCharacter = text[text.length - 1] || \"\";\n      isComposing.value = !isKorean(lastCharacter);\n    };\n\n    const handleCompositionEnd = event => {\n      emit(\"compositionend\", event);\n\n      if (isComposing.value) {\n        isComposing.value = false;\n        handleInput(event);\n      }\n    };\n\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"change\", \"\");\n      emit(\"clear\");\n      emit(\"input\", \"\");\n    };\n\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value;\n      focus();\n    };\n\n    const suffixVisible = computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);\n    watch(() => props.modelValue, () => {\n      var _a;\n\n      nextTick(resizeTextarea);\n\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\");\n      }\n    });\n    watch(nativeInputValue, () => setNativeInputValue());\n    watch(() => props.type, () => {\n      nextTick(() => {\n        setNativeInputValue();\n        resizeTextarea();\n        updateIconOffset();\n      });\n    });\n    onMounted(() => {\n      setNativeInputValue();\n      updateIconOffset();\n      nextTick(resizeTextarea);\n    });\n    onUpdated(() => {\n      nextTick(updateIconOffset);\n    });\n\n    const onMouseLeave = evt => {\n      hovering.value = false;\n      emit(\"mouseleave\", evt);\n    };\n\n    const onMouseEnter = evt => {\n      hovering.value = true;\n      emit(\"mouseenter\", evt);\n    };\n\n    const handleKeydown = evt => {\n      emit(\"keydown\", evt);\n    };\n\n    return {\n      input,\n      textarea,\n      attrs,\n      inputSize,\n      validateState,\n      validateIcon,\n      containerStyle,\n      computedTextareaStyle,\n      inputDisabled,\n      showClear,\n      showPwdVisible,\n      isWordLimitVisible,\n      textLength,\n      hovering,\n      inputExceed,\n      passwordVisible,\n      inputOrTextarea,\n      suffixVisible,\n      needStatusIcon,\n      resizeTextarea,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleCompositionStart,\n      handleCompositionUpdate,\n      handleCompositionEnd,\n      handlePasswordVisible,\n      clear,\n      select,\n      focus,\n      blur,\n      onMouseLeave,\n      onMouseEnter,\n      handleKeydown,\n      nsInput,\n      nsTextarea\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"type\", \"disabled\", \"readonly\", \"autocomplete\", \"tabindex\", \"aria-label\", \"placeholder\"];\nconst _hoisted_2 = [\"tabindex\", \"disabled\", \"readonly\", \"autocomplete\", \"aria-label\", \"placeholder\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_circle_close = resolveComponent(\"circle-close\");\n\n  const _component_icon_view = resolveComponent(\"icon-view\");\n\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.type === \"textarea\" ? _ctx.nsTextarea.b() : _ctx.nsInput.b(), _ctx.nsInput.m(_ctx.inputSize), _ctx.nsInput.is(\"disabled\", _ctx.inputDisabled), _ctx.nsInput.is(\"exceed\", _ctx.inputExceed), {\n      [_ctx.nsInput.b(\"group\")]: _ctx.$slots.prepend || _ctx.$slots.append,\n      [_ctx.nsInput.bm(\"group\", \"append\")]: _ctx.$slots.append,\n      [_ctx.nsInput.bm(\"group\", \"prepend\")]: _ctx.$slots.prepend,\n      [_ctx.nsInput.m(\"prefix\")]: _ctx.$slots.prefix || _ctx.prefixIcon,\n      [_ctx.nsInput.m(\"suffix\")]: _ctx.$slots.suffix || _ctx.suffixIcon || _ctx.clearable || _ctx.showPassword,\n      [_ctx.nsInput.m(\"suffix--password-clear\")]: _ctx.showClear && _ctx.showPwdVisible\n    }, _ctx.$attrs.class]),\n    style: normalizeStyle(_ctx.containerStyle),\n    onMouseenter: _cache[17] || (_cache[17] = (...args) => _ctx.onMouseEnter && _ctx.onMouseEnter(...args)),\n    onMouseleave: _cache[18] || (_cache[18] = (...args) => _ctx.onMouseLeave && _ctx.onMouseLeave(...args))\n  }, [createCommentVNode(\" input \"), _ctx.type !== \"textarea\" ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [createCommentVNode(\" prepend slot \"), _ctx.$slots.prepend ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.nsInput.be(\"group\", \"prepend\"))\n  }, [renderSlot(_ctx.$slots, \"prepend\")], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"input\", mergeProps({\n    ref: \"input\",\n    class: _ctx.nsInput.e(\"inner\")\n  }, _ctx.attrs, {\n    type: _ctx.showPassword ? _ctx.passwordVisible ? \"text\" : \"password\" : _ctx.type,\n    disabled: _ctx.inputDisabled,\n    readonly: _ctx.readonly,\n    autocomplete: _ctx.autocomplete,\n    tabindex: _ctx.tabindex,\n    \"aria-label\": _ctx.label,\n    placeholder: _ctx.placeholder,\n    style: _ctx.inputStyle,\n    onCompositionstart: _cache[0] || (_cache[0] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),\n    onCompositionupdate: _cache[1] || (_cache[1] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),\n    onCompositionend: _cache[2] || (_cache[2] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),\n    onInput: _cache[3] || (_cache[3] = (...args) => _ctx.handleInput && _ctx.handleInput(...args)),\n    onFocus: _cache[4] || (_cache[4] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n    onBlur: _cache[5] || (_cache[5] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),\n    onChange: _cache[6] || (_cache[6] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onKeydown: _cache[7] || (_cache[7] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n  }), null, 16, _hoisted_1), createCommentVNode(\" prefix slot \"), _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    class: normalizeClass(_ctx.nsInput.e(\"prefix\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.nsInput.e(\"prefix-inner\"))\n  }, [renderSlot(_ctx.$slots, \"prefix\"), _ctx.prefixIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass(_ctx.nsInput.e(\"icon\"))\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" suffix slot \"), _ctx.suffixVisible ? (openBlock(), createElementBlock(\"span\", {\n    key: 2,\n    class: normalizeClass(_ctx.nsInput.e(\"suffix\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.nsInput.e(\"suffix-inner\"))\n  }, [!_ctx.showClear || !_ctx.showPwdVisible || !_ctx.isWordLimitVisible ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [renderSlot(_ctx.$slots, \"suffix\"), _ctx.suffixIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass(_ctx.nsInput.e(\"icon\"))\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 64)) : createCommentVNode(\"v-if\", true), _ctx.showClear ? (openBlock(), createBlock(_component_el_icon, {\n    key: 1,\n    class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsInput.e(\"clear\")]),\n    onMousedown: _cache[8] || (_cache[8] = withModifiers(() => {}, [\"prevent\"])),\n    onClick: _ctx.clear\n  }, {\n    default: withCtx(() => [createVNode(_component_circle_close)]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showPwdVisible ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsInput.e(\"clear\")]),\n    onClick: _ctx.handlePasswordVisible\n  }, {\n    default: withCtx(() => [createVNode(_component_icon_view)]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.isWordLimitVisible ? (openBlock(), createElementBlock(\"span\", {\n    key: 3,\n    class: normalizeClass(_ctx.nsInput.e(\"count\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.nsInput.e(\"count-inner\"))\n  }, toDisplayString(_ctx.textLength) + \" / \" + toDisplayString(_ctx.attrs.maxlength), 3)], 2)) : createCommentVNode(\"v-if\", true)], 2), _ctx.validateState && _ctx.validateIcon && _ctx.needStatusIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsInput.e(\"validateIcon\")])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.validateIcon)))]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" append slot \"), _ctx.$slots.append ? (openBlock(), createElementBlock(\"div\", {\n    key: 3,\n    class: normalizeClass(_ctx.nsInput.be(\"group\", \"append\"))\n  }, [renderSlot(_ctx.$slots, \"append\")], 2)) : createCommentVNode(\"v-if\", true)], 64)) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [createCommentVNode(\" textarea \"), createElementVNode(\"textarea\", mergeProps({\n    ref: \"textarea\",\n    class: _ctx.nsTextarea.e(\"inner\")\n  }, _ctx.attrs, {\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.inputDisabled,\n    readonly: _ctx.readonly,\n    autocomplete: _ctx.autocomplete,\n    style: _ctx.computedTextareaStyle,\n    \"aria-label\": _ctx.label,\n    placeholder: _ctx.placeholder,\n    onCompositionstart: _cache[9] || (_cache[9] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),\n    onCompositionupdate: _cache[10] || (_cache[10] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),\n    onCompositionend: _cache[11] || (_cache[11] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),\n    onInput: _cache[12] || (_cache[12] = (...args) => _ctx.handleInput && _ctx.handleInput(...args)),\n    onFocus: _cache[13] || (_cache[13] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n    onBlur: _cache[14] || (_cache[14] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),\n    onChange: _cache[15] || (_cache[15] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onKeydown: _cache[16] || (_cache[16] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n  }), null, 16, _hoisted_2), _ctx.isWordLimitVisible ? (openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    class: normalizeClass(_ctx.nsInput.e(\"count\"))\n  }, toDisplayString(_ctx.textLength) + \" / \" + toDisplayString(_ctx.attrs.maxlength), 3)) : createCommentVNode(\"v-if\", true)], 64))], 38)), [[vShow, _ctx.type !== \"hidden\"]]);\n}\n\nvar Input = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Input as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAsKA,MAAMA,cAAc;AAClBC,UAAQ,QADU;AAElBC,UAAQ;AAFU,CAApB;;AAKA,MAAKC,YAAaC,gBAAa;AAC7BC,QAAM,SADuB;AAG7BC,cAAY;AAAEC,UAAF;AAAUC,eAAV;AAAUC,cAAaA;AAAvB,GAHiB;AAK7BC,gBAAc,KALe;AAO7BC,SAAOC,UAPsB;AAQ7BC,SAAOC,UARsB;;AAU7BC,QAAMJ,KAAN,EAAa;AAAEK,SAAF;AAASC,QAAT;AAAeC,WAAOC;AAAtB,GAAb,EAA+C;AAC7C,UAAMC,WAAWC,oBAAjB;AACA,UAAMH,QAAQI,UAAd;AAEA,UAAM;AAAEC,UAAF;AAAQC;AAAR,QAAqBC,aAA3B;AACA,UAAMC,YAAYC,SAAlB;AACA,UAAMC,gBAAgBC,aAAtB;AACA,UAAMC,UAAUC,aAAa,OAAb,CAAhB;AACA,UAAMC,aAAaD,aAAa,UAAb,CAAnB;AAEA,UAAME,QAAQC,KAAd;AACA,UAAMC,WAAWD,KAAjB;AACA,UAAME,UAAUF,IAAI,KAAJ,CAAhB;AACA,UAAMG,WAAWH,IAAI,KAAJ,CAAjB;AACA,UAAMI,cAAcJ,IAAI,KAAJ,CAApB;AACA,UAAMK,kBAAkBL,IAAI,KAAJ,CAAxB;;AACA,UAAMM,qBAAqBC,WAAW9B,MAAM+B,UAAjB,CAA3B;;AAEA,UAAMC,kBAAkBC,SAAS,MAAMX,MAAMY,KAAN,IAAeV,SAASU,KAAvC,CAAxB;AAEA,UAAMC,iBAAiBF,SAAS,MAAM;AACtC,UAAMG,EAAN;;AACA,kCACE,MADF,GACQxB,eADR,KACQ,IADR,GACQwB,EADR,GACQ,KADR;AAGA,KALuB,CAAvB;AAMA,UAAMC,wBAAwB,kEAA9B;AAAyD;AACjD;AACa,kDACHrC,gBADG,EAGrB6B,wBAHqB,EAQrB;AAAAS,oBAAkBA;AAAlB,KARqB;AAuBrB,UAAMC,+DAGFvC,2BAHE,GAIK,EAJL,GAIKwC,wBAJL,CAAN;AASA,UAAMC,uJAAN;AACA,UAAMC,cAAc,wCAGK,oBAHL,IAIG,OAAOC,QAJV,KAIU,yCAJV,EAApB;AAOA,UAAMC,6MAAN;AACE,oBAAc,4DAAd;AAEA,UAAIC,sBAAsB,sFAA1B;;AAAsC;AAEtC;AAAAC;AAAcC;AAAd,UAAc/C,KAAd;AACE,4CACA;;AACA;AAA2B,gCACH,UADG,GACM+C,gBADN,GACM,MADN;AACuB;AAAAlB,qCAGlD;AAHkD;AAID,OALjD,MAKiD;AAAAA;AAAAmB;AAAA;AAMnD;AACA,KAjBsC;;AAiBgB;AACtD,qBAAchB,qBAAd;AAA+B,8DAGjC;AACEiB,YAAM,MAAN,GAAeV,sBAAf;AACA,KANsD;;AAM7C;AACT,YAAM;AAAAW;AAAA,UAA4BzC,cAAlC;AAGA,eAEA;AAAa;AAEb,YAAM0C,qBAAsBC,IAAtB,IAAsBA,sBAAtB,CAAN;AAEA,UAAI,OAAJ,EACE;AACuD;;AAGvD,eAAO,SAAP,EAAO;AAAgBD;AAAA,OAAvB,MAAuB;AAI3BA;AACE;AACA,KArBS;;AAqBM;AAGjBE;AACEA;AAIA,KARe;;AAQQ;AAIvB;AAAAnB;AAAA;AAAsC,6BAEtC;AACA,oBAAcK,sBAAd,EAIA;AAASjC;AAGXA,UAAM,gBAAN;AACEgD;AAA+C,KAfxB;;AAkBzB,UAAMC;AAEJjD,qBAAekD,kBAAf;AACE,KAHJ;;AAG2B;AAAAF;AAI3B;;AACE,6BAAuB,MAAvB,KAAuB,IAAvB,GAAuB,MAAvB,GAAuBlB,UAAvB;AAAuB,OALE;AAQ3B,KAR2B;;AASzB,cAAQ;AACR;;AAAc;AAGhB,KAJE;;AAKA;AACAX,sBAAa,IAAb;AACAnB,UAAI,gBAAJ;AACE,KAHF;;AAGuB;AAAA;;AAIzBmB,sBAAe,KAAf;AACEnB;;AAAuB;AAGzB;AACE;AACA,KAVuB;;AAUH;AAGtB,UAAM8B,EAAN;;AACE;AACA,KALoB;;AAMpB;AACA9B;AAA8BqB;AAGhC,KAJE;;AAKA;AACA,UAAIS,EAAJ;;AACE9B;AACA,oBAAY8B,iBAAZ,KAAY,IAAZ,GAAY,MAAZ,GAAYA,QAAZ;AAAY;AAAAT;AAIhB,KAPE;;AAQA;AACArB,WAAK,gBAAL,EAAKkD,KAAL;;AACA;AACA7B,oBAAcO,KAAd,GAAc,KAAd;AAAcuB;AAGhB;AACE,KAPA;;AAQA;AAAAnD;AAGFA,UAAM,cAAN;AAUAA,UACE,SADF;AAGIA;AACA,KAjBF;;AAkBI;AAAqBsB;AAAA8B;AAQ3B,KARM;;AAaN,UACEC,wBACM,kKAFR;AAGIC,qBAAe,WAAf,EAAe;AACb;;AACAN;;AACA;AAAA;AAAA;AAKN,KARI;AASFM;AACAA;AACAN,eAAS;AAAAO;AAGXC;AACEC;AAAS,OAJT;AAOF,KARE;AASAC;AACAH,yBAAmB;AAAAE;AAGrBT;AACE,KALA;AAMAW;AAAmBX;AAGrB,KAHE;;AAIA,sBAAgB;AAAA5B;AAGlBpB,WAAO,YAAP,EAAO4D,GAAP;AAAO,KAHL;;AAIA;AAEAxC;AACApB;AAAA,KAHA;;AAIA;AAEAA;AAAA,KAFA;;AAGA;AAEAgB,WAFA;AAGAE,cAHA;AAIAjB,WAJA;AAKAQ,eALA;AAMAsB,mBANA;AAOA8B,kBAPA;AAQAC,oBARA;AASAC,2BATA;AAUApD,mBAVA;AAWAwB,eAXA;AAaAC,oBAbA;AAcAE,wBAdA;AAeA0B,gBAfA;AAgBA5C,cAhBA;AAiBAmB,iBAjBA;AAkBAjB,qBAlBA;AAmBAI,qBAnBA;AAoBA2B,mBApBA;AAqBAxB,oBArBA;AAsBA2B,oBAtBA;AAuBAL,iBAvBA;AAwBAF,kBAxBA;AAyBAgB,iBAzBA;AA0BAC,gBA1BA;AA2BAC,4BA3BA;AA4BAC,6BA5BA;AA8BAC,0BA9BA;AA+BAC,2BA/BA;AA+BAC,WA/BA;AA+BAC,YA/BA;AA+BApB,WA/BA;UAAA;kBAAA;kBAAA;mBAAA;aAAA;;AAAA;;;AA1RyB,CAAb,CAAlB;;AAxKmE,MAAWqB,aAAQ,yFAAnB;AAAqB,MAAkBC,aAAQ,iFAA1B;;AAAyC;AAA2C;;;;AAA6E;;AAAwD,SAAiBC,+CAAwC;AAAAC,SAAkB,kBAAuCC,2CAA4DC,CAA5D,KAA4DD,gBAAnG,EAAwIA,8BAAxI,EAAkNA,+CAAlN,EAAiPA,aAAOE,EAAP,CAAO,QAAP,EAAOF,gBAAP,CAAjP,EAAwP;AAAA;AAgBxmB,8DAhBwmB;AAiBnmB,yDACAG,OAlBmmB;AAkBnmB,uEAlBmmB;8GAAA;AAoBhnB,oEAiFWH;AArGqmB,KAAxP,EAuB3WA,YAAOD,KAvBoW,EAAlB;8BAuBjU,gBAvBiU;AAuBvTK,2GAvBuT;;AAAA,KAwB3U,gCAuBvBJ,IAnBA,KAmBA,KAnBI,UAmBJ,IAnBIK;AAAAC;AAAA,4CACaN;AAEhBM,UAFgB;AAGhBP;AAHgB,KAGN,CAEVQ,kCAFU,CAHM,EAKF,CALE,KAKFC,gCANX,EAOOC;AAEVrE,gBAFU;AAGV2D,WAAOC;AAHG,KAGHA,UAHG,EAGH;AAEPrC,oFAFO;AAGP+C,gCAHO;AAIPlD,2BAJO;AAKPmD,mCALO;AAMPC,YAAI,eANG;AAOP,4BAPO;AAQPC,eAAO,kBARA;AAQEC,0BARF;mIAAA;AAWVC,sIAXU;AAmBHC,6HAnBG;AAYgCC,WAAK,gBAAEC,aAAQ,OAAR,KAAQlB,6CAAV,CAZrC;AAYgDmB,kGAZhD;AAaRC,+FAbQ;AAkBDC,4CALgBC,IAKhB,KALgBtB,+CAKhB,CAlBC;AAaeuB;AAbf,GAHG,GAiBT,IAjBS,EAiBT,EAjBS,EAiBT3B,UAjBS,CAPP,EAwByBY,mCAxBzB,EA2BQR;UAAA;AAFkCD;AAElC,MADsBU;AAAdV;AAAc,KAAd;;;KAKtB;AAoCOyB,6BAnC0BC,kEAmC1B,GApCP;;AAAA,KA6BS,IA3BK,OA2BL,MA3BKjB,gCAPQ,CAAc,EAOX,CAPW,EACtB,QAOOA,gCAlCf,EAuCSA,mCAvCT,EAmC2BR;AAGjBM,UAHiB;;AAAA,KACiB;AACZP;KAAd;AAAAO;AAAA;;AAUVP;;AAL6ByB,6BACrCnB,kEADqC;AAE7BqB;sDAPU,GASF,EATE,KASFlB,gCATE,EASFR;AAAAM;4EAAA;2CAElBqB,qBAMU,CANV,EAMU,WANV,EAFkB;AAIfC,WAAK;AAJU,KAIqB;AAC7BJ,kEAD6B;AAGxBE;AAHwB,GAJrB,EAOH,CAPG,EAOH,oBAPG,KAOHlB,gCAhBK;;AAsBbT;AAJ0B6B,WAAK;KAAW;AAC/CJ,4BAAOK,iCAAP,EAD+C;AAERH;AAFQ,iEAlB7B,0CAyBmBI;AAI/BxB,UAJ+BwB;SACjC,gBAAG,cAAQC,CAAR,CAAS,OAAT;AAD8BD,KACF;AAEL/B;KAAhBiC,oFAFqB,CADEF,EAGvB,CAHuBA,KAGvBtB,gCA5BI,KAD0B;;AAiClDT,uDAGM,QAHN,CAGMgC,CAHN,CAGM,cAHN;KAGM;6BAFsC1B,uEAEtC;AADkBqB;AAClB,sDApC4C,CADjB,EAiExB,CAjEwB,KAiExBlB,gCApGH,EA6ENyB,mBAmBE,eAnBFA,CA7EM,EAgGJjC;AAjBCM,UAiBD;AAjBoBP;AAiBpB,KAhBa,CAEZQ,iCAFY,CAgBb,EAdW,CAcX,KAdWC,gCAlFP,GAmFO,EAnFP,CAmBJ,KAgEWH;AAAAC;AAAA,MACIE,gCADJ,EAEHC;AAEPrE,mBAFO;AAGP2D;AAHO,KAGWC,UAHX,EAGW;AAElBY,2BAFkB;AAGlBF,gCAHkB;AAIlBlD,2BAJkB;AAKlBmD,mCALkB;AAMlBG,qCANkB;AAOlB,4BAPkB;AAOTD,iCAPS;+DAWdb,oEAXc;AAWde,wIAXc;AASYC,+HATZ;AAS4BC,4BAC5CC,aAAa,aAAGlB,6CAD4B,CAT5B;oGAAA;iGAAA;6BArHXkB,0EAqHW;AArHXK;AAqHW,GAHX,GAlHA,IAkHA,EAlHA,EAkHA,EAlHA1B,UAkHA,CAFG;;;6HAAA,MAhEX,CAvBuB,CAxB2U,KAAxCC,qCAAjB","names":["PENDANT_MAP","suffix","prefix","_sfc_main","defineComponent","name","components","ElIcon","CircleClose","IconView","inheritAttrs","props","inputProps","emits","inputEmits","setup","slots","emit","attrs","rawAttrs","instance","getCurrentInstance","useAttrs","form","formItem","useFormItem","inputSize","useSize","inputDisabled","useDisabled","nsInput","useNamespace","nsTextarea","input","ref","textarea","focused","hovering","isComposing","passwordVisible","_textareaCalcStyle","shallowRef","inputStyle","inputOrTextarea","computed","value","needStatusIcon","_a","validateState","resize","nativeInputValue","String","showClear","showPwdVisible","readonly","isWordLimitVisible","inputExceed","type","autosize","minHeight","input2","el","target","item","calcIconOffset","nextTick","handleChange","event","handleInput","focus","suffixVisible","watch","setNativeInputValue","resizeTextarea","updateIconOffset","onMounted","onUpdated","evt","validateIcon","containerStyle","computedTextareaStyle","textLength","handleFocus","handleBlur","handleCompositionStart","handleCompositionUpdate","handleCompositionEnd","handlePasswordVisible","clear","select","_hoisted_1","_hoisted_2","_withDirectives","class","_ctx","b","is","prepend","onMouseenter","openBlock","key","_renderSlot","createCommentVNode","createElementVNode","disabled","autocomplete","tabindex","placeholder","style","onCompositionupdate","onCompositionend","onInput","_cache","onFocus","onBlur","onChange","args","onKeydown","default","_openBlock","_","withModifiers","onClick","_createVNode","_createElementBlock","e","toDisplayString","_createCommentVNode"],"sources":["../../../../../../packages/components/input/src/input.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"type !== 'hidden'\"\n    :class=\"[\n      type === 'textarea' ? nsTextarea.b() : nsInput.b(),\n      nsInput.m(inputSize),\n      nsInput.is('disabled', inputDisabled),\n      nsInput.is('exceed', inputExceed),\n      {\n        [nsInput.b('group')]: $slots.prepend || $slots.append,\n        [nsInput.bm('group', 'append')]: $slots.append,\n        [nsInput.bm('group', 'prepend')]: $slots.prepend,\n        [nsInput.m('prefix')]: $slots.prefix || prefixIcon,\n        [nsInput.m('suffix')]:\n          $slots.suffix || suffixIcon || clearable || showPassword,\n        [nsInput.m('suffix--password-clear')]: showClear && showPwdVisible,\n      },\n      $attrs.class,\n    ]\"\n    :style=\"containerStyle\"\n    @mouseenter=\"onMouseEnter\"\n    @mouseleave=\"onMouseLeave\"\n  >\n    <!-- input -->\n    <template v-if=\"type !== 'textarea'\">\n      <!-- prepend slot -->\n      <div v-if=\"$slots.prepend\" :class=\"nsInput.be('group', 'prepend')\">\n        <slot name=\"prepend\" />\n      </div>\n\n      <input\n        ref=\"input\"\n        :class=\"nsInput.e('inner')\"\n        v-bind=\"attrs\"\n        :type=\"showPassword ? (passwordVisible ? 'text' : 'password') : type\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :tabindex=\"tabindex\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        :style=\"inputStyle\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n\n      <!-- prefix slot -->\n      <span v-if=\"$slots.prefix || prefixIcon\" :class=\"nsInput.e('prefix')\">\n        <span :class=\"nsInput.e('prefix-inner')\">\n          <slot name=\"prefix\"></slot>\n          <el-icon v-if=\"prefixIcon\" :class=\"nsInput.e('icon')\">\n            <component :is=\"prefixIcon\" />\n          </el-icon>\n        </span>\n      </span>\n\n      <!-- suffix slot -->\n      <span v-if=\"suffixVisible\" :class=\"nsInput.e('suffix')\">\n        <span :class=\"nsInput.e('suffix-inner')\">\n          <template v-if=\"!showClear || !showPwdVisible || !isWordLimitVisible\">\n            <slot name=\"suffix\"></slot>\n            <el-icon v-if=\"suffixIcon\" :class=\"nsInput.e('icon')\">\n              <component :is=\"suffixIcon\" />\n            </el-icon>\n          </template>\n          <el-icon\n            v-if=\"showClear\"\n            :class=\"[nsInput.e('icon'), nsInput.e('clear')]\"\n            @mousedown.prevent\n            @click=\"clear\"\n          >\n            <circle-close />\n          </el-icon>\n          <el-icon\n            v-if=\"showPwdVisible\"\n            :class=\"[nsInput.e('icon'), nsInput.e('clear')]\"\n            @click=\"handlePasswordVisible\"\n          >\n            <icon-view />\n          </el-icon>\n          <span v-if=\"isWordLimitVisible\" :class=\"nsInput.e('count')\">\n            <span :class=\"nsInput.e('count-inner')\">\n              {{ textLength }} / {{ attrs.maxlength }}\n            </span>\n          </span>\n        </span>\n        <el-icon\n          v-if=\"validateState && validateIcon && needStatusIcon\"\n          :class=\"[nsInput.e('icon'), nsInput.e('validateIcon')]\"\n        >\n          <component :is=\"validateIcon\" />\n        </el-icon>\n      </span>\n\n      <!-- append slot -->\n      <div v-if=\"$slots.append\" :class=\"nsInput.be('group', 'append')\">\n        <slot name=\"append\" />\n      </div>\n    </template>\n\n    <!-- textarea -->\n    <template v-else>\n      <textarea\n        ref=\"textarea\"\n        :class=\"nsTextarea.e('inner')\"\n        v-bind=\"attrs\"\n        :tabindex=\"tabindex\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :style=\"computedTextareaStyle\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n      <span v-if=\"isWordLimitVisible\" :class=\"nsInput.e('count')\">\n        {{ textLength }} / {{ attrs.maxlength }}\n      </span>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  watch,\n  nextTick,\n  getCurrentInstance,\n  ref,\n  shallowRef,\n  onMounted,\n  onUpdated,\n} from 'vue'\nimport { isClient } from '@vueuse/core'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CircleClose, View as IconView } from '@element-plus/icons-vue'\nimport { ValidateComponentsMap, isObject, isKorean } from '@element-plus/utils'\nimport {\n  useAttrs,\n  useDisabled,\n  useFormItem,\n  useSize,\n  useNamespace,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { calcTextareaHeight } from './calc-textarea-height'\nimport { inputProps, inputEmits } from './input'\n\nimport type { StyleValue } from 'vue'\n\ntype TargetElement = HTMLInputElement | HTMLTextAreaElement\n\nconst PENDANT_MAP = {\n  suffix: 'append',\n  prefix: 'prepend',\n} as const\n\nexport default defineComponent({\n  name: 'ElInput',\n\n  components: { ElIcon, CircleClose, IconView },\n\n  inheritAttrs: false,\n\n  props: inputProps,\n  emits: inputEmits,\n\n  setup(props, { slots, emit, attrs: rawAttrs }) {\n    const instance = getCurrentInstance()!\n    const attrs = useAttrs()\n\n    const { form, formItem } = useFormItem()\n    const inputSize = useSize()\n    const inputDisabled = useDisabled()\n    const nsInput = useNamespace('input')\n    const nsTextarea = useNamespace('textarea')\n\n    const input = ref<HTMLInputElement>()\n    const textarea = ref<HTMLTextAreaElement>()\n    const focused = ref(false)\n    const hovering = ref(false)\n    const isComposing = ref(false)\n    const passwordVisible = ref(false)\n    const _textareaCalcStyle = shallowRef(props.inputStyle)\n\n    const inputOrTextarea = computed(() => input.value || textarea.value)\n\n    const needStatusIcon = computed(() => form?.statusIcon ?? false)\n    const validateState = computed(() => formItem?.validateState || '')\n    const validateIcon = computed(\n      () => ValidateComponentsMap[validateState.value]\n    )\n    const containerStyle = computed(() => rawAttrs.style as StyleValue)\n    const computedTextareaStyle = computed<StyleValue>(() => [\n      props.inputStyle,\n      _textareaCalcStyle.value,\n      { resize: props.resize },\n    ])\n    const nativeInputValue = computed(() =>\n      props.modelValue === null || props.modelValue === undefined\n        ? ''\n        : String(props.modelValue)\n    )\n    const showClear = computed(\n      () =>\n        props.clearable &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        !!nativeInputValue.value &&\n        (focused.value || hovering.value)\n    )\n    const showPwdVisible = computed(\n      () =>\n        props.showPassword &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        (!!nativeInputValue.value || focused.value)\n    )\n    const isWordLimitVisible = computed(\n      () =>\n        props.showWordLimit &&\n        !!attrs.value.maxlength &&\n        (props.type === 'text' || props.type === 'textarea') &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        !props.showPassword\n    )\n    const textLength = computed(() => Array.from(nativeInputValue.value).length)\n    const inputExceed = computed(\n      () =>\n        // show exceed style if length of initial value greater then maxlength\n        !!isWordLimitVisible.value &&\n        textLength.value > Number(attrs.value.maxlength)\n    )\n\n    const resizeTextarea = () => {\n      const { type, autosize } = props\n\n      if (!isClient || type !== 'textarea') return\n\n      if (autosize) {\n        const minRows = isObject(autosize) ? autosize.minRows : undefined\n        const maxRows = isObject(autosize) ? autosize.maxRows : undefined\n        _textareaCalcStyle.value = {\n          ...calcTextareaHeight(textarea.value!, minRows, maxRows),\n        }\n      } else {\n        _textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value!).minHeight,\n        }\n      }\n    }\n\n    const setNativeInputValue = () => {\n      const input = inputOrTextarea.value\n      if (!input || input.value === nativeInputValue.value) return\n      input.value = nativeInputValue.value\n    }\n\n    const calcIconOffset = (place: 'prefix' | 'suffix') => {\n      const { el } = instance.vnode\n      if (!el) return\n      const elList: HTMLSpanElement[] = Array.from(\n        el.querySelectorAll(`.${nsInput.e(place)}`)\n      )\n      const target = elList.find((item) => item.parentNode === el)\n\n      if (!target) return\n\n      const pendant = PENDANT_MAP[place]\n\n      if (slots[pendant]) {\n        target.style.transform = `translateX(${place === 'suffix' ? '-' : ''}${\n          el.querySelector(`.${nsInput.be('group', pendant)}`).offsetWidth\n        }px)`\n      } else {\n        target.removeAttribute('style')\n      }\n    }\n\n    const updateIconOffset = () => {\n      calcIconOffset('prefix')\n      calcIconOffset('suffix')\n    }\n\n    const handleInput = (event: Event) => {\n      const { value } = event.target as TargetElement\n\n      // should not emit input during composition\n      // see: https://github.com/ElemeFE/element/issues/10516\n      if (isComposing.value) return\n\n      // hack for https://github.com/ElemeFE/element/issues/8548\n      // should remove the following line when we don't support IE\n      if (value === nativeInputValue.value) return\n\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('input', value)\n\n      // ensure native input value is controlled\n      // see: https://github.com/ElemeFE/element/issues/12850\n      nextTick(setNativeInputValue)\n    }\n\n    const handleChange = (event: Event) => {\n      emit('change', (event.target as TargetElement).value)\n    }\n\n    const focus = () => {\n      // see: https://github.com/ElemeFE/element/issues/18573\n      nextTick(() => {\n        inputOrTextarea.value?.focus()\n      })\n    }\n\n    const blur = () => {\n      inputOrTextarea.value?.blur()\n    }\n\n    const handleFocus = (event: FocusEvent) => {\n      focused.value = true\n      emit('focus', event)\n    }\n\n    const handleBlur = (event: FocusEvent) => {\n      focused.value = false\n      emit('blur', event)\n      if (props.validateEvent) {\n        formItem?.validate?.('blur')\n      }\n    }\n\n    const select = () => {\n      inputOrTextarea.value?.select()\n    }\n\n    const handleCompositionStart = (event: CompositionEvent) => {\n      emit('compositionstart', event)\n      isComposing.value = true\n    }\n\n    const handleCompositionUpdate = (event: CompositionEvent) => {\n      emit('compositionupdate', event)\n      const text = (event.target as HTMLInputElement)?.value\n      const lastCharacter = text[text.length - 1] || ''\n      isComposing.value = !isKorean(lastCharacter)\n    }\n\n    const handleCompositionEnd = (event: CompositionEvent) => {\n      emit('compositionend', event)\n      if (isComposing.value) {\n        isComposing.value = false\n        handleInput(event)\n      }\n    }\n\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, '')\n      emit('change', '')\n      emit('clear')\n      emit('input', '')\n    }\n\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value\n      focus()\n    }\n\n    const suffixVisible = computed(\n      () =>\n        !!slots.suffix ||\n        !!props.suffixIcon ||\n        showClear.value ||\n        props.showPassword ||\n        isWordLimitVisible.value ||\n        (!!validateState.value && needStatusIcon.value)\n    )\n\n    watch(\n      () => props.modelValue,\n      () => {\n        nextTick(resizeTextarea)\n        if (props.validateEvent) {\n          formItem?.validate?.('change')\n        }\n      }\n    )\n\n    // native input value is set explicitly\n    // do not use v-model / :value in template\n    // see: https://github.com/ElemeFE/element/issues/14521\n    watch(nativeInputValue, () => setNativeInputValue())\n\n    // when change between <input> and <textarea>,\n    // update DOM dependent value and styles\n    // https://github.com/ElemeFE/element/issues/14857\n    watch(\n      () => props.type,\n      () => {\n        nextTick(() => {\n          setNativeInputValue()\n          resizeTextarea()\n          updateIconOffset()\n        })\n      }\n    )\n\n    onMounted(() => {\n      setNativeInputValue()\n      updateIconOffset()\n      nextTick(resizeTextarea)\n    })\n\n    onUpdated(() => {\n      nextTick(updateIconOffset)\n    })\n\n    const onMouseLeave = (evt: MouseEvent) => {\n      hovering.value = false\n      emit('mouseleave', evt)\n    }\n\n    const onMouseEnter = (evt: MouseEvent) => {\n      hovering.value = true\n      emit('mouseenter', evt)\n    }\n\n    const handleKeydown = (evt: KeyboardEvent) => {\n      emit('keydown', evt)\n    }\n\n    return {\n      input,\n      textarea,\n      attrs,\n      inputSize,\n      validateState,\n      validateIcon,\n      containerStyle,\n      computedTextareaStyle,\n      inputDisabled,\n      showClear,\n      showPwdVisible,\n      isWordLimitVisible,\n      textLength,\n      hovering,\n      inputExceed,\n      passwordVisible,\n      inputOrTextarea,\n      suffixVisible,\n      needStatusIcon,\n\n      resizeTextarea,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleCompositionStart,\n      handleCompositionUpdate,\n      handleCompositionEnd,\n      handlePasswordVisible,\n      clear,\n      select,\n      focus,\n      blur,\n      onMouseLeave,\n      onMouseEnter,\n      handleKeydown,\n\n      nsInput,\n      nsTextarea,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}