{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, onMounted, onUpdated, resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, withModifiers, withDirectives, withKeys, createVNode, withCtx, createBlock, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowUp, ArrowDown, Plus, Minus } from '@element-plus/icons-vue';\nimport { inputNumberProps, inputNumberEmits } from './input-number.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport RepeatClick from '../../../directives/repeat-click/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { isNumber } from '@vueuse/core';\n\nconst _sfc_main = defineComponent({\n  name: \"ElInputNumber\",\n  components: {\n    ElInput,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n    Plus,\n    Minus\n  },\n  directives: {\n    RepeatClick\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const input = ref();\n    const data = reactive({\n      currentValue: props.modelValue,\n      userInput: null\n    });\n    const {\n      formItem\n    } = useFormItem();\n    const ns = useNamespace(\"input-number\");\n    const minDisabled = computed(() => _decrease(props.modelValue) < props.min);\n    const maxDisabled = computed(() => _increase(props.modelValue) > props.max);\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step);\n\n      if (props.precision !== void 0) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\"InputNumber\", \"precision should not be less than the decimal places of step\");\n        }\n\n        return props.precision;\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision);\n      }\n    });\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === \"right\";\n    });\n    const inputNumberSize = useSize();\n    const inputNumberDisabled = useDisabled();\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput;\n      }\n\n      let currentValue = data.currentValue;\n\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return \"\";\n\n        if (props.precision !== void 0) {\n          currentValue = currentValue.toFixed(props.precision);\n        }\n      }\n\n      return currentValue;\n    });\n\n    const toPrecision = (num, pre) => {\n      if (pre === void 0) pre = numPrecision.value;\n      return parseFloat(`${Math.round(num * Math.pow(10, pre)) / Math.pow(10, pre)}`);\n    };\n\n    const getPrecision = value => {\n      if (value === void 0) return 0;\n      const valueString = value.toString();\n      const dotPosition = valueString.indexOf(\".\");\n      let precision = 0;\n\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n\n      return precision;\n    };\n\n    const _increase = val => {\n      if (!isNumber(val)) return data.currentValue;\n      const precisionFactor = Math.pow(10, numPrecision.value);\n      val = isNumber(val) ? val : NaN;\n      return toPrecision((precisionFactor * val + precisionFactor * props.step) / precisionFactor);\n    };\n\n    const _decrease = val => {\n      if (!isNumber(val)) return data.currentValue;\n      const precisionFactor = Math.pow(10, numPrecision.value);\n      val = isNumber(val) ? val : NaN;\n      return toPrecision((precisionFactor * val - precisionFactor * props.step) / precisionFactor);\n    };\n\n    const increase = () => {\n      if (inputNumberDisabled.value || maxDisabled.value) return;\n      const value = props.modelValue || 0;\n\n      const newVal = _increase(value);\n\n      setCurrentValue(newVal);\n    };\n\n    const decrease = () => {\n      if (inputNumberDisabled.value || minDisabled.value) return;\n      const value = props.modelValue || 0;\n\n      const newVal = _decrease(value);\n\n      setCurrentValue(newVal);\n    };\n\n    const setCurrentValue = newVal => {\n      var _a;\n\n      const oldVal = data.currentValue;\n\n      if (typeof newVal === \"number\" && props.precision !== void 0) {\n        newVal = toPrecision(newVal, props.precision);\n      }\n\n      if (newVal !== void 0 && newVal >= props.max) newVal = props.max;\n      if (newVal !== void 0 && newVal <= props.min) newVal = props.min;\n      if (oldVal === newVal) return;\n\n      if (!isNumber(newVal)) {\n        newVal = void 0;\n      }\n\n      data.userInput = null;\n      emit(\"update:modelValue\", newVal);\n      emit(\"input\", newVal);\n      emit(\"change\", newVal, oldVal);\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\");\n      data.currentValue = newVal;\n    };\n\n    const handleInput = value => {\n      return data.userInput = value;\n    };\n\n    const handleInputChange = value => {\n      const newVal = value !== \"\" ? Number(value) : \"\";\n\n      if (isNumber(newVal) && !Number.isNaN(newVal) || value === \"\") {\n        setCurrentValue(newVal);\n      }\n\n      data.userInput = null;\n    };\n\n    const focus = () => {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n\n    const blur = () => {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n\n    const handleFocus = event => {\n      emit(\"focus\", event);\n    };\n\n    const handleBlur = event => {\n      var _a;\n\n      emit(\"blur\", event);\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\");\n    };\n\n    watch(() => props.modelValue, value => {\n      let newVal = Number(value);\n\n      if (value === null) {\n        newVal = Number.NaN;\n      }\n\n      if (!isNaN(newVal)) {\n        if (props.stepStrictly) {\n          const stepPrecision = getPrecision(props.step);\n          const precisionFactor = Math.pow(10, stepPrecision);\n          newVal = Math.round(newVal / props.step) * precisionFactor * props.step / precisionFactor;\n        }\n\n        if (props.precision !== void 0) {\n          newVal = toPrecision(newVal, props.precision);\n        }\n\n        if (newVal > props.max) {\n          newVal = props.max;\n          emit(\"update:modelValue\", newVal);\n        }\n\n        if (newVal < props.min) {\n          newVal = props.min;\n          emit(\"update:modelValue\", newVal);\n        }\n      }\n\n      data.currentValue = newVal;\n      data.userInput = null;\n    }, {\n      immediate: true\n    });\n    onMounted(() => {\n      var _a;\n\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput.setAttribute(\"role\", \"spinbutton\");\n      innerInput.setAttribute(\"aria-valuemax\", String(props.max));\n      innerInput.setAttribute(\"aria-valuemin\", String(props.min));\n      innerInput.setAttribute(\"aria-valuenow\", String(data.currentValue));\n      innerInput.setAttribute(\"aria-disabled\", String(inputNumberDisabled.value));\n\n      if (!isNumber(props.modelValue)) {\n        let val = Number(props.modelValue);\n\n        if (isNaN(val)) {\n          val = void 0;\n        }\n\n        emit(\"update:modelValue\", val);\n      }\n    });\n    onUpdated(() => {\n      var _a;\n\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput == null ? void 0 : innerInput.setAttribute(\"aria-valuenow\", data.currentValue);\n    });\n    return {\n      input,\n      displayValue,\n      handleInput,\n      handleInputChange,\n      controlsAtRight,\n      decrease,\n      increase,\n      inputNumberSize,\n      inputNumberDisabled,\n      maxDisabled,\n      minDisabled,\n      focus,\n      blur,\n      handleFocus,\n      handleBlur,\n      ns\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  const _component_minus = resolveComponent(\"minus\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_arrow_up = resolveComponent(\"arrow-up\");\n\n  const _component_plus = resolveComponent(\"plus\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _directive_repeat_click = resolveDirective(\"repeat-click\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.inputNumberSize), _ctx.ns.is(\"disabled\", _ctx.inputNumberDisabled), _ctx.ns.is(\"without-controls\", !_ctx.controls), _ctx.ns.is(\"controls-right\", _ctx.controlsAtRight)]),\n    onDragstart: _cache[2] || (_cache[2] = withModifiers(() => {}, [\"prevent\"]))\n  }, [_ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    role: \"button\",\n    class: normalizeClass([_ctx.ns.e(\"decrease\"), _ctx.ns.is(\"disabled\", _ctx.minDisabled)]),\n    onKeydown: _cache[0] || (_cache[0] = withKeys((...args) => _ctx.decrease && _ctx.decrease(...args), [\"enter\"]))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [_ctx.controlsAtRight ? (openBlock(), createBlock(_component_arrow_down, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_minus, {\n      key: 1\n    }))]),\n    _: 1\n  })], 34)), [[_directive_repeat_click, _ctx.decrease]]) : createCommentVNode(\"v-if\", true), _ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    role: \"button\",\n    class: normalizeClass([_ctx.ns.e(\"increase\"), _ctx.ns.is(\"disabled\", _ctx.maxDisabled)]),\n    onKeydown: _cache[1] || (_cache[1] = withKeys((...args) => _ctx.increase && _ctx.increase(...args), [\"enter\"]))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [_ctx.controlsAtRight ? (openBlock(), createBlock(_component_arrow_up, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_plus, {\n      key: 1\n    }))]),\n    _: 1\n  })], 34)), [[_directive_repeat_click, _ctx.increase]]) : createCommentVNode(\"v-if\", true), createVNode(_component_el_input, {\n    ref: \"input\",\n    type: \"number\",\n    step: _ctx.step,\n    \"model-value\": _ctx.displayValue,\n    placeholder: _ctx.placeholder,\n    disabled: _ctx.inputNumberDisabled,\n    size: _ctx.inputNumberSize,\n    max: _ctx.max,\n    min: _ctx.min,\n    name: _ctx.name,\n    label: _ctx.label,\n    \"validate-event\": false,\n    onKeydown: [withKeys(withModifiers(_ctx.increase, [\"prevent\"]), [\"up\"]), withKeys(withModifiers(_ctx.decrease, [\"prevent\"]), [\"down\"])],\n    onBlur: _ctx.handleBlur,\n    onFocus: _ctx.handleFocus,\n    onInput: _ctx.handleInput,\n    onChange: _ctx.handleInputChange\n  }, null, 8, [\"step\", \"model-value\", \"placeholder\", \"disabled\", \"size\", \"max\", \"min\", \"name\", \"label\", \"onKeydown\", \"onBlur\", \"onFocus\", \"onInput\", \"onChange\"])], 34);\n}\n\nvar InputNumber = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { InputNumber as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElInput","ElIcon","ArrowUp","ArrowDown","Plus","Minus","directives","RepeatClick","props","inputNumberProps","emits","inputNumberEmits","setup","emit","input","ref","data","reactive","currentValue","modelValue","userInput","formItem","useFormItem","ns","useNamespace","minDisabled","computed","_decrease","min","maxDisabled","_increase","max","numPrecision","stepPrecision","getPrecision","step","precision","debugWarn","Math","controlsAtRight","controls","controlsPosition","inputNumberSize","useSize","inputNumberDisabled","useDisabled","displayValue","isNumber","Number","isNaN","toFixed","toPrecision","num","pre","value","parseFloat","round","pow","valueString","toString","dotPosition","indexOf","length","val","precisionFactor","NaN","increase","newVal","setCurrentValue","decrease","oldVal","_a","_b","handleFocus","event","watch","immediate","onMounted","innerInput","String","onUpdated","handleInput","handleInputChange","focus","blur","class","_ctx","onDragstart","withModifiers","key","role","onKeydown","_","createCommentVNode","createVNode","type","placeholder","disabled","size","label","withKeys"],"sources":["../../../../../../packages/components/input-number/src/input-number.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(inputNumberSize),\n      ns.is('disabled', inputNumberDisabled),\n      ns.is('without-controls', !controls),\n      ns.is('controls-right', controlsAtRight),\n    ]\"\n    @dragstart.prevent\n  >\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"decrease\"\n      role=\"button\"\n      :class=\"[ns.e('decrease'), ns.is('disabled', minDisabled)]\"\n      @keydown.enter=\"decrease\"\n    >\n      <el-icon>\n        <arrow-down v-if=\"controlsAtRight\" />\n        <minus v-else />\n      </el-icon>\n    </span>\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"increase\"\n      role=\"button\"\n      :class=\"[ns.e('increase'), ns.is('disabled', maxDisabled)]\"\n      @keydown.enter=\"increase\"\n    >\n      <el-icon>\n        <arrow-up v-if=\"controlsAtRight\" />\n        <plus v-else />\n      </el-icon>\n    </span>\n    <el-input\n      ref=\"input\"\n      type=\"number\"\n      :step=\"step\"\n      :model-value=\"displayValue\"\n      :placeholder=\"placeholder\"\n      :disabled=\"inputNumberDisabled\"\n      :size=\"inputNumberSize\"\n      :max=\"max\"\n      :min=\"min\"\n      :name=\"name\"\n      :label=\"label\"\n      :validate-event=\"false\"\n      @keydown.up.prevent=\"increase\"\n      @keydown.down.prevent=\"decrease\"\n      @blur=\"handleBlur\"\n      @focus=\"handleFocus\"\n      @input=\"handleInput\"\n      @change=\"handleInputChange\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  reactive,\n  ref,\n  watch,\n  onMounted,\n  onUpdated,\n} from 'vue'\n\nimport { ElIcon } from '@element-plus/components/icon'\nimport { RepeatClick } from '@element-plus/directives'\nimport {\n  useDisabled,\n  useFormItem,\n  useSize,\n  useNamespace,\n} from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport { isNumber, debugWarn } from '@element-plus/utils'\nimport { ArrowUp, ArrowDown, Plus, Minus } from '@element-plus/icons-vue'\nimport { inputNumberProps, inputNumberEmits } from './input-number'\n\nimport type { ComponentPublicInstance } from 'vue'\n\ninterface IData {\n  currentValue: number | undefined\n  userInput: null | number | string\n}\n\nexport default defineComponent({\n  name: 'ElInputNumber',\n  components: {\n    ElInput,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n    Plus,\n    Minus,\n  },\n  directives: {\n    RepeatClick,\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n  setup(props, { emit }) {\n    const input = ref<ComponentPublicInstance<typeof ElInput>>()\n    const data = reactive<IData>({\n      currentValue: props.modelValue,\n      userInput: null,\n    })\n    const { formItem } = useFormItem()\n    const ns = useNamespace('input-number')\n\n    const minDisabled = computed(() => _decrease(props.modelValue) < props.min)\n    const maxDisabled = computed(() => _increase(props.modelValue) > props.max)\n\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step)\n      if (props.precision !== undefined) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\n            'InputNumber',\n            'precision should not be less than the decimal places of step'\n          )\n        }\n        return props.precision\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision)\n      }\n    })\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === 'right'\n    })\n\n    const inputNumberSize = useSize()\n    const inputNumberDisabled = useDisabled()\n\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput\n      }\n      let currentValue: number | string | undefined = data.currentValue\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return ''\n        if (props.precision !== undefined) {\n          currentValue = currentValue.toFixed(props.precision)\n        }\n      }\n      return currentValue\n    })\n    const toPrecision = (num: number, pre?: number) => {\n      if (pre === undefined) pre = numPrecision.value\n      return parseFloat(\n        `${Math.round(num * Math.pow(10, pre)) / Math.pow(10, pre)}`\n      )\n    }\n    const getPrecision = (value: number | undefined) => {\n      if (value === undefined) return 0\n      const valueString = value.toString()\n      const dotPosition = valueString.indexOf('.')\n      let precision = 0\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1\n      }\n      return precision\n    }\n    const _increase = (val: number) => {\n      if (!isNumber(val)) return data.currentValue\n      const precisionFactor = Math.pow(10, numPrecision.value)\n      // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n      val = isNumber(val) ? val : NaN\n      return toPrecision(\n        (precisionFactor * val + precisionFactor * props.step) / precisionFactor\n      )\n    }\n    const _decrease = (val: number) => {\n      if (!isNumber(val)) return data.currentValue\n      const precisionFactor = Math.pow(10, numPrecision.value)\n      // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n      val = isNumber(val) ? val : NaN\n      return toPrecision(\n        (precisionFactor * val - precisionFactor * props.step) / precisionFactor\n      )\n    }\n    const increase = () => {\n      if (inputNumberDisabled.value || maxDisabled.value) return\n      const value = props.modelValue || 0\n      const newVal = _increase(value)\n      setCurrentValue(newVal)\n    }\n    const decrease = () => {\n      if (inputNumberDisabled.value || minDisabled.value) return\n      const value = props.modelValue || 0\n      const newVal = _decrease(value)\n      setCurrentValue(newVal)\n    }\n    const setCurrentValue = (newVal: number | string) => {\n      const oldVal = data.currentValue\n      if (typeof newVal === 'number' && props.precision !== undefined) {\n        newVal = toPrecision(newVal, props.precision)\n      }\n      if (newVal !== undefined && newVal >= props.max) newVal = props.max\n      if (newVal !== undefined && newVal <= props.min) newVal = props.min\n      if (oldVal === newVal) return\n      if (!isNumber(newVal)) {\n        newVal = undefined\n      }\n      data.userInput = null\n      emit('update:modelValue', newVal)\n      emit('input', newVal)\n      emit('change', newVal, oldVal)\n      formItem?.validate?.('change')\n      data.currentValue = newVal\n    }\n    const handleInput = (value: string) => {\n      return (data.userInput = value)\n    }\n    const handleInputChange = (value: string) => {\n      const newVal = value !== '' ? Number(value) : ''\n      if ((isNumber(newVal) && !Number.isNaN(newVal)) || value === '') {\n        setCurrentValue(newVal)\n      }\n      data.userInput = null\n    }\n\n    const focus = () => {\n      input.value?.focus?.()\n    }\n\n    const blur = () => {\n      input.value?.blur?.()\n    }\n\n    const handleFocus = (event: MouseEvent) => {\n      emit('focus', event)\n    }\n\n    const handleBlur = (event: MouseEvent) => {\n      emit('blur', event)\n      formItem?.validate?.('blur')\n    }\n\n    watch(\n      () => props.modelValue,\n      (value) => {\n        let newVal = Number(value)\n        if (value === null) {\n          newVal = Number.NaN\n        }\n        if (!isNaN(newVal)) {\n          if (props.stepStrictly) {\n            const stepPrecision = getPrecision(props.step)\n            const precisionFactor = Math.pow(10, stepPrecision)\n            newVal =\n              (Math.round(newVal / props.step) * precisionFactor * props.step) /\n              precisionFactor\n          }\n          if (props.precision !== undefined) {\n            newVal = toPrecision(newVal, props.precision)\n          }\n\n          if (newVal > props.max) {\n            newVal = props.max\n            emit('update:modelValue', newVal)\n          }\n          if (newVal < props.min) {\n            newVal = props.min\n            emit('update:modelValue', newVal)\n          }\n        }\n        data.currentValue = newVal\n        data.userInput = null\n      },\n      { immediate: true }\n    )\n    onMounted(() => {\n      const innerInput = input.value?.input as HTMLInputElement\n      innerInput.setAttribute('role', 'spinbutton')\n      innerInput.setAttribute('aria-valuemax', String(props.max))\n      innerInput.setAttribute('aria-valuemin', String(props.min))\n      innerInput.setAttribute('aria-valuenow', String(data.currentValue))\n      innerInput.setAttribute(\n        'aria-disabled',\n        String(inputNumberDisabled.value)\n      )\n      if (!isNumber(props.modelValue)) {\n        let val: number | undefined = Number(props.modelValue)\n        if (isNaN(val)) {\n          val = undefined\n        }\n        emit('update:modelValue', val)\n      }\n    })\n    onUpdated(() => {\n      const innerInput = input.value?.input\n      innerInput?.setAttribute('aria-valuenow', data.currentValue)\n    })\n    return {\n      input,\n      displayValue,\n      handleInput,\n      handleInputChange,\n      controlsAtRight,\n      decrease,\n      increase,\n      inputNumberSize,\n      inputNumberDisabled,\n      maxDisabled,\n      minDisabled,\n      focus,\n      blur,\n      handleFocus,\n      handleBlur,\n\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}