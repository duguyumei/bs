{"ast":null,"code":"import { defineComponent, ref, computed, nextTick, onMounted, watch, resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString, createCommentVNode, withDirectives, createVNode, createElementVNode } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport '../../../../directives/index.mjs';\nimport { ElScrollbar } from '../../../scrollbar/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue';\nimport { getTimeLists } from './useTimePicker.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport RepeatClick from '../../../../directives/repeat-click/index.mjs';\n\nconst _sfc_main = defineComponent({\n  directives: {\n    repeatClick: RepeatClick\n  },\n  components: {\n    ElScrollbar,\n    ElIcon,\n    ArrowUp,\n    ArrowDown\n  },\n  props: {\n    role: {\n      type: String,\n      required: true\n    },\n    spinnerDate: {\n      type: Object,\n      required: true\n    },\n    showSeconds: {\n      type: Boolean,\n      default: true\n    },\n    arrowControl: Boolean,\n    amPmMode: {\n      type: String,\n      default: \"\"\n    },\n    disabledHours: {\n      type: Function\n    },\n    disabledMinutes: {\n      type: Function\n    },\n    disabledSeconds: {\n      type: Function\n    }\n  },\n  emits: [\"change\", \"select-range\", \"set-option\"],\n\n  setup(props, ctx) {\n    let isScrolling = false;\n    const debouncedResetScroll = debounce(type => {\n      isScrolling = false;\n      adjustCurrentSpinner(type);\n    }, 200);\n    const currentScrollbar = ref(null);\n    const listHoursRef = ref(null);\n    const listMinutesRef = ref(null);\n    const listSecondsRef = ref(null);\n    const listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef\n    };\n    const spinnerItems = computed(() => {\n      const arr = [\"hours\", \"minutes\", \"seconds\"];\n      return props.showSeconds ? arr : arr.slice(0, 2);\n    });\n    const hours = computed(() => {\n      return props.spinnerDate.hour();\n    });\n    const minutes = computed(() => {\n      return props.spinnerDate.minute();\n    });\n    const seconds = computed(() => {\n      return props.spinnerDate.second();\n    });\n    const timePartsMap = computed(() => ({\n      hours,\n      minutes,\n      seconds\n    }));\n    const hoursList = computed(() => {\n      return getHoursList(props.role);\n    });\n    const minutesList = computed(() => {\n      return getMinutesList(hours.value, props.role);\n    });\n    const secondsList = computed(() => {\n      return getSecondsList(hours.value, minutes.value, props.role);\n    });\n    const listMap = computed(() => ({\n      hours: hoursList,\n      minutes: minutesList,\n      seconds: secondsList\n    }));\n    const arrowHourList = computed(() => {\n      const hour = hours.value;\n      return [hour > 0 ? hour - 1 : void 0, hour, hour < 23 ? hour + 1 : void 0];\n    });\n    const arrowMinuteList = computed(() => {\n      const minute = minutes.value;\n      return [minute > 0 ? minute - 1 : void 0, minute, minute < 59 ? minute + 1 : void 0];\n    });\n    const arrowSecondList = computed(() => {\n      const second = seconds.value;\n      return [second > 0 ? second - 1 : void 0, second, second < 59 ? second + 1 : void 0];\n    });\n    const arrowListMap = computed(() => ({\n      hours: arrowHourList,\n      minutes: arrowMinuteList,\n      seconds: arrowSecondList\n    }));\n\n    const getAmPmFlag = hour => {\n      const shouldShowAmPm = !!props.amPmMode;\n      if (!shouldShowAmPm) return \"\";\n      const isCapital = props.amPmMode === \"A\";\n      let content = hour < 12 ? \" am\" : \" pm\";\n      if (isCapital) content = content.toUpperCase();\n      return content;\n    };\n\n    const emitSelectRange = type => {\n      if (type === \"hours\") {\n        ctx.emit(\"select-range\", 0, 2);\n      } else if (type === \"minutes\") {\n        ctx.emit(\"select-range\", 3, 5);\n      } else if (type === \"seconds\") {\n        ctx.emit(\"select-range\", 6, 8);\n      }\n\n      currentScrollbar.value = type;\n    };\n\n    const adjustCurrentSpinner = type => {\n      adjustSpinner(type, timePartsMap.value[type].value);\n    };\n\n    const adjustSpinners = () => {\n      adjustCurrentSpinner(\"hours\");\n      adjustCurrentSpinner(\"minutes\");\n      adjustCurrentSpinner(\"seconds\");\n    };\n\n    const adjustSpinner = (type, value) => {\n      if (props.arrowControl) return;\n      const el = listRefsMap[type];\n\n      if (el && el.$el) {\n        el.$el.querySelector(\".el-scrollbar__wrap\").scrollTop = Math.max(0, value * typeItemHeight(type));\n      }\n    };\n\n    const typeItemHeight = type => {\n      const el = listRefsMap[type];\n      return el.$el.querySelector(\"li\").offsetHeight;\n    };\n\n    const onIncreaseClick = () => {\n      scrollDown(1);\n    };\n\n    const onDecreaseClick = () => {\n      scrollDown(-1);\n    };\n\n    const scrollDown = step => {\n      if (!currentScrollbar.value) {\n        emitSelectRange(\"hours\");\n      }\n\n      const label = currentScrollbar.value;\n      let now = timePartsMap.value[label].value;\n      const total = currentScrollbar.value === \"hours\" ? 24 : 60;\n      now = (now + step + total) % total;\n      modifyDateField(label, now);\n      adjustSpinner(label, now);\n      nextTick(() => emitSelectRange(currentScrollbar.value));\n    };\n\n    const modifyDateField = (type, value) => {\n      const list = listMap.value[type].value;\n      const isDisabled = list[value];\n      if (isDisabled) return;\n\n      switch (type) {\n        case \"hours\":\n          ctx.emit(\"change\", props.spinnerDate.hour(value).minute(minutes.value).second(seconds.value));\n          break;\n\n        case \"minutes\":\n          ctx.emit(\"change\", props.spinnerDate.hour(hours.value).minute(value).second(seconds.value));\n          break;\n\n        case \"seconds\":\n          ctx.emit(\"change\", props.spinnerDate.hour(hours.value).minute(minutes.value).second(value));\n          break;\n      }\n    };\n\n    const handleClick = (type, {\n      value,\n      disabled\n    }) => {\n      if (!disabled) {\n        modifyDateField(type, value);\n        emitSelectRange(type);\n        adjustSpinner(type, value);\n      }\n    };\n\n    const handleScroll = type => {\n      isScrolling = true;\n      debouncedResetScroll(type);\n      const value = Math.min(Math.round((listRefsMap[type].$el.querySelector(\".el-scrollbar__wrap\").scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === \"hours\" ? 23 : 59);\n      modifyDateField(type, value);\n    };\n\n    const scrollBarHeight = type => {\n      return listRefsMap[type].$el.offsetHeight;\n    };\n\n    const bindScrollEvent = () => {\n      const bindFuntion = type => {\n        if (listRefsMap[type] && listRefsMap[type].$el) {\n          listRefsMap[type].$el.querySelector(\".el-scrollbar__wrap\").onscroll = () => {\n            handleScroll(type);\n          };\n        }\n      };\n\n      bindFuntion(\"hours\");\n      bindFuntion(\"minutes\");\n      bindFuntion(\"seconds\");\n    };\n\n    onMounted(() => {\n      nextTick(() => {\n        !props.arrowControl && bindScrollEvent();\n        adjustSpinners();\n        if (props.role === \"start\") emitSelectRange(\"hours\");\n      });\n    });\n\n    const setRef = (scrollbar, type) => {\n      listRefsMap[type] = scrollbar;\n    };\n\n    ctx.emit(\"set-option\", [`${props.role}_scrollDown`, scrollDown]);\n    ctx.emit(\"set-option\", [`${props.role}_emitSelectRange`, emitSelectRange]);\n    const {\n      getHoursList,\n      getMinutesList,\n      getSecondsList\n    } = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds);\n    watch(() => props.spinnerDate, () => {\n      if (isScrolling) return;\n      adjustSpinners();\n    });\n    return {\n      setRef,\n      spinnerItems,\n      currentScrollbar,\n      hours,\n      minutes,\n      seconds,\n      hoursList,\n      minutesList,\n      arrowHourList,\n      arrowMinuteList,\n      arrowSecondList,\n      getAmPmFlag,\n      emitSelectRange,\n      adjustCurrentSpinner,\n      typeItemHeight,\n      listHoursRef,\n      listMinutesRef,\n      listSecondsRef,\n      onIncreaseClick,\n      onDecreaseClick,\n      handleClick,\n      secondsList,\n      timePartsMap,\n      arrowListMap,\n      listMap\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"onMouseenter\"];\nconst _hoisted_3 = {\n  class: \"el-time-spinner__list\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  const _component_arrow_up = resolveComponent(\"arrow-up\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  const _directive_repeat_click = resolveDirective(\"repeat-click\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-time-spinner\", {\n      \"has-seconds\": _ctx.showSeconds\n    }])\n  }, [!_ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList(_ctx.spinnerItems, item => {\n    return openBlock(), createBlock(_component_el_scrollbar, {\n      key: item,\n      ref_for: true,\n      ref: scollbar => _ctx.setRef(scollbar, item),\n      class: \"el-time-spinner__wrapper\",\n      \"wrap-style\": \"max-height: inherit;\",\n      \"view-class\": \"el-time-spinner__list\",\n      noresize: \"\",\n      tag: \"ul\",\n      onMouseenter: $event => _ctx.emitSelectRange(item),\n      onMousemove: $event => _ctx.adjustCurrentSpinner(item)\n    }, {\n      default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.listMap[item].value, (disabled, key) => {\n        return openBlock(), createElementBlock(\"li\", {\n          key,\n          class: normalizeClass([\"el-time-spinner__item\", {\n            active: key === _ctx.timePartsMap[item].value,\n            disabled\n          }]),\n          onClick: $event => _ctx.handleClick(item, {\n            value: key,\n            disabled\n          })\n        }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n          key: 0\n        }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + toDisplayString(_ctx.getAmPmFlag(key)), 1)], 2112)) : (openBlock(), createElementBlock(Fragment, {\n          key: 1\n        }, [createTextVNode(toDisplayString((\"0\" + key).slice(-2)), 1)], 2112))], 10, _hoisted_1);\n      }), 128))]),\n      _: 2\n    }, 1032, [\"onMouseenter\", \"onMousemove\"]);\n  }), 128)) : createCommentVNode(\"v-if\", true), _ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n    key: 1\n  }, renderList(_ctx.spinnerItems, item => {\n    return openBlock(), createElementBlock(\"div\", {\n      key: item,\n      class: \"el-time-spinner__wrapper is-arrow\",\n      onMouseenter: $event => _ctx.emitSelectRange(item)\n    }, [withDirectives((openBlock(), createBlock(_component_el_icon, {\n      class: \"el-time-spinner__arrow arrow-up\"\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_up)]),\n      _: 1\n    })), [[_directive_repeat_click, _ctx.onDecreaseClick]]), withDirectives((openBlock(), createBlock(_component_el_icon, {\n      class: \"el-time-spinner__arrow arrow-down\"\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_down)]),\n      _: 1\n    })), [[_directive_repeat_click, _ctx.onIncreaseClick]]), createElementVNode(\"ul\", _hoisted_3, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.arrowListMap[item].value, (time, key) => {\n      return openBlock(), createElementBlock(\"li\", {\n        key,\n        class: normalizeClass([\"el-time-spinner__item\", {\n          active: time === _ctx.timePartsMap[item].value,\n          disabled: _ctx.listMap[item].value[time]\n        }])\n      }, [typeof time === \"number\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + toDisplayString(_ctx.getAmPmFlag(time)), 1)], 2112)) : (openBlock(), createElementBlock(Fragment, {\n        key: 1\n      }, [createTextVNode(toDisplayString((\"0\" + time).slice(-2)), 1)], 2112))], 2112)) : createCommentVNode(\"v-if\", true)], 2);\n    }), 128))])], 40, _hoisted_2);\n  }), 128)) : createCommentVNode(\"v-if\", true)], 2);\n}\n\nvar TimeSpinner = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { TimeSpinner as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","directives","repeatClick","RepeatClick","components","ElScrollbar","ElIcon","ArrowUp","ArrowDown","props","role","type","String","required","spinnerDate","Object","showSeconds","Boolean","default","arrowControl","amPmMode","disabledHours","Function","disabledMinutes","disabledSeconds","emits","setup","ctx","isScrolling","debouncedResetScroll","debounce","adjustCurrentSpinner","currentScrollbar","ref","listHoursRef","listMinutesRef","listSecondsRef","listRefsMap","hours","minutes","seconds","spinnerItems","computed","arr","slice","hour","minute","second","timePartsMap","hoursList","getHoursList","minutesList","getMinutesList","value","secondsList","getSecondsList","listMap","arrowHourList","arrowMinuteList","arrowSecondList","arrowListMap","getAmPmFlag","shouldShowAmPm","isCapital","content","toUpperCase","emitSelectRange","emit","adjustSpinner","adjustSpinners","el","$el","querySelector","scrollTop","Math","max","typeItemHeight","offsetHeight","onIncreaseClick","scrollDown","onDecreaseClick","step","label","now","total","modifyDateField","nextTick","list","isDisabled","handleClick","disabled","handleScroll","min","round","scrollBarHeight","bindScrollEvent","bindFuntion","onscroll","onMounted","setRef","scrollbar","getTimeLists","watch","class","_createElementBlock","_normalizeClass","_ctx","_Fragment","item","_createBlock","_component_el_scrollbar","key","ref_for","scollbar","noresize","tag","onMouseenter","$event","onMousemove","active","onClick","openBlock","toDisplayString","_component_el_icon","_createVNode","_component_arrow_up","_","withDirectives","_component_arrow_down","_createElementVNode","time"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"],"sourcesContent":["<template>\n  <div class=\"el-time-spinner\" :class=\"{ 'has-seconds': showSeconds }\">\n    <template v-if=\"!arrowControl\">\n      <el-scrollbar\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :ref=\"(scollbar) => setRef(scollbar, item)\"\n        class=\"el-time-spinner__wrapper\"\n        wrap-style=\"max-height: inherit;\"\n        view-class=\"el-time-spinner__list\"\n        noresize\n        tag=\"ul\"\n        @mouseenter=\"emitSelectRange(item)\"\n        @mousemove=\"adjustCurrentSpinner(item)\"\n      >\n        <li\n          v-for=\"(disabled, key) in listMap[item].value\"\n          :key=\"key\"\n          class=\"el-time-spinner__item\"\n          :class=\"{ active: key === timePartsMap[item].value, disabled }\"\n          @click=\"handleClick(item, { value: key, disabled })\"\n        >\n          <template v-if=\"item === 'hours'\">\n            {{ ('0' + (amPmMode ? key % 12 || 12 : key)).slice(-2)\n            }}{{ getAmPmFlag(key) }}\n          </template>\n          <template v-else>\n            {{ ('0' + key).slice(-2) }}\n          </template>\n        </li>\n      </el-scrollbar>\n    </template>\n    <template v-if=\"arrowControl\">\n      <div\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        class=\"el-time-spinner__wrapper is-arrow\"\n        @mouseenter=\"emitSelectRange(item)\"\n      >\n        <el-icon\n          v-repeat-click=\"onDecreaseClick\"\n          class=\"el-time-spinner__arrow arrow-up\"\n        >\n          <arrow-up />\n        </el-icon>\n        <el-icon\n          v-repeat-click=\"onIncreaseClick\"\n          class=\"el-time-spinner__arrow arrow-down\"\n        >\n          <arrow-down />\n        </el-icon>\n        <ul class=\"el-time-spinner__list\">\n          <li\n            v-for=\"(time, key) in arrowListMap[item].value\"\n            :key=\"key\"\n            class=\"el-time-spinner__item\"\n            :class=\"{\n              active: time === timePartsMap[item].value,\n              disabled: listMap[item].value[time],\n            }\"\n          >\n            <template v-if=\"typeof time === 'number'\">\n              <template v-if=\"item === 'hours'\">\n                {{ ('0' + (amPmMode ? time % 12 || 12 : time)).slice(-2)\n                }}{{ getAmPmFlag(time) }}\n              </template>\n              <template v-else>\n                {{ ('0' + time).slice(-2) }}\n              </template>\n            </template>\n          </li>\n        </ul>\n      </div>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, ref, nextTick, computed, onMounted, watch } from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { RepeatClick } from '@element-plus/directives'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue'\nimport { getTimeLists } from './useTimePicker'\n\nimport type { PropType, Ref } from 'vue'\nimport type { Dayjs } from 'dayjs'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  directives: {\n    repeatClick: RepeatClick,\n  },\n\n  components: {\n    ElScrollbar,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n  },\n\n  props: {\n    role: {\n      type: String,\n      required: true,\n    },\n    spinnerDate: {\n      type: Object as PropType<Dayjs>,\n      required: true,\n    },\n    showSeconds: {\n      type: Boolean,\n      default: true,\n    },\n    arrowControl: Boolean,\n    amPmMode: {\n      type: String,\n      default: '', // 'a': am/pm; 'A': AM/PM\n    },\n    disabledHours: {\n      type: Function,\n    },\n    disabledMinutes: {\n      type: Function,\n    },\n    disabledSeconds: {\n      type: Function,\n    },\n  },\n\n  emits: ['change', 'select-range', 'set-option'],\n\n  setup(props, ctx) {\n    // data\n    let isScrolling = false\n    const debouncedResetScroll = debounce((type) => {\n      isScrolling = false\n      adjustCurrentSpinner(type)\n    }, 200)\n    const currentScrollbar = ref(null)\n    const listHoursRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listMinutesRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listSecondsRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef,\n    }\n\n    // computed\n    const spinnerItems = computed(() => {\n      const arr = ['hours', 'minutes', 'seconds']\n      return props.showSeconds ? arr : arr.slice(0, 2)\n    })\n    const hours = computed(() => {\n      return props.spinnerDate.hour()\n    })\n    const minutes = computed(() => {\n      return props.spinnerDate.minute()\n    })\n    const seconds = computed(() => {\n      return props.spinnerDate.second()\n    })\n    const timePartsMap = computed(() => ({\n      hours,\n      minutes,\n      seconds,\n    }))\n    const hoursList = computed(() => {\n      return getHoursList(props.role)\n    })\n    const minutesList = computed(() => {\n      return getMinutesList(hours.value, props.role)\n    })\n    const secondsList = computed(() => {\n      return getSecondsList(hours.value, minutes.value, props.role)\n    })\n    const listMap = computed(() => ({\n      hours: hoursList,\n      minutes: minutesList,\n      seconds: secondsList,\n    }))\n    const arrowHourList = computed(() => {\n      const hour = hours.value\n      return [\n        hour > 0 ? hour - 1 : undefined,\n        hour,\n        hour < 23 ? hour + 1 : undefined,\n      ]\n    })\n    const arrowMinuteList = computed(() => {\n      const minute = minutes.value\n      return [\n        minute > 0 ? minute - 1 : undefined,\n        minute,\n        minute < 59 ? minute + 1 : undefined,\n      ]\n    })\n    const arrowSecondList = computed(() => {\n      const second = seconds.value\n      return [\n        second > 0 ? second - 1 : undefined,\n        second,\n        second < 59 ? second + 1 : undefined,\n      ]\n    })\n    const arrowListMap = computed(() => ({\n      hours: arrowHourList,\n      minutes: arrowMinuteList,\n      seconds: arrowSecondList,\n    }))\n    const getAmPmFlag = (hour) => {\n      const shouldShowAmPm = !!props.amPmMode\n      if (!shouldShowAmPm) return ''\n      const isCapital = props.amPmMode === 'A'\n      // todo locale\n      let content = hour < 12 ? ' am' : ' pm'\n      if (isCapital) content = content.toUpperCase()\n      return content\n    }\n\n    const emitSelectRange = (type) => {\n      if (type === 'hours') {\n        ctx.emit('select-range', 0, 2)\n      } else if (type === 'minutes') {\n        ctx.emit('select-range', 3, 5)\n      } else if (type === 'seconds') {\n        ctx.emit('select-range', 6, 8)\n      }\n      currentScrollbar.value = type\n    }\n\n    const adjustCurrentSpinner = (type) => {\n      adjustSpinner(type, timePartsMap.value[type].value)\n    }\n\n    // NOTE: used by datetime / date-range panel\n    //       renamed from adjustScrollTop\n    //       should try to refactory it\n    const adjustSpinners = () => {\n      adjustCurrentSpinner('hours')\n      adjustCurrentSpinner('minutes')\n      adjustCurrentSpinner('seconds')\n    }\n\n    const adjustSpinner = (type, value) => {\n      if (props.arrowControl) return\n      const el = listRefsMap[type]\n      if (el && el.$el) {\n        el.$el.querySelector('.el-scrollbar__wrap').scrollTop = Math.max(\n          0,\n          value * typeItemHeight(type)\n        )\n      }\n    }\n\n    const typeItemHeight = (type) => {\n      const el = listRefsMap[type]\n      return el.$el.querySelector('li').offsetHeight\n    }\n\n    const onIncreaseClick = () => {\n      scrollDown(1)\n    }\n\n    const onDecreaseClick = () => {\n      scrollDown(-1)\n    }\n\n    const scrollDown = (step) => {\n      if (!currentScrollbar.value) {\n        emitSelectRange('hours')\n      }\n\n      const label = currentScrollbar.value\n      let now = timePartsMap.value[label].value\n      const total = currentScrollbar.value === 'hours' ? 24 : 60\n      now = (now + step + total) % total\n\n      modifyDateField(label, now)\n      adjustSpinner(label, now)\n      nextTick(() => emitSelectRange(currentScrollbar.value))\n    }\n\n    const modifyDateField = (type, value) => {\n      const list = listMap.value[type].value\n      const isDisabled = list[value]\n      if (isDisabled) return\n      switch (type) {\n        case 'hours':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(value)\n              .minute(minutes.value)\n              .second(seconds.value)\n          )\n          break\n        case 'minutes':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(hours.value)\n              .minute(value)\n              .second(seconds.value)\n          )\n          break\n        case 'seconds':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(hours.value)\n              .minute(minutes.value)\n              .second(value)\n          )\n          break\n      }\n    }\n\n    const handleClick = (type, { value, disabled }) => {\n      if (!disabled) {\n        modifyDateField(type, value)\n        emitSelectRange(type)\n        adjustSpinner(type, value)\n      }\n    }\n\n    const handleScroll = (type) => {\n      isScrolling = true\n      debouncedResetScroll(type)\n      const value = Math.min(\n        Math.round(\n          (listRefsMap[type].$el.querySelector('.el-scrollbar__wrap')\n            .scrollTop -\n            (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) +\n            3) /\n            typeItemHeight(type)\n        ),\n        type === 'hours' ? 23 : 59\n      )\n      modifyDateField(type, value)\n    }\n\n    const scrollBarHeight = (type) => {\n      return listRefsMap[type].$el.offsetHeight\n    }\n\n    const bindScrollEvent = () => {\n      const bindFuntion = (type) => {\n        if (listRefsMap[type] && listRefsMap[type].$el) {\n          listRefsMap[type].$el.querySelector('.el-scrollbar__wrap').onscroll =\n            () => {\n              // TODO: scroll is emitted when set scrollTop programatically\n              // should find better solutions in the future!\n              handleScroll(type)\n            }\n        }\n      }\n      bindFuntion('hours')\n      bindFuntion('minutes')\n      bindFuntion('seconds')\n    }\n\n    onMounted(() => {\n      nextTick(() => {\n        !props.arrowControl && bindScrollEvent()\n        adjustSpinners()\n        // set selection on the first hour part\n        if (props.role === 'start') emitSelectRange('hours')\n      })\n    })\n\n    const setRef = (scrollbar, type) => {\n      listRefsMap[type] = scrollbar\n    }\n\n    ctx.emit('set-option', [`${props.role}_scrollDown`, scrollDown])\n    ctx.emit('set-option', [`${props.role}_emitSelectRange`, emitSelectRange])\n\n    const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(\n      props.disabledHours,\n      props.disabledMinutes,\n      props.disabledSeconds\n    )\n\n    watch(\n      () => props.spinnerDate,\n      () => {\n        if (isScrolling) return\n        adjustSpinners()\n      }\n    )\n\n    return {\n      setRef,\n      spinnerItems,\n      currentScrollbar,\n      hours,\n      minutes,\n      seconds,\n      hoursList,\n      minutesList,\n      arrowHourList,\n      arrowMinuteList,\n      arrowSecondList,\n      getAmPmFlag,\n      emitSelectRange,\n      adjustCurrentSpinner,\n      typeItemHeight,\n      listHoursRef,\n      listMinutesRef,\n      listSecondsRef,\n      onIncreaseClick,\n      onDecreaseClick,\n      handleClick,\n      secondsList,\n      timePartsMap,\n      arrowListMap,\n      listMap,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}