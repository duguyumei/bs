{"ast":null,"code":"import { defineComponent, computed, ref, nextTick, watch, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot, createElementVNode, toDisplayString, mergeProps, Fragment, createBlock, withCtx, createCommentVNode } from 'vue';\nimport { isString } from '@vue/shared';\nimport { isBoolean, isClient, useThrottleFn, useEventListener } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport { ElImageViewer } from '../../image-viewer/index.mjs';\nimport '../../../utils/index.mjs';\nimport { imageProps, imageEmits } from './image.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useAttrs } from '../../../hooks/use-attrs/index.mjs';\nimport { isInContainer } from '../../../utils/dom/position.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport { getScrollContainer } from '../../../utils/dom/scroll.mjs';\nlet prevOverflow = \"\";\n\nconst _sfc_main = defineComponent({\n  name: \"ElImage\",\n  components: {\n    ImageViewer: ElImageViewer\n  },\n  inheritAttrs: false,\n  props: imageProps,\n  emits: imageEmits,\n\n  setup(props, {\n    emit,\n    attrs: rawAttrs\n  }) {\n    useDeprecated({\n      scope: \"el-image\",\n      from: \"append-to-body\",\n      replacement: \"preview-teleported\",\n      version: \"2.2.0\",\n      ref: \"https://element-plus.org/en-US/component/image.html#image-attributess\"\n    }, computed(() => isBoolean(props.appendToBody)));\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"image\");\n    const attrs = useAttrs();\n    const hasLoadError = ref(false);\n    const loading = ref(true);\n    const imgWidth = ref(0);\n    const imgHeight = ref(0);\n    const showViewer = ref(false);\n    const container = ref();\n\n    const _scrollContainer = ref();\n\n    let stopScrollListener;\n    let stopWheelListener;\n    const containerStyle = computed(() => rawAttrs.style);\n    const imageStyle = computed(() => {\n      const {\n        fit\n      } = props;\n\n      if (isClient && fit) {\n        return {\n          objectFit: fit\n        };\n      }\n\n      return {};\n    });\n    const preview = computed(() => {\n      const {\n        previewSrcList\n      } = props;\n      return Array.isArray(previewSrcList) && previewSrcList.length > 0;\n    });\n    const teleported = computed(() => {\n      return props.appendToBody || props.previewTeleported;\n    });\n    const imageIndex = computed(() => {\n      const {\n        previewSrcList,\n        initialIndex\n      } = props;\n      let previewIndex = initialIndex;\n\n      if (initialIndex > previewSrcList.length - 1) {\n        previewIndex = 0;\n      }\n\n      return previewIndex;\n    });\n\n    const loadImage = () => {\n      if (!isClient) return;\n      loading.value = true;\n      hasLoadError.value = false;\n      const img = new Image();\n      const currentImageSrc = props.src;\n      img.addEventListener(\"load\", e => {\n        if (currentImageSrc !== props.src) {\n          return;\n        }\n\n        handleLoad(e, img);\n      });\n      img.addEventListener(\"error\", e => {\n        if (currentImageSrc !== props.src) {\n          return;\n        }\n\n        handleError(e);\n      });\n      Object.entries(attrs.value).forEach(([key, value]) => {\n        if (key.toLowerCase() === \"onload\") return;\n        img.setAttribute(key, value);\n      });\n      img.src = currentImageSrc;\n    };\n\n    function handleLoad(e, img) {\n      imgWidth.value = img.width;\n      imgHeight.value = img.height;\n      loading.value = false;\n      hasLoadError.value = false;\n    }\n\n    function handleError(event) {\n      loading.value = false;\n      hasLoadError.value = true;\n      emit(\"error\", event);\n    }\n\n    function handleLazyLoad() {\n      if (isInContainer(container.value, _scrollContainer.value)) {\n        loadImage();\n        removeLazyLoadListener();\n      }\n    }\n\n    const lazyLoadHandler = useThrottleFn(handleLazyLoad, 200);\n\n    async function addLazyLoadListener() {\n      var _a;\n\n      if (!isClient) return;\n      await nextTick();\n      const {\n        scrollContainer\n      } = props;\n\n      if (isElement(scrollContainer)) {\n        _scrollContainer.value = scrollContainer;\n      } else if (isString(scrollContainer) && scrollContainer !== \"\") {\n        _scrollContainer.value = (_a = document.querySelector(scrollContainer)) != null ? _a : void 0;\n      } else if (container.value) {\n        _scrollContainer.value = getScrollContainer(container.value);\n      }\n\n      if (_scrollContainer.value) {\n        stopScrollListener = useEventListener(_scrollContainer, \"scroll\", lazyLoadHandler);\n        setTimeout(() => handleLazyLoad(), 100);\n      }\n    }\n\n    function removeLazyLoadListener() {\n      if (!isClient || !_scrollContainer.value || !lazyLoadHandler) return;\n      stopScrollListener();\n      _scrollContainer.value = void 0;\n    }\n\n    function wheelHandler(e) {\n      if (!e.ctrlKey) return;\n\n      if (e.deltaY < 0) {\n        e.preventDefault();\n        return false;\n      } else if (e.deltaY > 0) {\n        e.preventDefault();\n        return false;\n      }\n    }\n\n    function clickHandler() {\n      if (!preview.value) return;\n      stopWheelListener = useEventListener(\"wheel\", wheelHandler, {\n        passive: false\n      });\n      prevOverflow = document.body.style.overflow;\n      document.body.style.overflow = \"hidden\";\n      showViewer.value = true;\n    }\n\n    function closeViewer() {\n      stopWheelListener == null ? void 0 : stopWheelListener();\n      document.body.style.overflow = prevOverflow;\n      showViewer.value = false;\n      emit(\"close\");\n    }\n\n    function switchViewer(val) {\n      emit(\"switch\", val);\n    }\n\n    watch(() => props.src, () => {\n      if (props.lazy) {\n        loading.value = true;\n        hasLoadError.value = false;\n        removeLazyLoadListener();\n        addLazyLoadListener();\n      } else {\n        loadImage();\n      }\n    });\n    onMounted(() => {\n      if (props.lazy) {\n        addLazyLoadListener();\n      } else {\n        loadImage();\n      }\n    });\n    return {\n      attrs,\n      loading,\n      hasLoadError,\n      showViewer,\n      containerStyle,\n      imageStyle,\n      preview,\n      imageIndex,\n      container,\n      ns,\n      teleported,\n      clickHandler,\n      closeViewer,\n      switchViewer,\n      t\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"src\"];\nconst _hoisted_2 = {\n  key: 0\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_image_viewer = resolveComponent(\"image-viewer\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"container\",\n    class: normalizeClass([_ctx.ns.b(), _ctx.$attrs.class]),\n    style: normalizeStyle(_ctx.containerStyle)\n  }, [_ctx.loading ? renderSlot(_ctx.$slots, \"placeholder\", {\n    key: 0\n  }, () => [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"placeholder\"))\n  }, null, 2)]) : _ctx.hasLoadError ? renderSlot(_ctx.$slots, \"error\", {\n    key: 1\n  }, () => [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"error\"))\n  }, toDisplayString(_ctx.t(\"el.image.error\")), 3)]) : (openBlock(), createElementBlock(\"img\", mergeProps({\n    key: 2\n  }, _ctx.attrs, {\n    src: _ctx.src,\n    style: _ctx.imageStyle,\n    class: [_ctx.ns.e(\"inner\"), _ctx.preview ? _ctx.ns.e(\"preview\") : \"\"],\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.clickHandler && _ctx.clickHandler(...args))\n  }), null, 16, _hoisted_1)), _ctx.preview ? (openBlock(), createElementBlock(Fragment, {\n    key: 3\n  }, [_ctx.showViewer ? (openBlock(), createBlock(_component_image_viewer, {\n    key: 0,\n    \"z-index\": _ctx.zIndex,\n    \"initial-index\": _ctx.imageIndex,\n    \"url-list\": _ctx.previewSrcList,\n    \"hide-on-click-modal\": _ctx.hideOnClickModal,\n    teleported: _ctx.teleported,\n    onClose: _ctx.closeViewer,\n    onSwitch: _ctx.switchViewer\n  }, {\n    default: withCtx(() => [_ctx.$slots.viewer ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [renderSlot(_ctx.$slots, \"viewer\")])) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  }, 8, [\"z-index\", \"initial-index\", \"url-list\", \"hide-on-click-modal\", \"teleported\", \"onClose\", \"onSwitch\"])) : createCommentVNode(\"v-if\", true)], 2112)) : createCommentVNode(\"v-if\", true)], 6);\n}\n\nvar Image$1 = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Image$1 as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AA4DA,IAAIA,eAAe,EAAnB;;AAEA,MAAKC,YAAaC,gBAAa;AAC7BC,QAAM,SADuB;AAE7BC,cAAY;AAAAC,iBACVA;AADU,GAFiB;AAK7BC,gBAAc,KALe;AAO7BC,SAAOC,UAPsB;AAQ7BC,SAAOC,UARsB;;AAU7BC,QAAMJ,KAAN,EAAa;AAAEK,QAAF;AAAQC,WAAOC;AAAf,GAAb,EAAwC;AACtCC,kBACE;AACEC,aAAO,UADT;AAEEC,YAAM,gBAFR;AAGEC,mBAAa,oBAHf;AAIEC,eAAS,OAJX;AAKEC,WAAK;AALP,KADF,EAQEC,SAAS,MAAMC,UAAUf,MAAMgB,YAAhB,CAAf,CARF;AAWA,UAAM;AAAEC;AAAF,QAAQC,WAAd;AACA,UAAMC,KAAKC,aAAa,OAAb,CAAX;AAEA,UAAMd,QAAQe,UAAd;AACA,UAAMC,eAAeT,IAAI,KAAJ,CAArB;AACA,UAAMU,UAAUV,IAAI,IAAJ,CAAhB;AACA,UAAMW,WAAWX,IAAI,CAAJ,CAAjB;AACA,UAAMY,YAAYZ,IAAI,CAAJ,CAAlB;AACA,UAAMa,aAAab,IAAI,KAAJ,CAAnB;AACA,UAAMc,YAAYd,KAAlB;;AAEA,UAAMe,mBAAmBf,KAAzB;;AACA,QAAIgB,kBAAJ;AACA,QAAIC,iBAAJ;AAEA,UAAMC,iBAAiBjB,SAAS,MAAMP,SAASyB,KAAxB,CAAvB;AAEA,UAAMC,aAAanB,SAAwB,MAAM;AAC/C,YAAM;AAAEoB;AAAF,UAAUlC,KAAhB;;AACA,UAAImC,YAAYD,GAAhB,EAAqB;AACnB,eAAO;AAAEE,qBAAWF;AAAb,SAAP;AAAoB;;AAEtB,aAAO,EAAP;AAAO,KALU,CAAnB;AAQA,UAAMG,UAAUvB,SAAS,MAAM;AAC7B,YAAM;AAAEwB;AAAF,UAAqBtC,KAA3B;AACA,aAAOuC,MAAMC,OAAN,CAAcF,cAAd,KAAiCA,eAAeG,MAAf,GAAwB,CAAhE;AAAgE,KAFlD,CAAhB;AAKA,UAAMC,aAAa5B,SAAS,MAAM;AAChC,aAAOd,MAAMgB,YAAN,IAAsBhB,MAAM2C,iBAAnC;AAAmC,KADlB,CAAnB;AAIA,UAAMC,aAAa9B,SAAS,MAAM;AAChC,YAAM;AAAEwB,sBAAF;AAAkBO;AAAlB,UAAmC7C,KAAzC;AACA,UAAI8C,eAAeD,YAAnB;;AACA,UAAIA,eAAeP,eAAeG,MAAf,GAAwB,CAA3C,EAA8C;AAC5CK,uBAAe,CAAf;AAAe;;AAEjB,aAAOA,YAAP;AAAO,KANU,CAAnB;;AASA,UAAMC,YAAY,MAAM;AACtB,UAAI,CAACZ,QAAL,EAAe;AAGfZ,cAAQyB,KAAR,GAAgB,IAAhB;AACA1B,mBAAa0B,KAAb,GAAqB,KAArB;AAEA,YAAMC,MAAM,IAAIC,KAAJ,EAAZ;AACA,YAAMC,kBAAkBnD,MAAMoD,GAA9B;AAGAH,UAAII,gBAAJ,CAAqB,MAArB,EAA8BC,CAAD,IAAO;AAClC,YAAIH,oBAAoBnD,MAAMoD,GAA9B,EAAmC;AACjC;AAAA;;AAEFG,mBAAWD,CAAX,EAAcL,GAAd;AAAc,OAJhB;AAMAA,UAAII,gBAAJ,CAAqB,OAArB,EAA+BC,CAAD,IAAO;AACnC,YAAIH,oBAAoBnD,MAAMoD,GAA9B,EAAmC;AACjC;AAAA;;AAEFI,oBAAYF,CAAZ;AAAY,OAJd;AASAG,aAAOC,OAAP,CAAepD,MAAM0C,KAArB,EAA4BW,OAA5B,CAAoC,CAAC,CAACC,GAAD,EAAMZ,KAAN,CAAD,KAAkB;AAEpD,YAAIY,IAAIC,WAAJ,OAAsB,QAA1B,EAAoC;AACpCZ,YAAIa,YAAJ,CAAiBF,GAAjB,EAAsBZ,KAAtB;AAAsB,OAHxB;AAKAC,UAAIG,GAAJ,GAAUD,eAAV;AAAU,KA/BZ;;AAkCA,wBAAoBG,CAApB,EAA8BL,GAA9B,EAAqD;AACnDzB,eAASwB,KAAT,GAAiBC,IAAIc,KAArB;AACAtC,gBAAUuB,KAAV,GAAkBC,IAAIe,MAAtB;AACAzC,cAAQyB,KAAR,GAAgB,KAAhB;AACA1B,mBAAa0B,KAAb,GAAqB,KAArB;AAAqB;;AAGvB,yBAAqBiB,KAArB,EAAmC;AACjC1C,cAAQyB,KAAR,GAAgB,KAAhB;AACA1B,mBAAa0B,KAAb,GAAqB,IAArB;AACA3C,WAAK,OAAL,EAAc4D,KAAd;AAAc;;AAGhB,8BAA0B;AACxB,UAAIC,cAAcvC,UAAUqB,KAAxB,EAA+BpB,iBAAiBoB,KAAhD,CAAJ,EAA4D;AAC1DD;AACAoB;AAAA;AAAA;;AAIJ,UAAMC,kBAAkBC,cAAcC,cAAd,EAA8B,GAA9B,CAAxB;;AAEA,yCAAqC;AACnC,UAAIC,EAAJ;;AAAe,qBAEf;AAEA,YAAMC,UAAN;AACA;AAAAC;AAAA;;AACE;AAAyB7C;AAEzB,OAFA,MAEA,YAAiB,iBAAjB,IACW6C,sBADX,EACW;AAA+C7C,kCAChC2C,4CADgC,KAChC,IADgC,GAChCA,EADgC,GAChC,MADgC;AAE1D,OAHA,MAGA;AAAsD3C;AAGxD;;AACE;AAKAC;AAAmC6C;AAAA;AAIvC;;AACE;AAA8D,oEAE9D;AACA7C;AAAyBD;AAG3B;;AACE,aAAO+C,YAAP,CAAOrB,CAAP,EAAO;AAAS,sBAEhB;;AACE,UAAEA,YAAF,EAAE;AACFA;AAAO;AAEP,OAHA,MAGA;AACAA;AAAO;AAAA;AAIX;;AAEE;AAAoB,0BAEpB;AAA4DxB;AACjD8C;AADiD;AAM5DnF;AACAoF,0BAAmBC,QAAnB,GAAmB,QAAnB;AAAmBpD;AAGrB;;AACE;AACAI;AACA+C,0BAAmBC,QAAnB,GAAmBrF,YAAnB;AACAiC;AAAKrB;AAGP;;AACE;AAAeA;AAGjB;;AAGI0E,UAAI,MAAM/E,MAAMoD,GAAhB,EAAgB;AAEd,gBAAQ4B,IAAR,EAAQ;AACRzD,wBAAa,IAAb;AACAD;AACA6C;AAAAc;AAEA,OALA,MAKA;AAAAlC;AAAA;AAKN,KAZI;AAaFmC;AACE;AAAAD;AAEA,OAFA,MAEA;AAAAlC;AAAA;AAIJ,KAPE;AAOK;AAELzC,WAFK;AAGLiB,aAHK;AAILD,kBAJK;AAKLI,gBALK;AAMLK,oBANK;AAOLE,gBAPK;AAQLI,aARK;AASLO,gBATK;AAULjB,eAVK;AAWLR,QAXK;AAaLuB,gBAbK;AAcLyC,kBAdK;AAeLC,iBAfK;AAgBLC,kBAhBK;AAgBLpE;AAhBK;AAgBL;;AArOyB,CAAb,CAAlB;;;;;;;;;;AA9BQ,SA/BGqE;AAAazE,oBAAbyE;AAA6CC,WAAKC,eAAE,gCAAFA,CAAlDF;AAAoDtD;AAApDsD,MAGAG;AAAA7B;AAAA,YADmC8B,0BAA3B;AAAIH;AAAJ,GAA2B,EAEzB,IAFyB,EAEzB,CAFyB,CACnC,KAELE,oBAA2DE;AAAA/B;AAAA,sCAA9C;AAAI2B;AAAJ,GAA8C,EAA3BK,yCAA2B,EAE7D,CAF6D,GAA3D,IAKCC;AAAAjC;AAAA;AACAR,iBADA;AAEApB,WAAKyD,eAFL;AAGAF,oDAAOpE,EAAP,CAAOmC,CAAP,CAAO,SAAP,IAAO,EAAP,CAHA;AAGOwC;AAHP,2BALD,GAyBSL;AAAA7B;AAAA,MADM6B;AAXZ7B,UAWY;AAVZ,0BAUY;AATZ,oCASY;AARZ,mCAQY;AAPZ,gDAOY;AANZlB,+BAMY;AALZqD,6BAKY;AALJC;AAKI;AADPC,sGADkBN,iCAClB;;GACO,8IACN,6CA9BJL,IA+BH","names":["prevOverflow","_sfc_main","defineComponent","name","components","ImageViewer","inheritAttrs","props","imageProps","emits","imageEmits","setup","emit","attrs","rawAttrs","useDeprecated","scope","from","replacement","version","ref","computed","isBoolean","appendToBody","t","useLocale","ns","useNamespace","useAttrs","hasLoadError","loading","imgWidth","imgHeight","showViewer","container","_scrollContainer","stopScrollListener","stopWheelListener","containerStyle","style","imageStyle","fit","isClient","objectFit","preview","previewSrcList","Array","isArray","length","teleported","previewTeleported","imageIndex","initialIndex","previewIndex","loadImage","value","img","Image","currentImageSrc","src","addEventListener","e","handleLoad","handleError","Object","entries","forEach","key","toLowerCase","setAttribute","width","height","event","isInContainer","removeLazyLoadListener","lazyLoadHandler","useThrottleFn","handleLazyLoad","_a","nextTick","scrollContainer","setTimeout","wheelHandler","passive","document","overflow","watch","lazy","addLazyLoadListener","onMounted","clickHandler","closeViewer","switchViewer","_openBlock","class","_normalizeClass","_ctx","createElementVNode","renderSlot","toDisplayString","openBlock","onClick","onClose","onSwitch","default"],"sources":["../../../../../../packages/components/image/src/image.vue"],"sourcesContent":["<template>\n  <div ref=\"container\" :class=\"[ns.b(), $attrs.class]\" :style=\"containerStyle\">\n    <slot v-if=\"loading\" name=\"placeholder\">\n      <div :class=\"ns.e('placeholder')\"></div>\n    </slot>\n    <slot v-else-if=\"hasLoadError\" name=\"error\">\n      <div :class=\"ns.e('error')\">{{ t('el.image.error') }}</div>\n    </slot>\n    <img\n      v-else\n      v-bind=\"attrs\"\n      :src=\"src\"\n      :style=\"imageStyle\"\n      :class=\"[ns.e('inner'), preview ? ns.e('preview') : '']\"\n      @click=\"clickHandler\"\n    />\n    <template v-if=\"preview\">\n      <image-viewer\n        v-if=\"showViewer\"\n        :z-index=\"zIndex\"\n        :initial-index=\"imageIndex\"\n        :url-list=\"previewSrcList\"\n        :hide-on-click-modal=\"hideOnClickModal\"\n        :teleported=\"teleported\"\n        @close=\"closeViewer\"\n        @switch=\"switchViewer\"\n      >\n        <div v-if=\"$slots.viewer\">\n          <slot name=\"viewer\" />\n        </div>\n      </image-viewer>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, ref, onMounted, watch, nextTick } from 'vue'\nimport { isString } from '@vue/shared'\nimport {\n  useEventListener,\n  useThrottleFn,\n  isClient,\n  isBoolean,\n} from '@vueuse/core'\nimport {\n  useAttrs,\n  useLocale,\n  useNamespace,\n  useDeprecated,\n} from '@element-plus/hooks'\nimport ImageViewer from '@element-plus/components/image-viewer'\nimport {\n  getScrollContainer,\n  isInContainer,\n  isElement,\n} from '@element-plus/utils'\nimport { imageEmits, imageProps } from './image'\n\nimport type { CSSProperties, StyleValue } from 'vue'\n\nlet prevOverflow = ''\n\nexport default defineComponent({\n  name: 'ElImage',\n  components: {\n    ImageViewer,\n  },\n  inheritAttrs: false,\n\n  props: imageProps,\n  emits: imageEmits,\n\n  setup(props, { emit, attrs: rawAttrs }) {\n    useDeprecated(\n      {\n        scope: 'el-image',\n        from: 'append-to-body',\n        replacement: 'preview-teleported',\n        version: '2.2.0',\n        ref: 'https://element-plus.org/en-US/component/image.html#image-attributess',\n      },\n      computed(() => isBoolean(props.appendToBody))\n    )\n\n    const { t } = useLocale()\n    const ns = useNamespace('image')\n\n    const attrs = useAttrs()\n    const hasLoadError = ref(false)\n    const loading = ref(true)\n    const imgWidth = ref(0)\n    const imgHeight = ref(0)\n    const showViewer = ref(false)\n    const container = ref<HTMLElement>()\n\n    const _scrollContainer = ref<HTMLElement | Window>()\n    let stopScrollListener: () => void\n    let stopWheelListener: () => void\n\n    const containerStyle = computed(() => rawAttrs.style as StyleValue)\n\n    const imageStyle = computed<CSSProperties>(() => {\n      const { fit } = props\n      if (isClient && fit) {\n        return { objectFit: fit }\n      }\n      return {}\n    })\n\n    const preview = computed(() => {\n      const { previewSrcList } = props\n      return Array.isArray(previewSrcList) && previewSrcList.length > 0\n    })\n\n    const teleported = computed(() => {\n      return props.appendToBody || props.previewTeleported\n    })\n\n    const imageIndex = computed(() => {\n      const { previewSrcList, initialIndex } = props\n      let previewIndex = initialIndex\n      if (initialIndex > previewSrcList.length - 1) {\n        previewIndex = 0\n      }\n      return previewIndex\n    })\n\n    const loadImage = () => {\n      if (!isClient) return\n\n      // reset status\n      loading.value = true\n      hasLoadError.value = false\n\n      const img = new Image()\n      const currentImageSrc = props.src\n\n      // load & error callbacks are only responsible for currentImageSrc\n      img.addEventListener('load', (e) => {\n        if (currentImageSrc !== props.src) {\n          return\n        }\n        handleLoad(e, img)\n      })\n      img.addEventListener('error', (e) => {\n        if (currentImageSrc !== props.src) {\n          return\n        }\n        handleError(e)\n      })\n\n      // bind html attrs\n      // so it can behave consistently\n      Object.entries(attrs.value).forEach(([key, value]) => {\n        // avoid onload to be overwritten\n        if (key.toLowerCase() === 'onload') return\n        img.setAttribute(key, value as string)\n      })\n      img.src = currentImageSrc\n    }\n\n    function handleLoad(e: Event, img: HTMLImageElement) {\n      imgWidth.value = img.width\n      imgHeight.value = img.height\n      loading.value = false\n      hasLoadError.value = false\n    }\n\n    function handleError(event: Event) {\n      loading.value = false\n      hasLoadError.value = true\n      emit('error', event)\n    }\n\n    function handleLazyLoad() {\n      if (isInContainer(container.value, _scrollContainer.value)) {\n        loadImage()\n        removeLazyLoadListener()\n      }\n    }\n\n    const lazyLoadHandler = useThrottleFn(handleLazyLoad, 200)\n\n    async function addLazyLoadListener() {\n      if (!isClient) return\n\n      await nextTick()\n\n      const { scrollContainer } = props\n      if (isElement(scrollContainer)) {\n        _scrollContainer.value = scrollContainer\n      } else if (isString(scrollContainer) && scrollContainer !== '') {\n        _scrollContainer.value =\n          document.querySelector<HTMLElement>(scrollContainer) ?? undefined\n      } else if (container.value) {\n        _scrollContainer.value = getScrollContainer(container.value)\n      }\n\n      if (_scrollContainer.value) {\n        stopScrollListener = useEventListener(\n          _scrollContainer,\n          'scroll',\n          lazyLoadHandler\n        )\n        setTimeout(() => handleLazyLoad(), 100)\n      }\n    }\n\n    function removeLazyLoadListener() {\n      if (!isClient || !_scrollContainer.value || !lazyLoadHandler) return\n\n      stopScrollListener()\n      _scrollContainer.value = undefined\n    }\n\n    function wheelHandler(e: WheelEvent) {\n      if (!e.ctrlKey) return\n\n      if (e.deltaY < 0) {\n        e.preventDefault()\n        return false\n      } else if (e.deltaY > 0) {\n        e.preventDefault()\n        return false\n      }\n    }\n\n    function clickHandler() {\n      // don't show viewer when preview is false\n      if (!preview.value) return\n\n      stopWheelListener = useEventListener('wheel', wheelHandler, {\n        passive: false,\n      })\n\n      // prevent body scroll\n      prevOverflow = document.body.style.overflow\n      document.body.style.overflow = 'hidden'\n      showViewer.value = true\n    }\n\n    function closeViewer() {\n      stopWheelListener?.()\n      document.body.style.overflow = prevOverflow\n      showViewer.value = false\n      emit('close')\n    }\n\n    function switchViewer(val: number) {\n      emit('switch', val)\n    }\n\n    watch(\n      () => props.src,\n      () => {\n        if (props.lazy) {\n          // reset status\n          loading.value = true\n          hasLoadError.value = false\n          removeLazyLoadListener()\n          addLazyLoadListener()\n        } else {\n          loadImage()\n        }\n      }\n    )\n\n    onMounted(() => {\n      if (props.lazy) {\n        addLazyLoadListener()\n      } else {\n        loadImage()\n      }\n    })\n\n    return {\n      attrs,\n      loading,\n      hasLoadError,\n      showViewer,\n      containerStyle,\n      imageStyle,\n      preview,\n      imageIndex,\n      container,\n      ns,\n      teleported,\n\n      clickHandler,\n      closeViewer,\n      switchViewer,\n      t,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}