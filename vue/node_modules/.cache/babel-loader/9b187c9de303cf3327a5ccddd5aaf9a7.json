{"ast":null,"code":"import { defineComponent, inject, ref, computed, h, withCtx, renderSlot, withKeys, withModifiers } from 'vue';\nimport { get } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport '../../../hooks/index.mjs';\nimport GroupItem from './group-item.mjs';\nimport OptionItem from './option-item.mjs';\nimport { selectV2InjectionKey } from './token.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { isObject } from '@vue/shared';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport DynamicSizeList from '../../virtual-list/src/components/dynamic-size-list.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElSelectDropdown\",\n  props: {\n    data: Array,\n    hoveringIndex: Number,\n    width: Number\n  },\n\n  setup(props) {\n    const select = inject(selectV2InjectionKey);\n    const ns = useNamespace(\"select\");\n    const cachedHeights = ref([]);\n    const listRef = ref(null);\n    const isSized = computed(() => isUndefined(select.props.estimatedOptionHeight));\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight\n        };\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: idx => cachedHeights.value[idx]\n      };\n    });\n\n    const contains = (arr = [], target) => {\n      const {\n        props: {\n          valueKey\n        }\n      } = select;\n\n      if (!isObject(target)) {\n        return arr.includes(target);\n      }\n\n      return arr && arr.some(item => {\n        return get(item, valueKey) === get(target, valueKey);\n      });\n    };\n\n    const isEqual = (selected, target) => {\n      if (!isObject(target)) {\n        return selected === target;\n      } else {\n        const {\n          valueKey\n        } = select.props;\n        return get(selected, valueKey) === get(target, valueKey);\n      }\n    };\n\n    const isItemSelected = (modelValue, target) => {\n      if (select.props.multiple) {\n        return contains(modelValue, target.value);\n      }\n\n      return isEqual(modelValue, target.value);\n    };\n\n    const isItemDisabled = (modelValue, selected) => {\n      const {\n        disabled,\n        multiple,\n        multipleLimit\n      } = select.props;\n      return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);\n    };\n\n    const isItemHovering = target => props.hoveringIndex === target;\n\n    const scrollToItem = index => {\n      const list = listRef.value;\n\n      if (list) {\n        list.scrollToItem(index);\n      }\n    };\n\n    const resetScrollTop = () => {\n      const list = listRef.value;\n\n      if (list) {\n        list.resetScrollTop();\n      }\n    };\n\n    return {\n      ns,\n      select,\n      listProps,\n      listRef,\n      isSized,\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n      scrollToItem,\n      resetScrollTop\n    };\n  },\n\n  render(_ctx, _cache) {\n    var _a;\n\n    const {\n      $slots,\n      data,\n      listProps,\n      select,\n      isSized,\n      width,\n      ns,\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected\n    } = _ctx;\n    const Comp = isSized ? FixedSizeList : DynamicSizeList;\n    const {\n      props: selectProps,\n      onSelect,\n      onHover,\n      onKeyboardNavigate,\n      onKeyboardSelect\n    } = select;\n    const {\n      height,\n      modelValue,\n      multiple\n    } = selectProps;\n\n    if (data.length === 0) {\n      return h(\"div\", {\n        class: ns.b(\"dropdown\"),\n        style: {\n          width: `${width}px`\n        }\n      }, (_a = $slots.empty) == null ? void 0 : _a.call($slots));\n    }\n\n    const ListItem = withCtx(scoped => {\n      const {\n        index,\n        data: data2\n      } = scoped;\n      const item = data2[index];\n\n      if (data2[index].type === \"Group\") {\n        return h(GroupItem, {\n          item,\n          style: scoped.style,\n          height: isSized ? listProps.itemSize : listProps.estimatedSize\n        });\n      }\n\n      const selected = isItemSelected(modelValue, item);\n      const itemDisabled = isItemDisabled(modelValue, selected);\n      return h(OptionItem, { ...scoped,\n        selected,\n        disabled: item.disabled || itemDisabled,\n        created: !!item.created,\n        hovering: isItemHovering(index),\n        item,\n        onSelect,\n        onHover\n      }, {\n        default: withCtx(props => {\n          return renderSlot($slots, \"default\", props, () => [h(\"span\", item.label)]);\n        })\n      });\n    });\n    const List = h(Comp, {\n      ref: \"listRef\",\n      className: ns.be(\"dropdown\", \"list\"),\n      data,\n      height,\n      width,\n      total: data.length,\n      scrollbarAlwaysOn: selectProps.scrollbarAlwaysOn,\n      onKeydown: [_cache[1] || (_cache[1] = withKeys(withModifiers(() => onKeyboardNavigate(\"forward\"), [\"stop\", \"prevent\"]), [\"down\"])), _cache[2] || (_cache[2] = withKeys(withModifiers(() => onKeyboardNavigate(\"backward\"), [\"stop\", \"prevent\"]), [\"up\"])), _cache[3] || (_cache[3] = withKeys(withModifiers(onKeyboardSelect, [\"stop\", \"prevent\"]), [\"enter\"])), _cache[4] || (_cache[4] = withKeys(withModifiers(() => select.expanded = false, [\"stop\", \"prevent\"]), [\"esc\"])), _cache[5] || (_cache[5] = withKeys(() => select.expanded = false, [\"tab\"]))],\n      ...listProps\n    }, {\n      default: ListItem\n    });\n    return h(\"div\", {\n      class: [ns.b(\"dropdown\"), ns.is(\"multiple\", multiple)]\n    }, [List]);\n  }\n\n});\n\nexport { _sfc_main as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","data","Array","hoveringIndex","Number","width","setup","select","inject","selectV2InjectionKey","ns","useNamespace","cachedHeights","ref","listRef","isSized","computed","isUndefined","estimatedOptionHeight","listProps","value","itemSize","itemHeight","estimatedSize","idx","contains","arr","target","valueKey","isObject","includes","some","item","get","isEqual","selected","isItemSelected","modelValue","multiple","isItemDisabled","disabled","multipleLimit","length","isItemHovering","scrollToItem","index","list","resetScrollTop","render","_ctx","_cache","$slots","Comp","onSelect","onHover","onKeyboardNavigate","onKeyboardSelect","height","class","style","withCtx","scoped","type","created","hovering","default","className","total","scrollbarAlwaysOn","onKeydown","withKeys","withModifiers"],"sources":["../../../../../../packages/components/select-v2/src/select-dropdown.vue"],"sourcesContent":["<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  inject,\n  ref,\n  renderSlot,\n  h,\n  withCtx,\n  withKeys,\n  withModifiers,\n} from 'vue'\nimport { get } from 'lodash-unified'\nimport { isUndefined, isObject } from '@element-plus/utils'\nimport {\n  FixedSizeList,\n  DynamicSizeList,\n} from '@element-plus/components/virtual-list'\nimport { useNamespace } from '@element-plus/hooks'\nimport GroupItem from './group-item.vue'\nimport OptionItem from './option-item.vue'\n\nimport { selectV2InjectionKey } from './token'\n\nimport type { ItemProps } from '@element-plus/components/virtual-list'\nimport type { OptionItemProps, Option } from './select.types'\n\nexport default defineComponent({\n  name: 'ElSelectDropdown',\n\n  props: {\n    data: Array,\n    hoveringIndex: Number,\n    width: Number,\n  },\n  setup(props) {\n    const select = inject(selectV2InjectionKey) as any\n    const ns = useNamespace('select')\n    const cachedHeights = ref<Array<number>>([])\n\n    const listRef = ref(null)\n\n    const isSized = computed(() =>\n      isUndefined(select.props.estimatedOptionHeight)\n    )\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight,\n        }\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: (idx: number) => cachedHeights.value[idx],\n      }\n    })\n\n    const contains = (arr: Array<any> = [], target: any) => {\n      const {\n        props: { valueKey },\n      } = select\n\n      if (!isObject(target)) {\n        return arr.includes(target)\n      }\n\n      return (\n        arr &&\n        arr.some((item) => {\n          return get(item, valueKey) === get(target, valueKey)\n        })\n      )\n    }\n    const isEqual = (selected: unknown, target: unknown) => {\n      if (!isObject(target)) {\n        return selected === target\n      } else {\n        const { valueKey } = select.props\n        return get(selected, valueKey) === get(target, valueKey)\n      }\n    }\n\n    const isItemSelected = (modelValue: any[] | any, target: Option) => {\n      if (select.props.multiple) {\n        return contains(modelValue, target.value)\n      }\n      return isEqual(modelValue, target.value)\n    }\n\n    const isItemDisabled = (modelValue: any[] | any, selected: boolean) => {\n      const { disabled, multiple, multipleLimit } = select.props\n      return (\n        disabled ||\n        (!selected &&\n          (multiple\n            ? multipleLimit > 0 && modelValue.length >= multipleLimit\n            : false))\n      )\n    }\n\n    const isItemHovering = (target: number) => props.hoveringIndex === target\n\n    const scrollToItem = (index: number) => {\n      const list = listRef.value as any\n      if (list) {\n        list.scrollToItem(index)\n      }\n    }\n\n    const resetScrollTop = () => {\n      const list = listRef.value as any\n      if (list) {\n        list.resetScrollTop()\n      }\n    }\n\n    // computed\n    return {\n      ns,\n      select,\n      listProps,\n      listRef,\n      isSized,\n\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n\n      scrollToItem,\n      resetScrollTop,\n    }\n  },\n\n  render(_ctx, _cache) {\n    const {\n      $slots,\n\n      data,\n      listProps,\n      select,\n      isSized,\n      width,\n      ns,\n      // methods\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n    } = _ctx\n\n    const Comp = isSized ? FixedSizeList : DynamicSizeList\n\n    const {\n      props: selectProps,\n      onSelect,\n      onHover,\n      onKeyboardNavigate,\n      onKeyboardSelect,\n    } = select\n    const { height, modelValue, multiple } = selectProps\n\n    if (data.length === 0) {\n      return h(\n        'div',\n        {\n          class: ns.b('dropdown'),\n          style: {\n            width: `${width}px`,\n          },\n        },\n        $slots.empty?.()\n      )\n    }\n\n    const ListItem = withCtx((scoped: ItemProps<any>) => {\n      const { index, data } = scoped\n      const item = data[index]\n      // render group item which is not selectable.\n      if (data[index].type === 'Group') {\n        return h(GroupItem, {\n          item,\n          style: scoped.style,\n          height: isSized ? listProps.itemSize : listProps.estimatedSize,\n        })\n      }\n\n      const selected = isItemSelected(modelValue, item)\n      const itemDisabled = isItemDisabled(modelValue, selected)\n      // render option item which is selectable\n      return h(\n        OptionItem,\n        {\n          ...scoped,\n          selected,\n          disabled: item.disabled || itemDisabled,\n          created: !!item.created,\n          hovering: isItemHovering(index),\n          item,\n          onSelect,\n          onHover,\n        },\n        {\n          default: withCtx((props: OptionItemProps) => {\n            return renderSlot($slots, 'default', props, () => [\n              h('span', item.label),\n            ])\n          }),\n        }\n      )\n    })\n\n    const List = h(\n      Comp,\n      {\n        ref: 'listRef', // forwarded ref so that select can access the list directly\n        className: ns.be('dropdown', 'list'),\n        data,\n        height,\n        width,\n        total: data.length,\n        scrollbarAlwaysOn: selectProps.scrollbarAlwaysOn,\n        onKeydown: [\n          _cache[1] ||\n            (_cache[1] = withKeys(\n              withModifiers(\n                () => onKeyboardNavigate('forward'),\n                ['stop', 'prevent']\n              ),\n              ['down']\n            )),\n          _cache[2] ||\n            (_cache[2] = withKeys(\n              withModifiers(\n                () => onKeyboardNavigate('backward'),\n                ['stop', 'prevent']\n              ),\n              ['up']\n            )),\n          _cache[3] ||\n            (_cache[3] = withKeys(\n              withModifiers(onKeyboardSelect, ['stop', 'prevent']),\n              ['enter']\n            )),\n\n          _cache[4] ||\n            (_cache[4] = withKeys(\n              withModifiers(\n                () => (select.expanded = false),\n                ['stop', 'prevent']\n              ),\n              ['esc']\n            )),\n          _cache[5] ||\n            (_cache[5] = withKeys(() => (select.expanded = false), ['tab'])),\n          // _cache[6] || (_cache[6] = () => {\n          //   console.log(11)\n          // }),\n        ],\n        ...listProps,\n      },\n      {\n        default: ListItem,\n      }\n    )\n    return h(\n      'div',\n      {\n        class: [ns.b('dropdown'), ns.is('multiple', multiple)],\n      },\n      [List]\n    )\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}