{"ast":null,"code":"import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, Fragment, renderList, toDisplayString, createCommentVNode, createElementVNode, renderSlot } from 'vue';\nimport dayjs from 'dayjs';\nimport localeData from 'dayjs/plugin/localeData';\nimport '../../../hooks/index.mjs';\nimport '../../time-picker/index.mjs';\nimport { dateTableProps, dateTableEmits } from './date-table.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { rangeArr } from '../../time-picker/src/common/date-utils.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\ndayjs.extend(localeData);\nconst WEEK_DAYS = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"];\n\nconst getPrevMonthLastDays = (date, count) => {\n  const lastDay = date.subtract(1, \"month\").endOf(\"month\").date();\n  return rangeArr(count).map((_, index) => lastDay - (count - index - 1));\n};\n\nconst getMonthDays = date => {\n  const days = date.daysInMonth();\n  return rangeArr(days).map((_, index) => index + 1);\n};\n\nconst toNestedArr = days => rangeArr(days.length / 7).map(index => {\n  const start = index * 7;\n  return days.slice(start, start + 7);\n});\n\nconst _sfc_main = defineComponent({\n  props: dateTableProps,\n  emits: dateTableEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const nsTable = useNamespace(\"calendar-table\");\n    const nsDay = useNamespace(\"calendar-day\");\n    const now = dayjs().locale(lang.value);\n    const firstDayOfWeek = now.$locale().weekStart || 0;\n    const isInRange = computed(() => !!props.range && !!props.range.length);\n    const rows = computed(() => {\n      let days = [];\n\n      if (isInRange.value) {\n        const [start, end] = props.range;\n        const currentMonthRange = rangeArr(end.date() - start.date() + 1).map(index => ({\n          text: start.date() + index,\n          type: \"current\"\n        }));\n        let remaining = currentMonthRange.length % 7;\n        remaining = remaining === 0 ? 0 : 7 - remaining;\n        const nextMonthRange = rangeArr(remaining).map((_, index) => ({\n          text: index + 1,\n          type: \"next\"\n        }));\n        days = currentMonthRange.concat(nextMonthRange);\n      } else {\n        const firstDay = props.date.startOf(\"month\").day() || 7;\n        const prevMonthDays = getPrevMonthLastDays(props.date, firstDay - firstDayOfWeek).map(day => ({\n          text: day,\n          type: \"prev\"\n        }));\n        const currentMonthDays = getMonthDays(props.date).map(day => ({\n          text: day,\n          type: \"current\"\n        }));\n        days = [...prevMonthDays, ...currentMonthDays];\n        const nextMonthDays = rangeArr(42 - days.length).map((_, index) => ({\n          text: index + 1,\n          type: \"next\"\n        }));\n        days = days.concat(nextMonthDays);\n      }\n\n      return toNestedArr(days);\n    });\n    const weekDays = computed(() => {\n      const start = firstDayOfWeek;\n\n      if (start === 0) {\n        return WEEK_DAYS.map(_ => t(`el.datepicker.weeks.${_}`));\n      } else {\n        return WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start)).map(_ => t(`el.datepicker.weeks.${_}`));\n      }\n    });\n\n    const getFormattedDate = (day, type) => {\n      switch (type) {\n        case \"prev\":\n          return props.date.startOf(\"month\").subtract(1, \"month\").date(day);\n\n        case \"next\":\n          return props.date.startOf(\"month\").add(1, \"month\").date(day);\n\n        case \"current\":\n          return props.date.date(day);\n      }\n    };\n\n    const getCellClass = ({\n      text,\n      type\n    }) => {\n      const classes = [type];\n\n      if (type === \"current\") {\n        const date = getFormattedDate(text, type);\n\n        if (date.isSame(props.selectedDay, \"day\")) {\n          classes.push(\"is-selected\");\n        }\n\n        if (date.isSame(now, \"day\")) {\n          classes.push(\"is-today\");\n        }\n      }\n\n      return classes;\n    };\n\n    const handlePickDay = ({\n      text,\n      type\n    }) => {\n      const date = getFormattedDate(text, type);\n      emit(\"pick\", date);\n    };\n\n    const getSlotData = ({\n      text,\n      type\n    }) => {\n      const day = getFormattedDate(text, type);\n      return {\n        isSelected: day.isSame(props.selectedDay),\n        type: `${type}-month`,\n        day: day.format(\"YYYY-MM-DD\"),\n        date: day.toDate()\n      };\n    };\n\n    return {\n      isInRange,\n      weekDays,\n      rows,\n      getCellClass,\n      handlePickDay,\n      getSlotData,\n      nsTable,\n      nsDay\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"table\", {\n    class: normalizeClass([_ctx.nsTable.b(), _ctx.nsTable.is(\"range\", _ctx.isInRange)]),\n    cellspacing: \"0\",\n    cellpadding: \"0\"\n  }, [!_ctx.hideHeader ? (openBlock(), createElementBlock(\"thead\", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.weekDays, day => {\n    return openBlock(), createElementBlock(\"th\", {\n      key: day\n    }, toDisplayString(day), 1);\n  }), 128))])) : createCommentVNode(\"v-if\", true), createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (row, index) => {\n    return openBlock(), createElementBlock(\"tr\", {\n      key: index,\n      class: normalizeClass({\n        [_ctx.nsTable.e(\"row\")]: true,\n        [_ctx.nsTable.em(\"row\", \"hide-border\")]: index === 0 && _ctx.hideHeader\n      })\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key) => {\n      return openBlock(), createElementBlock(\"td\", {\n        key,\n        class: normalizeClass(_ctx.getCellClass(cell)),\n        onClick: $event => _ctx.handlePickDay(cell)\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.nsDay.b())\n      }, [renderSlot(_ctx.$slots, \"dateCell\", {\n        data: _ctx.getSlotData(cell)\n      }, () => [createElementVNode(\"span\", null, toDisplayString(cell.text), 1)])], 2)], 10, _hoisted_2);\n    }), 128))], 2);\n  }), 128))])], 2);\n}\n\nvar DateTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { DateTable as default, getMonthDays, getPrevMonthLastDays };","map":{"version":3,"mappings":"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","names":["dayjs","extend","localeData","WEEK_DAYS","getPrevMonthLastDays","date","count","lastDay","subtract","endOf","rangeArr","map","_","index","getMonthDays","days","daysInMonth","toNestedArr","length","start","slice","_sfc_main","defineComponent","props","dateTableProps","emits","dateTableEmits","setup","emit","t","lang","useLocale","nsTable","useNamespace","nsDay","now","locale","value","firstDayOfWeek","$locale","weekStart","isInRange","computed","range","rows","end","currentMonthRange","text","type","remaining","nextMonthRange","concat","firstDay","startOf","day","prevMonthDays","currentMonthDays","nextMonthDays","weekDays","getFormattedDate","add","getCellClass","classes","isSame","selectedDay","push","handlePickDay","getSlotData","isSelected","format","toDate","_createElementBlock","class","_normalizeClass","_ctx","b","is","cellspacing","cellpadding","_hoisted_1","_Fragment","key","_toDisplayString","_createElementVNode","row","e","em","cell","onClick","$event","_renderSlot","data","toDisplayString"],"sources":["../../../../../../packages/components/calendar/src/date-table.vue"],"sourcesContent":["<template>\n  <table\n    :class=\"[nsTable.b(), nsTable.is('range', isInRange)]\"\n    cellspacing=\"0\"\n    cellpadding=\"0\"\n  >\n    <thead v-if=\"!hideHeader\">\n      <th v-for=\"day in weekDays\" :key=\"day\">{{ day }}</th>\n    </thead>\n\n    <tbody>\n      <tr\n        v-for=\"(row, index) in rows\"\n        :key=\"index\"\n        :class=\"{\n          [nsTable.e('row')]: true,\n          [nsTable.em('row', 'hide-border')]: index === 0 && hideHeader,\n        }\"\n      >\n        <td\n          v-for=\"(cell, key) in row\"\n          :key=\"key\"\n          :class=\"getCellClass(cell)\"\n          @click=\"handlePickDay(cell)\"\n        >\n          <div :class=\"nsDay.b()\">\n            <slot name=\"dateCell\" :data=\"getSlotData(cell)\">\n              <span>{{ cell.text }}</span>\n            </slot>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport dayjs from 'dayjs'\nimport localeData from 'dayjs/plugin/localeData'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { dateTableProps, dateTableEmits } from './date-table'\nimport type { Dayjs } from 'dayjs'\ndayjs.extend(localeData)\n\ntype CellType = 'next' | 'prev' | 'current'\ninterface Cell {\n  text: number\n  type: CellType\n}\n\nconst WEEK_DAYS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'] as const\n\nexport const getPrevMonthLastDays = (date: Dayjs, count: number) => {\n  const lastDay = date.subtract(1, 'month').endOf('month').date()\n  return rangeArr(count).map((_, index) => lastDay - (count - index - 1))\n}\n\nexport const getMonthDays = (date: Dayjs) => {\n  const days = date.daysInMonth()\n  return rangeArr(days).map((_, index) => index + 1)\n}\n\nconst toNestedArr = (days: Cell[]) =>\n  rangeArr(days.length / 7).map((index) => {\n    const start = index * 7\n    return days.slice(start, start + 7)\n  })\n\nexport default defineComponent({\n  props: dateTableProps,\n  emits: dateTableEmits,\n\n  setup(props, { emit }) {\n    const { t, lang } = useLocale()\n    const nsTable = useNamespace('calendar-table')\n    const nsDay = useNamespace('calendar-day')\n\n    const now = dayjs().locale(lang.value)\n    // todo better way to get Day.js locale object\n    const firstDayOfWeek: number = (now as any).$locale().weekStart || 0\n\n    const isInRange = computed(() => !!props.range && !!props.range.length)\n\n    const rows = computed(() => {\n      let days: Cell[] = []\n      if (isInRange.value) {\n        const [start, end] = props.range!\n        const currentMonthRange: Cell[] = rangeArr(\n          end.date() - start.date() + 1\n        ).map((index) => ({\n          text: start.date() + index,\n          type: 'current',\n        }))\n\n        let remaining = currentMonthRange.length % 7\n        remaining = remaining === 0 ? 0 : 7 - remaining\n        const nextMonthRange: Cell[] = rangeArr(remaining).map((_, index) => ({\n          text: index + 1,\n          type: 'next',\n        }))\n        days = currentMonthRange.concat(nextMonthRange)\n      } else {\n        const firstDay = props.date.startOf('month').day() || 7\n        const prevMonthDays: Cell[] = getPrevMonthLastDays(\n          props.date,\n          firstDay - firstDayOfWeek\n        ).map((day) => ({\n          text: day,\n          type: 'prev',\n        }))\n        const currentMonthDays: Cell[] = getMonthDays(props.date).map(\n          (day) => ({\n            text: day,\n            type: 'current',\n          })\n        )\n        days = [...prevMonthDays, ...currentMonthDays]\n        const nextMonthDays: Cell[] = rangeArr(42 - days.length).map(\n          (_, index) => ({\n            text: index + 1,\n            type: 'next',\n          })\n        )\n        days = days.concat(nextMonthDays)\n      }\n      return toNestedArr(days)\n    })\n\n    const weekDays = computed(() => {\n      const start = firstDayOfWeek\n      if (start === 0) {\n        return WEEK_DAYS.map((_) => t(`el.datepicker.weeks.${_}`))\n      } else {\n        return WEEK_DAYS.slice(start)\n          .concat(WEEK_DAYS.slice(0, start))\n          .map((_) => t(`el.datepicker.weeks.${_}`))\n      }\n    })\n\n    const getFormattedDate = (day: number, type: CellType): Dayjs => {\n      switch (type) {\n        case 'prev':\n          return props.date.startOf('month').subtract(1, 'month').date(day)\n        case 'next':\n          return props.date.startOf('month').add(1, 'month').date(day)\n        case 'current':\n          return props.date.date(day)\n      }\n    }\n\n    const getCellClass = ({ text, type }: Cell) => {\n      const classes: string[] = [type]\n      if (type === 'current') {\n        const date = getFormattedDate(text, type)\n        if (date.isSame(props.selectedDay, 'day')) {\n          classes.push('is-selected')\n        }\n        if (date.isSame(now, 'day')) {\n          classes.push('is-today')\n        }\n      }\n      return classes\n    }\n\n    const handlePickDay = ({ text, type }: Cell) => {\n      const date = getFormattedDate(text, type)\n      emit('pick', date)\n    }\n\n    const getSlotData = ({ text, type }: Cell) => {\n      const day = getFormattedDate(text, type)\n      return {\n        isSelected: day.isSame(props.selectedDay),\n        type: `${type}-month`,\n        day: day.format('YYYY-MM-DD'),\n        date: day.toDate(),\n      }\n    }\n\n    return {\n      isInRange,\n      weekDays,\n      rows,\n      getCellClass,\n      handlePickDay,\n      getSlotData,\n\n      nsTable,\n      nsDay,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}