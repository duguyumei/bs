{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { isNil } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nconst SCOPE = \"ElUpload\";\n\nclass UploadAjaxError extends Error {\n  constructor(message, status, method, url) {\n    super(message);\n    this.status = status;\n    this.method = method;\n    this.url = url;\n  }\n\n}\n\nfunction getError(action, option, xhr) {\n  let msg;\n\n  if (xhr.response) {\n    msg = `${xhr.response.error || xhr.response}`;\n  } else if (xhr.responseText) {\n    msg = `${xhr.responseText}`;\n  } else {\n    msg = `fail to ${option.method} ${action} ${xhr.status}`;\n  }\n\n  return new UploadAjaxError(msg, xhr.status, option.method, action);\n}\n\nfunction getBody(xhr) {\n  const text = xhr.responseText || xhr.response;\n\n  if (!text) {\n    return text;\n  }\n\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return text;\n  }\n}\n\nconst ajaxUpload = option => {\n  if (typeof XMLHttpRequest === \"undefined\") throwError(SCOPE, \"XMLHttpRequest is undefined\");\n  const xhr = new XMLHttpRequest();\n  const action = option.action;\n\n  if (xhr.upload) {\n    xhr.upload.addEventListener(\"progress\", evt => {\n      const progressEvt = evt;\n      progressEvt.percent = evt.total > 0 ? evt.loaded / evt.total * 100 : 0;\n      option.onProgress(progressEvt);\n    });\n  }\n\n  const formData = new FormData();\n\n  if (option.data) {\n    for (const [key, value] of Object.entries(option.data)) {\n      if (Array.isArray(value)) formData.append(key, ...value);else formData.append(key, value);\n    }\n  }\n\n  formData.append(option.filename, option.file, option.file.name);\n  xhr.addEventListener(\"error\", () => {\n    option.onError(getError(action, option, xhr));\n  });\n  xhr.addEventListener(\"load\", () => {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(action, option, xhr));\n    }\n\n    option.onSuccess(getBody(xhr));\n  });\n  xhr.open(option.method, action, true);\n\n  if (option.withCredentials && \"withCredentials\" in xhr) {\n    xhr.withCredentials = true;\n  }\n\n  const headers = option.headers || {};\n\n  if (headers instanceof Headers) {\n    headers.forEach((value, key) => xhr.setRequestHeader(key, value));\n  } else {\n    for (const [key, value] of Object.entries(headers)) {\n      if (isNil(value)) continue;\n      xhr.setRequestHeader(key, String(value));\n    }\n  }\n\n  xhr.send(formData);\n  return xhr;\n};\n\nexport { UploadAjaxError, ajaxUpload };","map":{"version":3,"mappings":"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","names":["SCOPE","UploadAjaxError","Error","constructor","message","status","method","url","getError","action","option","xhr","msg","response","error","responseText","getBody","text","JSON","parse","e","ajaxUpload","XMLHttpRequest","throwError","upload","addEventListener","evt","progressEvt","percent","total","loaded","onProgress","formData","FormData","data","key","value","Object","entries","Array","isArray","append","filename","file","name","onError","onSuccess","open","withCredentials","headers","Headers","forEach","setRequestHeader","isNil","String","send"],"sources":["../../../../../../packages/components/upload/src/ajax.ts"],"sourcesContent":["import { isNil } from 'lodash-unified'\nimport { throwError } from '@element-plus/utils'\nimport type {\n  UploadRequestHandler,\n  UploadProgressEvent,\n  UploadRequestOptions,\n} from './upload'\n\nconst SCOPE = 'ElUpload'\n\nexport class UploadAjaxError extends Error {\n  status: number\n  method: string\n  url: string\n\n  constructor(message: string, status: number, method: string, url: string) {\n    super(message)\n    this.status = status\n    this.method = method\n    this.url = url\n  }\n}\n\nfunction getError(\n  action: string,\n  option: UploadRequestOptions,\n  xhr: XMLHttpRequest\n) {\n  let msg: string\n  if (xhr.response) {\n    msg = `${xhr.response.error || xhr.response}`\n  } else if (xhr.responseText) {\n    msg = `${xhr.responseText}`\n  } else {\n    msg = `fail to ${option.method} ${action} ${xhr.status}`\n  }\n\n  return new UploadAjaxError(msg, xhr.status, option.method, action)\n}\n\nfunction getBody(xhr: XMLHttpRequest): XMLHttpRequestResponseType {\n  const text = xhr.responseText || xhr.response\n  if (!text) {\n    return text\n  }\n\n  try {\n    return JSON.parse(text)\n  } catch (e) {\n    return text\n  }\n}\n\nexport const ajaxUpload: UploadRequestHandler = (option) => {\n  if (typeof XMLHttpRequest === 'undefined')\n    throwError(SCOPE, 'XMLHttpRequest is undefined')\n\n  const xhr = new XMLHttpRequest()\n  const action = option.action\n\n  if (xhr.upload) {\n    xhr.upload.addEventListener('progress', (evt) => {\n      const progressEvt = evt as UploadProgressEvent\n      progressEvt.percent = evt.total > 0 ? (evt.loaded / evt.total) * 100 : 0\n      option.onProgress(progressEvt)\n    })\n  }\n\n  const formData = new FormData()\n  if (option.data) {\n    for (const [key, value] of Object.entries(option.data)) {\n      if (Array.isArray(value)) formData.append(key, ...value)\n      else formData.append(key, value)\n    }\n  }\n  formData.append(option.filename, option.file, option.file.name)\n\n  xhr.addEventListener('error', () => {\n    option.onError(getError(action, option, xhr))\n  })\n\n  xhr.addEventListener('load', () => {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(action, option, xhr))\n    }\n    option.onSuccess(getBody(xhr))\n  })\n\n  xhr.open(option.method, action, true)\n\n  if (option.withCredentials && 'withCredentials' in xhr) {\n    xhr.withCredentials = true\n  }\n\n  const headers = option.headers || {}\n  if (headers instanceof Headers) {\n    headers.forEach((value, key) => xhr.setRequestHeader(key, value))\n  } else {\n    for (const [key, value] of Object.entries(headers)) {\n      if (isNil(value)) continue\n      xhr.setRequestHeader(key, String(value))\n    }\n  }\n\n  xhr.send(formData)\n  return xhr\n}\n"]},"metadata":{},"sourceType":"module"}