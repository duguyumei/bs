{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { inject, computed, h } from 'vue';\nimport { getRowIdentity } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport useEvents from './events-helper.mjs';\nimport useStyles from './styles-helper.mjs';\n\nfunction useRender(props) {\n  const parent = inject(TABLE_INJECTION_KEY);\n  const {\n    handleDoubleClick,\n    handleClick,\n    handleContextMenu,\n    handleMouseEnter,\n    handleMouseLeave,\n    handleCellMouseEnter,\n    handleCellMouseLeave,\n    tooltipContent,\n    tooltipTrigger\n  } = useEvents(props);\n  const {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth\n  } = useStyles(props);\n  const firstDefaultColumnIndex = computed(() => {\n    return props.store.states.columns.value.findIndex(({\n      type\n    }) => type === \"default\");\n  });\n\n  const getKeyOfRow = (row, index) => {\n    const rowKey = parent.props.rowKey;\n\n    if (rowKey) {\n      return getRowIdentity(row, rowKey);\n    }\n\n    return index;\n  };\n\n  const rowRender = (row, $index, treeRowData) => {\n    const {\n      tooltipEffect,\n      store\n    } = props;\n    const {\n      indent,\n      columns\n    } = store.states;\n    const rowClasses = getRowClass(row, $index);\n    let display = true;\n\n    if (treeRowData) {\n      rowClasses.push(`el-table__row--level-${treeRowData.level}`);\n      display = treeRowData.display;\n    }\n\n    const displayStyle = display ? null : {\n      display: \"none\"\n    };\n    return h(\"tr\", {\n      style: [displayStyle, getRowStyle(row, $index)],\n      class: rowClasses,\n      key: getKeyOfRow(row, $index),\n      onDblclick: $event => handleDoubleClick($event, row),\n      onClick: $event => handleClick($event, row),\n      onContextmenu: $event => handleContextMenu($event, row),\n      onMouseenter: () => handleMouseEnter($index),\n      onMouseleave: handleMouseLeave\n    }, columns.value.map((column, cellIndex) => {\n      const {\n        rowspan,\n        colspan\n      } = getSpan(row, column, $index, cellIndex);\n\n      if (!rowspan || !colspan) {\n        return null;\n      }\n\n      const columnData = { ...column\n      };\n      columnData.realWidth = getColspanRealWidth(columns.value, colspan, cellIndex);\n      const data = {\n        store: props.store,\n        _self: props.context || parent,\n        column: columnData,\n        row,\n        $index\n      };\n\n      if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n        data.treeNode = {\n          indent: treeRowData.level * indent.value,\n          level: treeRowData.level\n        };\n\n        if (typeof treeRowData.expanded === \"boolean\") {\n          data.treeNode.expanded = treeRowData.expanded;\n\n          if (\"loading\" in treeRowData) {\n            data.treeNode.loading = treeRowData.loading;\n          }\n\n          if (\"noLazyChildren\" in treeRowData) {\n            data.treeNode.noLazyChildren = treeRowData.noLazyChildren;\n          }\n        }\n      }\n\n      const baseKey = `${$index},${cellIndex}`;\n      const patchKey = columnData.columnKey || columnData.rawColumnKey || \"\";\n      const tdChildren = cellChildren(cellIndex, column, data);\n      return h(\"td\", {\n        style: getCellStyle($index, cellIndex, row, column),\n        class: getCellClass($index, cellIndex, row, column),\n        key: `${patchKey}${baseKey}`,\n        rowspan,\n        colspan,\n        onMouseenter: $event => handleCellMouseEnter($event, { ...row,\n          tooltipEffect\n        }),\n        onMouseleave: handleCellMouseLeave\n      }, [tdChildren]);\n    }));\n  };\n\n  const cellChildren = (cellIndex, column, data) => {\n    return column.renderCell(data);\n  };\n\n  const wrappedRowRender = (row, $index) => {\n    const store = props.store;\n    const {\n      isRowExpanded,\n      assertRowKey\n    } = store;\n    const {\n      treeData,\n      lazyTreeNodeMap,\n      childrenColumnName,\n      rowKey\n    } = store.states;\n    const hasExpandColumn = store.states.columns.value.some(({\n      type\n    }) => type === \"expand\");\n\n    if (hasExpandColumn && isRowExpanded(row)) {\n      const renderExpanded = parent.renderExpanded;\n      const tr = rowRender(row, $index, void 0);\n\n      if (!renderExpanded) {\n        console.error(\"[Element Error]renderExpanded is required.\");\n        return tr;\n      }\n\n      return [[tr, h(\"tr\", {\n        key: `expanded-row__${tr.key}`\n      }, [h(\"td\", {\n        colspan: store.states.columns.value.length,\n        class: \"el-table__cell el-table__expanded-cell\"\n      }, [renderExpanded({\n        row,\n        $index,\n        store\n      })])])]];\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey();\n      const key = getRowIdentity(row, rowKey.value);\n      let cur = treeData.value[key];\n      let treeRowData = null;\n\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true\n        };\n\n        if (typeof cur.lazy === \"boolean\") {\n          if (typeof cur.loaded === \"boolean\" && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length);\n          }\n\n          treeRowData.loading = cur.loading;\n        }\n      }\n\n      const tmp = [rowRender(row, $index, treeRowData)];\n\n      if (cur) {\n        let i = 0;\n\n        const traverse = (children, parent2) => {\n          if (!(children && children.length && parent2)) return;\n          children.forEach(node => {\n            const innerTreeRowData = {\n              display: parent2.display && parent2.expanded,\n              level: parent2.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false\n            };\n            const childKey = getRowIdentity(node, rowKey.value);\n\n            if (childKey === void 0 || childKey === null) {\n              throw new Error(\"For nested data item, row-key is required.\");\n            }\n\n            cur = { ...treeData.value[childKey]\n            };\n\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded;\n              cur.level = cur.level || innerTreeRowData.level;\n              cur.display = !!(cur.expanded && innerTreeRowData.display);\n\n              if (typeof cur.lazy === \"boolean\") {\n                if (typeof cur.loaded === \"boolean\" && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);\n                }\n\n                innerTreeRowData.loading = cur.loading;\n              }\n            }\n\n            i++;\n            tmp.push(rowRender(node, $index + i, innerTreeRowData));\n\n            if (cur) {\n              const nodes2 = lazyTreeNodeMap.value[childKey] || node[childrenColumnName.value];\n              traverse(nodes2, cur);\n            }\n          });\n        };\n\n        cur.display = true;\n        const nodes = lazyTreeNodeMap.value[key] || row[childrenColumnName.value];\n        traverse(nodes, cur);\n      }\n\n      return tmp;\n    } else {\n      return rowRender(row, $index, void 0);\n    }\n  };\n\n  return {\n    wrappedRowRender,\n    tooltipContent,\n    tooltipTrigger\n  };\n}\n\nexport { useRender as default };","map":{"version":3,"mappings":"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","names":["useRender","props","parent","inject","TABLE_INJECTION_KEY","handleDoubleClick","handleClick","handleContextMenu","handleMouseEnter","handleMouseLeave","handleCellMouseEnter","handleCellMouseLeave","tooltipContent","tooltipTrigger","useEvents","getRowStyle","getRowClass","getCellStyle","getCellClass","getSpan","getColspanRealWidth","useStyles","firstDefaultColumnIndex","computed","store","states","columns","value","findIndex","type","getKeyOfRow","row","index","rowKey","getRowIdentity","rowRender","$index","treeRowData","tooltipEffect","indent","rowClasses","display","push","level","displayStyle","h","style","class","key","onDblclick","$event","onClick","onContextmenu","onMouseenter","onMouseleave","map","column","cellIndex","rowspan","colspan","columnData","realWidth","data","_self","context","treeNode","expanded","loading","noLazyChildren","baseKey","patchKey","columnKey","rawColumnKey","tdChildren","cellChildren","renderCell","wrappedRowRender","isRowExpanded","assertRowKey","treeData","lazyTreeNodeMap","childrenColumnName","hasExpandColumn","some","renderExpanded","tr","console","error","length","Object","keys","cur","lazy","loaded","children","tmp","i","traverse","parent2","forEach","node","innerTreeRowData","childKey","Error","nodes2","nodes"],"sources":["../../../../../../../packages/components/table/src/table-body/render-helper.ts"],"sourcesContent":["import { h, computed, inject } from 'vue'\nimport { getRowIdentity } from '../util'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport useEvents from './events-helper'\nimport useStyles from './styles-helper'\nimport type { TableBodyProps } from './defaults'\nimport type { RenderRowData, TreeNode, TableProps } from '../table/defaults'\n\nfunction useRender<T>(props: Partial<TableBodyProps<T>>) {\n  const parent = inject(TABLE_INJECTION_KEY)\n  const {\n    handleDoubleClick,\n    handleClick,\n    handleContextMenu,\n    handleMouseEnter,\n    handleMouseLeave,\n    handleCellMouseEnter,\n    handleCellMouseLeave,\n    tooltipContent,\n    tooltipTrigger,\n  } = useEvents(props)\n  const {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth,\n  } = useStyles(props)\n  const firstDefaultColumnIndex = computed(() => {\n    return props.store.states.columns.value.findIndex(\n      ({ type }) => type === 'default'\n    )\n  })\n  const getKeyOfRow = (row: T, index: number) => {\n    const rowKey = (parent.props as Partial<TableProps<T>>).rowKey\n    if (rowKey) {\n      return getRowIdentity(row, rowKey)\n    }\n    return index\n  }\n  const rowRender = (row: T, $index: number, treeRowData?: TreeNode) => {\n    const { tooltipEffect, store } = props\n    const { indent, columns } = store.states\n    const rowClasses = getRowClass(row, $index)\n    let display = true\n    if (treeRowData) {\n      rowClasses.push(`el-table__row--level-${treeRowData.level}`)\n      display = treeRowData.display\n    }\n    const displayStyle = display\n      ? null\n      : {\n          display: 'none',\n        }\n    return h(\n      'tr',\n      {\n        style: [displayStyle, getRowStyle(row, $index)],\n        class: rowClasses,\n        key: getKeyOfRow(row, $index),\n        onDblclick: ($event) => handleDoubleClick($event, row),\n        onClick: ($event) => handleClick($event, row),\n        onContextmenu: ($event) => handleContextMenu($event, row),\n        onMouseenter: () => handleMouseEnter($index),\n        onMouseleave: handleMouseLeave,\n      },\n      columns.value.map((column, cellIndex) => {\n        const { rowspan, colspan } = getSpan(row, column, $index, cellIndex)\n        if (!rowspan || !colspan) {\n          return null\n        }\n        const columnData = { ...column }\n        columnData.realWidth = getColspanRealWidth(\n          columns.value,\n          colspan,\n          cellIndex\n        )\n        const data: RenderRowData<T> = {\n          store: props.store,\n          _self: props.context || parent,\n          column: columnData,\n          row,\n          $index,\n        }\n        if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n          data.treeNode = {\n            indent: treeRowData.level * indent.value,\n            level: treeRowData.level,\n          }\n          if (typeof treeRowData.expanded === 'boolean') {\n            data.treeNode.expanded = treeRowData.expanded\n            // 表明是懒加载\n            if ('loading' in treeRowData) {\n              data.treeNode.loading = treeRowData.loading\n            }\n            if ('noLazyChildren' in treeRowData) {\n              data.treeNode.noLazyChildren = treeRowData.noLazyChildren\n            }\n          }\n        }\n        const baseKey = `${$index},${cellIndex}`\n        const patchKey = columnData.columnKey || columnData.rawColumnKey || ''\n        const tdChildren = cellChildren(cellIndex, column, data)\n        return h(\n          'td',\n          {\n            style: getCellStyle($index, cellIndex, row, column),\n            class: getCellClass($index, cellIndex, row, column),\n            key: `${patchKey}${baseKey}`,\n            rowspan,\n            colspan,\n            onMouseenter: ($event) =>\n              handleCellMouseEnter($event, { ...row, tooltipEffect }),\n            onMouseleave: handleCellMouseLeave,\n          },\n          [tdChildren]\n        )\n      })\n    )\n  }\n  const cellChildren = (cellIndex, column, data) => {\n    return column.renderCell(data)\n  }\n  const wrappedRowRender = (row: T, $index: number) => {\n    const store = props.store\n    const { isRowExpanded, assertRowKey } = store\n    const { treeData, lazyTreeNodeMap, childrenColumnName, rowKey } =\n      store.states\n    const hasExpandColumn = store.states.columns.value.some(\n      ({ type }) => type === 'expand'\n    )\n    if (hasExpandColumn && isRowExpanded(row)) {\n      const renderExpanded = parent.renderExpanded\n      const tr = rowRender(row, $index, undefined)\n      if (!renderExpanded) {\n        console.error('[Element Error]renderExpanded is required.')\n        return tr\n      }\n      // 使用二维数组，避免修改 $index\n      // Use a two dimensional array avoid modifying $index\n      return [\n        [\n          tr,\n          h(\n            'tr',\n            {\n              key: `expanded-row__${tr.key as string}`,\n            },\n            [\n              h(\n                'td',\n                {\n                  colspan: store.states.columns.value.length,\n                  class: 'el-table__cell el-table__expanded-cell',\n                },\n                [renderExpanded({ row, $index, store })]\n              ),\n            ]\n          ),\n        ],\n      ]\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey()\n      // TreeTable 时，rowKey 必须由用户设定，不使用 getKeyOfRow 计算\n      // 在调用 rowRender 函数时，仍然会计算 rowKey，不太好的操作\n      const key = getRowIdentity(row, rowKey.value)\n      let cur = treeData.value[key]\n      let treeRowData = null\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true,\n        }\n        if (typeof cur.lazy === 'boolean') {\n          if (typeof cur.loaded === 'boolean' && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length)\n          }\n          treeRowData.loading = cur.loading\n        }\n      }\n      const tmp = [rowRender(row, $index, treeRowData)]\n      // 渲染嵌套数据\n      if (cur) {\n        // currentRow 记录的是 index，所以还需主动增加 TreeTable 的 index\n        let i = 0\n        const traverse = (children, parent) => {\n          if (!(children && children.length && parent)) return\n          children.forEach((node) => {\n            // 父节点的 display 状态影响子节点的显示状态\n            const innerTreeRowData = {\n              display: parent.display && parent.expanded,\n              level: parent.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false,\n            }\n            const childKey = getRowIdentity(node, rowKey.value)\n            if (childKey === undefined || childKey === null) {\n              throw new Error('For nested data item, row-key is required.')\n            }\n            cur = { ...treeData.value[childKey] }\n            // 对于当前节点，分成有无子节点两种情况。\n            // 如果包含子节点的，设置 expanded 属性。\n            // 对于它子节点的 display 属性由它本身的 expanded 与 display 共同决定。\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded\n              // 懒加载的某些节点，level 未知\n              cur.level = cur.level || innerTreeRowData.level\n              cur.display = !!(cur.expanded && innerTreeRowData.display)\n              if (typeof cur.lazy === 'boolean') {\n                if (typeof cur.loaded === 'boolean' && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(\n                    cur.children && cur.children.length\n                  )\n                }\n                innerTreeRowData.loading = cur.loading\n              }\n            }\n            i++\n            tmp.push(rowRender(node, $index + i, innerTreeRowData))\n            if (cur) {\n              const nodes =\n                lazyTreeNodeMap.value[childKey] ||\n                node[childrenColumnName.value]\n              traverse(nodes, cur)\n            }\n          })\n        }\n        // 对于 root 节点，display 一定为 true\n        cur.display = true\n        const nodes =\n          lazyTreeNodeMap.value[key] || row[childrenColumnName.value]\n        traverse(nodes, cur)\n      }\n      return tmp\n    } else {\n      return rowRender(row, $index, undefined)\n    }\n  }\n\n  return {\n    wrappedRowRender,\n    tooltipContent,\n    tooltipTrigger,\n  }\n}\n\nexport default useRender\n"]},"metadata":{},"sourceType":"module"}