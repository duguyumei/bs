{"ast":null,"code":"import { defineComponent, ref, getCurrentInstance, provide, reactive, toRefs, inject, onMounted, toRaw, watch, withDirectives, openBlock, createElementBlock, normalizeClass, createElementVNode, toDisplayString, renderSlot, vShow } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { selectGroupKey, selectKey } from './token.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElOptionGroup\",\n  componentName: \"ElOptionGroup\",\n  props: {\n    label: String,\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  setup(props) {\n    const ns = useNamespace(\"select\");\n    const visible = ref(true);\n    const instance = getCurrentInstance();\n    const children = ref([]);\n    provide(selectGroupKey, reactive({ ...toRefs(props)\n    }));\n    const select = inject(selectKey);\n    onMounted(() => {\n      children.value = flattedChildren(instance.subTree);\n    });\n\n    const flattedChildren = node => {\n      const children2 = [];\n\n      if (Array.isArray(node.children)) {\n        node.children.forEach(child => {\n          var _a;\n\n          if (child.type && child.type.name === \"ElOption\" && child.component && child.component.proxy) {\n            children2.push(child.component.proxy);\n          } else if ((_a = child.children) == null ? void 0 : _a.length) {\n            children2.push(...flattedChildren(child));\n          }\n        });\n      }\n\n      return children2;\n    };\n\n    const {\n      groupQueryChange\n    } = toRaw(select);\n    watch(groupQueryChange, () => {\n      visible.value = children.value.some(option => option.visible === true);\n    });\n    return {\n      visible,\n      ns\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return withDirectives((openBlock(), createElementBlock(\"ul\", {\n    class: normalizeClass(_ctx.ns.be(\"group\", \"wrap\"))\n  }, [createElementVNode(\"li\", {\n    class: normalizeClass(_ctx.ns.be(\"group\", \"title\"))\n  }, toDisplayString(_ctx.label), 3), createElementVNode(\"li\", null, [createElementVNode(\"ul\", {\n    class: normalizeClass(_ctx.ns.b(\"group\"))\n  }, [renderSlot(_ctx.$slots, \"default\")], 2)])], 2)), [[vShow, _ctx.visible]]);\n}\n\nvar OptionGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { OptionGroup as default };","map":{"version":3,"mappings":";;;;;;AA2BA,MAAKA,YAAaC,gBAAa;AAC7BC,QAAM,eADuB;AAE7BC,iBAAe,eAFc;AAI7BC,SAAO;AACLC,WAAOC,MADF;AAELC,cAAU;AACRC,YAAMC,OADE;AAERC,eAAS;AAFD;AAFL,GAJsB;;AAW7BC,QAAMP,KAAN,EAAa;AACX,UAAMQ,KAAKC,aAAa,QAAb,CAAX;AACA,UAAMC,UAAUC,IAAI,IAAJ,CAAhB;AACA,UAAMC,WAAWC,oBAAjB;AACA,UAAMC,WAAWH,IAAI,EAAJ,CAAjB;AAEAI,YACEC,cADF,EAEEC,SAAS,KACJC,OAAOlB,KAAP;AADI,KAAT,CAFF;AAOA,UAAMmB,SAASC,OAAOC,SAAP,CAAf;AAEAC,cAAU,MAAM;AACdR,eAASS,KAAT,GAAiBC,gBAAgBZ,SAASa,OAAzB,CAAjB;AAA0C,KAD5C;;AAKA,UAAMD,kBAAmBE,IAAD,IAAU;AAChC,YAAMC,YAAW,EAAjB;;AACA,UAAIC,MAAMC,OAAN,CAAcH,KAAKZ,QAAnB,CAAJ,EAAkC;AAChCY,aAAKZ,QAAL,CAAcgB,OAAd,CAAuBC,KAAD,IAAW;AAC/B,cACEC,EADF;;AAME,iCAAoB,KAApB,CAAoBlC,IAApB,KAA8B,UAA9B,IAA8BiC,eAA9B,IAA8BA,qBAA9B,EAA8B;AAAAJ,qBACrB,KADqB,CACfI,qBADe;AAE9B,WAFA,MAEA,KAASC,KAAKD,cAAd,KAAiC,IAAjC,GAAiC,MAAjC,GAAiCC,SAAjC,EAAiC;AAAAL;AAAA;AAAA,SATrC;AAaF;;AAAO;AAGT,KAnBA;;AAoBA,UAAM;AAAAM;AAAA,QAAkBC,aAAxB;AACEC;AAAmEzB;AAGrE,KAHE;AAGK;AAELA,aAFK;AAELF;AAFK;AAEL;;AAzDyB,CAAb,CAAlB;;;AAnBO,sCAP6B4B;AAAAC;AAAA,MACqBC;AAApCD,kCAA4BE,EAA5B,CAA4B,OAA5B,EAA4B,OAA5B;AAAoC,KAARC,gBAKxCC,UALwC,CAAQ,EAKhD,CALgD,GAKhDH,gCADEA;AAFWD;AAEX,MADUK,mCACV,IACF,GAN2B,IAO7B,IAPO,sBAOP","names":["_sfc_main","defineComponent","name","componentName","props","label","String","disabled","type","Boolean","default","setup","ns","useNamespace","visible","ref","instance","getCurrentInstance","children","provide","selectGroupKey","reactive","toRefs","select","inject","selectKey","onMounted","value","flattedChildren","subTree","node","children2","Array","isArray","forEach","child","_a","groupQueryChange","toRaw","watch","createElementBlock","class","createElementVNode","be","toDisplayString","_ctx","renderSlot"],"sources":["../../../../../../packages/components/select/src/option-group.vue"],"sourcesContent":["<template>\n  <ul v-show=\"visible\" :class=\"ns.be('group', 'wrap')\">\n    <li :class=\"ns.be('group', 'title')\">{{ label }}</li>\n    <li>\n      <ul :class=\"ns.b('group')\">\n        <slot></slot>\n      </ul>\n    </li>\n  </ul>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  provide,\n  inject,\n  ref,\n  reactive,\n  toRefs,\n  getCurrentInstance,\n  onMounted,\n  watch,\n  toRaw,\n} from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { selectGroupKey, selectKey } from './token'\n\nexport default defineComponent({\n  name: 'ElOptionGroup',\n  componentName: 'ElOptionGroup',\n\n  props: {\n    label: String,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props) {\n    const ns = useNamespace('select')\n    const visible = ref(true)\n    const instance = getCurrentInstance()\n    const children = ref([])\n\n    provide(\n      selectGroupKey,\n      reactive({\n        ...toRefs(props),\n      })\n    )\n\n    const select = inject(selectKey)\n\n    onMounted(() => {\n      children.value = flattedChildren(instance.subTree)\n    })\n\n    // get all instances of options\n    const flattedChildren = (node) => {\n      const children = []\n      if (Array.isArray(node.children)) {\n        node.children.forEach((child) => {\n          if (\n            child.type &&\n            child.type.name === 'ElOption' &&\n            child.component &&\n            child.component.proxy\n          ) {\n            children.push(child.component.proxy)\n          } else if (child.children?.length) {\n            children.push(...flattedChildren(child))\n          }\n        })\n      }\n      return children\n    }\n\n    const { groupQueryChange } = toRaw(select)\n    watch(groupQueryChange, () => {\n      visible.value = children.value.some((option) => option.visible === true)\n    })\n\n    return {\n      visible,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}