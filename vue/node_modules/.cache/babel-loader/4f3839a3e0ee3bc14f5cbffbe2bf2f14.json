{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { getCurrentInstance, toRefs, ref, watch, unref } from 'vue';\nimport '../../../../utils/index.mjs';\nimport { orderBy, getKeysMap, toggleRowStatus, getRowIdentity, getColumnById, getColumnByKey } from '../util.mjs';\nimport useExpand from './expand.mjs';\nimport useCurrent from './current.mjs';\nimport useTree from './tree.mjs';\nimport { hasOwn } from '@vue/shared';\n\nconst sortData = (data, states) => {\n  const sortingColumn = states.sortingColumn;\n\n  if (!sortingColumn || typeof sortingColumn.sortable === \"string\") {\n    return data;\n  }\n\n  return orderBy(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);\n};\n\nconst doFlattenColumns = columns => {\n  const result = [];\n  columns.forEach(column => {\n    if (column.children) {\n      result.push.apply(result, doFlattenColumns(column.children));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\n\nfunction useWatcher() {\n  var _a;\n\n  const instance = getCurrentInstance();\n  const {\n    size: tableSize\n  } = toRefs((_a = instance.proxy) == null ? void 0 : _a.$props);\n  const rowKey = ref(null);\n  const data = ref([]);\n\n  const _data = ref([]);\n\n  const isComplex = ref(false);\n\n  const _columns = ref([]);\n\n  const originColumns = ref([]);\n  const columns = ref([]);\n  const fixedColumns = ref([]);\n  const rightFixedColumns = ref([]);\n  const leafColumns = ref([]);\n  const fixedLeafColumns = ref([]);\n  const rightFixedLeafColumns = ref([]);\n  const leafColumnsLength = ref(0);\n  const fixedLeafColumnsLength = ref(0);\n  const rightFixedLeafColumnsLength = ref(0);\n  const isAllSelected = ref(false);\n  const selection = ref([]);\n  const reserveSelection = ref(false);\n  const selectOnIndeterminate = ref(false);\n  const selectable = ref(null);\n  const filters = ref({});\n  const filteredData = ref(null);\n  const sortingColumn = ref(null);\n  const sortProp = ref(null);\n  const sortOrder = ref(null);\n  const hoverRow = ref(null);\n  watch(data, () => instance.state && scheduleLayout(false), {\n    deep: true\n  });\n\n  const assertRowKey = () => {\n    if (!rowKey.value) throw new Error(\"[ElTable] prop row-key is required\");\n  };\n\n  const updateColumns = () => {\n    fixedColumns.value = _columns.value.filter(column => column.fixed === true || column.fixed === \"left\");\n    rightFixedColumns.value = _columns.value.filter(column => column.fixed === \"right\");\n\n    if (fixedColumns.value.length > 0 && _columns.value[0] && _columns.value[0].type === \"selection\" && !_columns.value[0].fixed) {\n      _columns.value[0].fixed = true;\n      fixedColumns.value.unshift(_columns.value[0]);\n    }\n\n    const notFixedColumns = _columns.value.filter(column => !column.fixed);\n\n    originColumns.value = [].concat(fixedColumns.value).concat(notFixedColumns).concat(rightFixedColumns.value);\n    const leafColumns2 = doFlattenColumns(notFixedColumns);\n    const fixedLeafColumns2 = doFlattenColumns(fixedColumns.value);\n    const rightFixedLeafColumns2 = doFlattenColumns(rightFixedColumns.value);\n    leafColumnsLength.value = leafColumns2.length;\n    fixedLeafColumnsLength.value = fixedLeafColumns2.length;\n    rightFixedLeafColumnsLength.value = rightFixedLeafColumns2.length;\n    columns.value = [].concat(fixedLeafColumns2).concat(leafColumns2).concat(rightFixedLeafColumns2);\n    isComplex.value = fixedColumns.value.length > 0 || rightFixedColumns.value.length > 0;\n  };\n\n  const scheduleLayout = (needUpdateColumns, immediate = false) => {\n    if (needUpdateColumns) {\n      updateColumns();\n    }\n\n    if (immediate) {\n      instance.state.doLayout();\n    } else {\n      instance.state.debouncedUpdateLayout();\n    }\n  };\n\n  const isSelected = row => {\n    return selection.value.indexOf(row) > -1;\n  };\n\n  const clearSelection = () => {\n    isAllSelected.value = false;\n    const oldSelection = selection.value;\n\n    if (oldSelection.length) {\n      selection.value = [];\n      instance.emit(\"selection-change\", []);\n    }\n  };\n\n  const cleanSelection = () => {\n    let deleted;\n\n    if (rowKey.value) {\n      deleted = [];\n      const selectedMap = getKeysMap(selection.value, rowKey.value);\n      const dataMap = getKeysMap(data.value, rowKey.value);\n\n      for (const key in selectedMap) {\n        if (hasOwn(selectedMap, key) && !dataMap[key]) {\n          deleted.push(selectedMap[key].row);\n        }\n      }\n    } else {\n      deleted = selection.value.filter(item => data.value.indexOf(item) === -1);\n    }\n\n    if (deleted.length) {\n      const newSelection = selection.value.filter(item => deleted.indexOf(item) === -1);\n      selection.value = newSelection;\n      instance.emit(\"selection-change\", newSelection.slice());\n    }\n  };\n\n  const toggleRowSelection = (row, selected = void 0, emitChange = true) => {\n    const changed = toggleRowStatus(selection.value, row, selected);\n\n    if (changed) {\n      const newSelection = (selection.value || []).slice();\n\n      if (emitChange) {\n        instance.emit(\"select\", newSelection, row);\n      }\n\n      instance.emit(\"selection-change\", newSelection);\n    }\n  };\n\n  const _toggleAllSelection = () => {\n    var _a2, _b;\n\n    const value = selectOnIndeterminate.value ? !isAllSelected.value : !(isAllSelected.value || selection.value.length);\n    isAllSelected.value = value;\n    let selectionChanged = false;\n    let childrenCount = 0;\n    const rowKey2 = (_b = (_a2 = instance == null ? void 0 : instance.store) == null ? void 0 : _a2.states) == null ? void 0 : _b.rowKey.value;\n    data.value.forEach((row, index) => {\n      const rowIndex = index + childrenCount;\n\n      if (selectable.value) {\n        if (selectable.value.call(null, row, rowIndex) && toggleRowStatus(selection.value, row, value)) {\n          selectionChanged = true;\n        }\n      } else {\n        if (toggleRowStatus(selection.value, row, value)) {\n          selectionChanged = true;\n        }\n      }\n\n      childrenCount += getChildrenCount(getRowIdentity(row, rowKey2));\n    });\n\n    if (selectionChanged) {\n      instance.emit(\"selection-change\", selection.value ? selection.value.slice() : []);\n    }\n\n    instance.emit(\"select-all\", selection.value);\n  };\n\n  const updateSelectionByRowKey = () => {\n    const selectedMap = getKeysMap(selection.value, rowKey.value);\n    data.value.forEach(row => {\n      const rowId = getRowIdentity(row, rowKey.value);\n      const rowInfo = selectedMap[rowId];\n\n      if (rowInfo) {\n        selection.value[rowInfo.index] = row;\n      }\n    });\n  };\n\n  const updateAllSelected = () => {\n    var _a2, _b, _c;\n\n    if (((_a2 = data.value) == null ? void 0 : _a2.length) === 0) {\n      isAllSelected.value = false;\n      return;\n    }\n\n    let selectedMap;\n\n    if (rowKey.value) {\n      selectedMap = getKeysMap(selection.value, rowKey.value);\n    }\n\n    const isSelected2 = function (row) {\n      if (selectedMap) {\n        return !!selectedMap[getRowIdentity(row, rowKey.value)];\n      } else {\n        return selection.value.indexOf(row) !== -1;\n      }\n    };\n\n    let isAllSelected_ = true;\n    let selectedCount = 0;\n    let childrenCount = 0;\n\n    for (let i = 0, j = (data.value || []).length; i < j; i++) {\n      const keyProp = (_c = (_b = instance == null ? void 0 : instance.store) == null ? void 0 : _b.states) == null ? void 0 : _c.rowKey.value;\n      const rowIndex = i + childrenCount;\n      const item = data.value[i];\n      const isRowSelectable = selectable.value && selectable.value.call(null, item, rowIndex);\n\n      if (!isSelected2(item)) {\n        if (!selectable.value || isRowSelectable) {\n          isAllSelected_ = false;\n          break;\n        }\n      } else {\n        selectedCount++;\n      }\n\n      childrenCount += getChildrenCount(getRowIdentity(item, keyProp));\n    }\n\n    if (selectedCount === 0) isAllSelected_ = false;\n    isAllSelected.value = isAllSelected_;\n  };\n\n  const getChildrenCount = rowKey2 => {\n    var _a2;\n\n    if (!instance || !instance.store) return 0;\n    const {\n      treeData\n    } = instance.store.states;\n    let count = 0;\n    const children = (_a2 = treeData.value[rowKey2]) == null ? void 0 : _a2.children;\n\n    if (children) {\n      count += children.length;\n      children.forEach(childKey => {\n        count += getChildrenCount(childKey);\n      });\n    }\n\n    return count;\n  };\n\n  const updateFilters = (columns2, values) => {\n    if (!Array.isArray(columns2)) {\n      columns2 = [columns2];\n    }\n\n    const filters_ = {};\n    columns2.forEach(col => {\n      filters.value[col.id] = values;\n      filters_[col.columnKey || col.id] = values;\n    });\n    return filters_;\n  };\n\n  const updateSort = (column, prop, order) => {\n    if (sortingColumn.value && sortingColumn.value !== column) {\n      sortingColumn.value.order = null;\n    }\n\n    sortingColumn.value = column;\n    sortProp.value = prop;\n    sortOrder.value = order;\n  };\n\n  const execFilter = () => {\n    let sourceData = unref(_data);\n    Object.keys(filters.value).forEach(columnId => {\n      const values = filters.value[columnId];\n      if (!values || values.length === 0) return;\n      const column = getColumnById({\n        columns: columns.value\n      }, columnId);\n\n      if (column && column.filterMethod) {\n        sourceData = sourceData.filter(row => {\n          return values.some(value => column.filterMethod.call(null, value, row, column));\n        });\n      }\n    });\n    filteredData.value = sourceData;\n  };\n\n  const execSort = () => {\n    data.value = sortData(filteredData.value, {\n      sortingColumn: sortingColumn.value,\n      sortProp: sortProp.value,\n      sortOrder: sortOrder.value\n    });\n  };\n\n  const execQuery = (ignore = void 0) => {\n    if (!(ignore && ignore.filter)) {\n      execFilter();\n    }\n\n    execSort();\n  };\n\n  const clearFilter = columnKeys => {\n    const {\n      tableHeaderRef\n    } = instance.refs;\n    if (!tableHeaderRef) return;\n    const panels = Object.assign({}, tableHeaderRef.filterPanels);\n    const keys = Object.keys(panels);\n    if (!keys.length) return;\n\n    if (typeof columnKeys === \"string\") {\n      columnKeys = [columnKeys];\n    }\n\n    if (Array.isArray(columnKeys)) {\n      const columns_ = columnKeys.map(key => getColumnByKey({\n        columns: columns.value\n      }, key));\n      keys.forEach(key => {\n        const column = columns_.find(col => col.id === key);\n\n        if (column) {\n          column.filteredValue = [];\n        }\n      });\n      instance.store.commit(\"filterChange\", {\n        column: columns_,\n        values: [],\n        silent: true,\n        multi: true\n      });\n    } else {\n      keys.forEach(key => {\n        const column = columns.value.find(col => col.id === key);\n\n        if (column) {\n          column.filteredValue = [];\n        }\n      });\n      filters.value = {};\n      instance.store.commit(\"filterChange\", {\n        column: {},\n        values: [],\n        silent: true\n      });\n    }\n  };\n\n  const clearSort = () => {\n    if (!sortingColumn.value) return;\n    updateSort(null, null, null);\n    instance.store.commit(\"changeSortCondition\", {\n      silent: true\n    });\n  };\n\n  const {\n    setExpandRowKeys,\n    toggleRowExpansion,\n    updateExpandRows,\n    states: expandStates,\n    isRowExpanded\n  } = useExpand({\n    data,\n    rowKey\n  });\n  const {\n    updateTreeExpandKeys,\n    toggleTreeExpansion,\n    updateTreeData,\n    loadOrToggle,\n    states: treeStates\n  } = useTree({\n    data,\n    rowKey\n  });\n  const {\n    updateCurrentRowData,\n    updateCurrentRow,\n    setCurrentRowKey,\n    states: currentData\n  } = useCurrent({\n    data,\n    rowKey\n  });\n\n  const setExpandRowKeysAdapter = val => {\n    setExpandRowKeys(val);\n    updateTreeExpandKeys(val);\n  };\n\n  const toggleRowExpansionAdapter = (row, expanded) => {\n    const hasExpandColumn = columns.value.some(({\n      type\n    }) => type === \"expand\");\n\n    if (hasExpandColumn) {\n      toggleRowExpansion(row, expanded);\n    } else {\n      toggleTreeExpansion(row, expanded);\n    }\n  };\n\n  return {\n    assertRowKey,\n    updateColumns,\n    scheduleLayout,\n    isSelected,\n    clearSelection,\n    cleanSelection,\n    toggleRowSelection,\n    _toggleAllSelection,\n    toggleAllSelection: null,\n    updateSelectionByRowKey,\n    updateAllSelected,\n    updateFilters,\n    updateCurrentRow,\n    updateSort,\n    execFilter,\n    execSort,\n    execQuery,\n    clearFilter,\n    clearSort,\n    toggleRowExpansion,\n    setExpandRowKeysAdapter,\n    setCurrentRowKey,\n    toggleRowExpansionAdapter,\n    isRowExpanded,\n    updateExpandRows,\n    updateCurrentRowData,\n    loadOrToggle,\n    updateTreeData,\n    states: {\n      tableSize,\n      rowKey,\n      data,\n      _data,\n      isComplex,\n      _columns,\n      originColumns,\n      columns,\n      fixedColumns,\n      rightFixedColumns,\n      leafColumns,\n      fixedLeafColumns,\n      rightFixedLeafColumns,\n      leafColumnsLength,\n      fixedLeafColumnsLength,\n      rightFixedLeafColumnsLength,\n      isAllSelected,\n      selection,\n      reserveSelection,\n      selectOnIndeterminate,\n      selectable,\n      filters,\n      filteredData,\n      sortingColumn,\n      sortProp,\n      sortOrder,\n      hoverRow,\n      ...expandStates,\n      ...treeStates,\n      ...currentData\n    }\n  };\n}\n\nexport { useWatcher as default };","map":{"version":3,"mappings":"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","names":["sortData","data","states","sortingColumn","sortable","orderBy","sortProp","sortOrder","sortMethod","sortBy","doFlattenColumns","columns","result","forEach","column","children","push","apply","useWatcher","_a","instance","getCurrentInstance","size","tableSize","toRefs","proxy","$props","rowKey","ref","_data","isComplex","_columns","originColumns","fixedColumns","rightFixedColumns","leafColumns","fixedLeafColumns","rightFixedLeafColumns","leafColumnsLength","fixedLeafColumnsLength","rightFixedLeafColumnsLength","isAllSelected","selection","reserveSelection","selectOnIndeterminate","selectable","filters","filteredData","hoverRow","watch","state","scheduleLayout","deep","assertRowKey","value","Error","updateColumns","filter","fixed","length","type","unshift","notFixedColumns","concat","leafColumns2","fixedLeafColumns2","rightFixedLeafColumns2","needUpdateColumns","immediate","doLayout","debouncedUpdateLayout","isSelected","row","indexOf","clearSelection","oldSelection","emit","cleanSelection","deleted","selectedMap","getKeysMap","dataMap","key","hasOwn","item","newSelection","slice","toggleRowSelection","selected","emitChange","changed","toggleRowStatus","_toggleAllSelection","_a2","_b","selectionChanged","childrenCount","rowKey2","store","index","rowIndex","call","getChildrenCount","getRowIdentity","updateSelectionByRowKey","rowId","rowInfo","updateAllSelected","_c","isSelected2","isAllSelected_","selectedCount","i","j","keyProp","isRowSelectable","treeData","count","childKey","updateFilters","columns2","values","Array","isArray","filters_","col","id","columnKey","updateSort","prop","order","execFilter","sourceData","unref","Object","keys","columnId","getColumnById","filterMethod","some","execSort","execQuery","ignore","clearFilter","columnKeys","tableHeaderRef","refs","panels","assign","filterPanels","columns_","map","getColumnByKey","find","filteredValue","commit","silent","multi","clearSort","setExpandRowKeys","toggleRowExpansion","updateExpandRows","expandStates","isRowExpanded","useExpand","updateTreeExpandKeys","toggleTreeExpansion","updateTreeData","loadOrToggle","treeStates","useTree","updateCurrentRowData","updateCurrentRow","setCurrentRowKey","currentData","useCurrent","setExpandRowKeysAdapter","val","toggleRowExpansionAdapter","expanded","hasExpandColumn","toggleAllSelection"],"sources":["../../../../../../../packages/components/table/src/store/watcher.ts"],"sourcesContent":["import { ref, getCurrentInstance, unref, watch, toRefs } from 'vue'\nimport { hasOwn } from '@element-plus/utils'\nimport {\n  getKeysMap,\n  getRowIdentity,\n  getColumnById,\n  getColumnByKey,\n  orderBy,\n  toggleRowStatus,\n} from '../util'\nimport useExpand from './expand'\nimport useCurrent from './current'\nimport useTree from './tree'\n\nimport type { Ref } from 'vue'\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { Table, TableRefs } from '../table/defaults'\nimport type { StoreFilter } from './index'\n\nconst sortData = (data, states) => {\n  const sortingColumn = states.sortingColumn\n  if (!sortingColumn || typeof sortingColumn.sortable === 'string') {\n    return data\n  }\n  return orderBy(\n    data,\n    states.sortProp,\n    states.sortOrder,\n    sortingColumn.sortMethod,\n    sortingColumn.sortBy\n  )\n}\n\nconst doFlattenColumns = (columns) => {\n  const result = []\n  columns.forEach((column) => {\n    if (column.children) {\n      // eslint-disable-next-line prefer-spread\n      result.push.apply(result, doFlattenColumns(column.children))\n    } else {\n      result.push(column)\n    }\n  })\n  return result\n}\n\nfunction useWatcher<T>() {\n  const instance = getCurrentInstance() as Table<T>\n  const { size: tableSize } = toRefs(instance.proxy?.$props as any)\n  const rowKey: Ref<string> = ref(null)\n  const data: Ref<T[]> = ref([])\n  const _data: Ref<T[]> = ref([])\n  const isComplex = ref(false)\n  const _columns: Ref<TableColumnCtx<T>[]> = ref([])\n  const originColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const columns: Ref<TableColumnCtx<T>[]> = ref([])\n  const fixedColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const rightFixedColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const leafColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const fixedLeafColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const rightFixedLeafColumns: Ref<TableColumnCtx<T>[]> = ref([])\n  const leafColumnsLength = ref(0)\n  const fixedLeafColumnsLength = ref(0)\n  const rightFixedLeafColumnsLength = ref(0)\n  const isAllSelected = ref(false)\n  const selection: Ref<T[]> = ref([])\n  const reserveSelection = ref(false)\n  const selectOnIndeterminate = ref(false)\n  const selectable: Ref<(row: T, index: number) => boolean> = ref(null)\n  const filters: Ref<StoreFilter> = ref({})\n  const filteredData = ref(null)\n  const sortingColumn = ref(null)\n  const sortProp = ref(null)\n  const sortOrder = ref(null)\n  const hoverRow = ref(null)\n\n  watch(data, () => instance.state && scheduleLayout(false), {\n    deep: true,\n  })\n\n  // 检查 rowKey 是否存在\n  const assertRowKey = () => {\n    if (!rowKey.value) throw new Error('[ElTable] prop row-key is required')\n  }\n\n  // 更新列\n  const updateColumns = () => {\n    fixedColumns.value = _columns.value.filter(\n      (column) => column.fixed === true || column.fixed === 'left'\n    )\n    rightFixedColumns.value = _columns.value.filter(\n      (column) => column.fixed === 'right'\n    )\n    if (\n      fixedColumns.value.length > 0 &&\n      _columns.value[0] &&\n      _columns.value[0].type === 'selection' &&\n      !_columns.value[0].fixed\n    ) {\n      _columns.value[0].fixed = true\n      fixedColumns.value.unshift(_columns.value[0])\n    }\n\n    const notFixedColumns = _columns.value.filter((column) => !column.fixed)\n    originColumns.value = []\n      .concat(fixedColumns.value)\n      .concat(notFixedColumns)\n      .concat(rightFixedColumns.value)\n    const leafColumns = doFlattenColumns(notFixedColumns)\n    const fixedLeafColumns = doFlattenColumns(fixedColumns.value)\n    const rightFixedLeafColumns = doFlattenColumns(rightFixedColumns.value)\n\n    leafColumnsLength.value = leafColumns.length\n    fixedLeafColumnsLength.value = fixedLeafColumns.length\n    rightFixedLeafColumnsLength.value = rightFixedLeafColumns.length\n\n    columns.value = []\n      .concat(fixedLeafColumns)\n      .concat(leafColumns)\n      .concat(rightFixedLeafColumns)\n    isComplex.value =\n      fixedColumns.value.length > 0 || rightFixedColumns.value.length > 0\n  }\n\n  // 更新 DOM\n  const scheduleLayout = (needUpdateColumns?: boolean, immediate = false) => {\n    if (needUpdateColumns) {\n      updateColumns()\n    }\n    if (immediate) {\n      instance.state.doLayout()\n    } else {\n      instance.state.debouncedUpdateLayout()\n    }\n  }\n\n  // 选择\n  const isSelected = (row) => {\n    return selection.value.indexOf(row) > -1\n  }\n\n  const clearSelection = () => {\n    isAllSelected.value = false\n    const oldSelection = selection.value\n    if (oldSelection.length) {\n      selection.value = []\n      instance.emit('selection-change', [])\n    }\n  }\n\n  const cleanSelection = () => {\n    let deleted\n    if (rowKey.value) {\n      deleted = []\n      const selectedMap = getKeysMap(selection.value, rowKey.value)\n      const dataMap = getKeysMap(data.value, rowKey.value)\n      for (const key in selectedMap) {\n        if (hasOwn(selectedMap, key) && !dataMap[key]) {\n          deleted.push(selectedMap[key].row)\n        }\n      }\n    } else {\n      deleted = selection.value.filter(\n        (item) => data.value.indexOf(item) === -1\n      )\n    }\n    if (deleted.length) {\n      const newSelection = selection.value.filter(\n        (item) => deleted.indexOf(item) === -1\n      )\n      selection.value = newSelection\n      instance.emit('selection-change', newSelection.slice())\n    }\n  }\n\n  const toggleRowSelection = (\n    row: T,\n    selected = undefined,\n    emitChange = true\n  ) => {\n    const changed = toggleRowStatus(selection.value, row, selected)\n    if (changed) {\n      const newSelection = (selection.value || []).slice()\n      // 调用 API 修改选中值，不触发 select 事件\n      if (emitChange) {\n        instance.emit('select', newSelection, row)\n      }\n      instance.emit('selection-change', newSelection)\n    }\n  }\n\n  const _toggleAllSelection = () => {\n    // when only some rows are selected (but not all), select or deselect all of them\n    // depending on the value of selectOnIndeterminate\n    const value = selectOnIndeterminate.value\n      ? !isAllSelected.value\n      : !(isAllSelected.value || selection.value.length)\n    isAllSelected.value = value\n\n    let selectionChanged = false\n    let childrenCount = 0\n    const rowKey = instance?.store?.states?.rowKey.value\n    data.value.forEach((row, index) => {\n      const rowIndex = index + childrenCount\n      if (selectable.value) {\n        if (\n          selectable.value.call(null, row, rowIndex) &&\n          toggleRowStatus(selection.value, row, value)\n        ) {\n          selectionChanged = true\n        }\n      } else {\n        if (toggleRowStatus(selection.value, row, value)) {\n          selectionChanged = true\n        }\n      }\n      childrenCount += getChildrenCount(getRowIdentity(row, rowKey))\n    })\n\n    if (selectionChanged) {\n      instance.emit(\n        'selection-change',\n        selection.value ? selection.value.slice() : []\n      )\n    }\n    instance.emit('select-all', selection.value)\n  }\n\n  const updateSelectionByRowKey = () => {\n    const selectedMap = getKeysMap(selection.value, rowKey.value)\n    data.value.forEach((row) => {\n      const rowId = getRowIdentity(row, rowKey.value)\n      const rowInfo = selectedMap[rowId]\n      if (rowInfo) {\n        selection.value[rowInfo.index] = row\n      }\n    })\n  }\n\n  const updateAllSelected = () => {\n    // data 为 null 时，解构时的默认值会被忽略\n    if (data.value?.length === 0) {\n      isAllSelected.value = false\n      return\n    }\n\n    let selectedMap\n    if (rowKey.value) {\n      selectedMap = getKeysMap(selection.value, rowKey.value)\n    }\n    const isSelected = function (row) {\n      if (selectedMap) {\n        return !!selectedMap[getRowIdentity(row, rowKey.value)]\n      } else {\n        return selection.value.indexOf(row) !== -1\n      }\n    }\n    let isAllSelected_ = true\n    let selectedCount = 0\n    let childrenCount = 0\n    for (let i = 0, j = (data.value || []).length; i < j; i++) {\n      const keyProp = instance?.store?.states?.rowKey.value\n      const rowIndex = i + childrenCount\n      const item = data.value[i]\n      const isRowSelectable =\n        selectable.value && selectable.value.call(null, item, rowIndex)\n      if (!isSelected(item)) {\n        if (!selectable.value || isRowSelectable) {\n          isAllSelected_ = false\n          break\n        }\n      } else {\n        selectedCount++\n      }\n      childrenCount += getChildrenCount(getRowIdentity(item, keyProp))\n    }\n\n    if (selectedCount === 0) isAllSelected_ = false\n    isAllSelected.value = isAllSelected_\n  }\n\n  // gets the number of all child nodes by rowKey\n  const getChildrenCount = (rowKey: string) => {\n    if (!instance || !instance.store) return 0\n    const { treeData } = instance.store.states\n    let count = 0\n    const children = treeData.value[rowKey]?.children\n    if (children) {\n      count += children.length\n      children.forEach((childKey) => {\n        count += getChildrenCount(childKey)\n      })\n    }\n    return count\n  }\n\n  // 过滤与排序\n  const updateFilters = (columns, values) => {\n    if (!Array.isArray(columns)) {\n      columns = [columns]\n    }\n    const filters_ = {}\n    columns.forEach((col) => {\n      filters.value[col.id] = values\n      filters_[col.columnKey || col.id] = values\n    })\n    return filters_\n  }\n\n  const updateSort = (column, prop, order) => {\n    if (sortingColumn.value && sortingColumn.value !== column) {\n      sortingColumn.value.order = null\n    }\n    sortingColumn.value = column\n    sortProp.value = prop\n    sortOrder.value = order\n  }\n\n  const execFilter = () => {\n    let sourceData = unref(_data)\n    Object.keys(filters.value).forEach((columnId) => {\n      const values = filters.value[columnId]\n      if (!values || values.length === 0) return\n      const column = getColumnById(\n        {\n          columns: columns.value,\n        },\n        columnId\n      )\n      if (column && column.filterMethod) {\n        sourceData = sourceData.filter((row) => {\n          return values.some((value) =>\n            column.filterMethod.call(null, value, row, column)\n          )\n        })\n      }\n    })\n\n    filteredData.value = sourceData\n  }\n\n  const execSort = () => {\n    data.value = sortData(filteredData.value, {\n      sortingColumn: sortingColumn.value,\n      sortProp: sortProp.value,\n      sortOrder: sortOrder.value,\n    })\n  }\n\n  // 根据 filters 与 sort 去过滤 data\n  const execQuery = (ignore = undefined) => {\n    if (!(ignore && ignore.filter)) {\n      execFilter()\n    }\n    execSort()\n  }\n\n  const clearFilter = (columnKeys) => {\n    const { tableHeaderRef } = instance.refs as TableRefs\n    if (!tableHeaderRef) return\n    const panels = Object.assign({}, tableHeaderRef.filterPanels)\n\n    const keys = Object.keys(panels)\n    if (!keys.length) return\n\n    if (typeof columnKeys === 'string') {\n      columnKeys = [columnKeys]\n    }\n\n    if (Array.isArray(columnKeys)) {\n      const columns_ = columnKeys.map((key) =>\n        getColumnByKey(\n          {\n            columns: columns.value,\n          },\n          key\n        )\n      )\n      keys.forEach((key) => {\n        const column = columns_.find((col) => col.id === key)\n        if (column) {\n          column.filteredValue = []\n        }\n      })\n      instance.store.commit('filterChange', {\n        column: columns_,\n        values: [],\n        silent: true,\n        multi: true,\n      })\n    } else {\n      keys.forEach((key) => {\n        const column = columns.value.find((col) => col.id === key)\n        if (column) {\n          column.filteredValue = []\n        }\n      })\n\n      filters.value = {}\n      instance.store.commit('filterChange', {\n        column: {},\n        values: [],\n        silent: true,\n      })\n    }\n  }\n\n  const clearSort = () => {\n    if (!sortingColumn.value) return\n\n    updateSort(null, null, null)\n    instance.store.commit('changeSortCondition', {\n      silent: true,\n    })\n  }\n  const {\n    setExpandRowKeys,\n    toggleRowExpansion,\n    updateExpandRows,\n    states: expandStates,\n    isRowExpanded,\n  } = useExpand({\n    data,\n    rowKey,\n  })\n  const {\n    updateTreeExpandKeys,\n    toggleTreeExpansion,\n    updateTreeData,\n    loadOrToggle,\n    states: treeStates,\n  } = useTree({\n    data,\n    rowKey,\n  })\n  const {\n    updateCurrentRowData,\n    updateCurrentRow,\n    setCurrentRowKey,\n    states: currentData,\n  } = useCurrent({\n    data,\n    rowKey,\n  })\n  // 适配层，expand-row-keys 在 Expand 与 TreeTable 中都有使用\n  const setExpandRowKeysAdapter = (val: string[]) => {\n    // 这里会触发额外的计算，但为了兼容性，暂时这么做\n    setExpandRowKeys(val)\n    updateTreeExpandKeys(val)\n  }\n\n  // 展开行与 TreeTable 都要使用\n  const toggleRowExpansionAdapter = (row: T, expanded: boolean) => {\n    const hasExpandColumn = columns.value.some(({ type }) => type === 'expand')\n    if (hasExpandColumn) {\n      toggleRowExpansion(row, expanded)\n    } else {\n      toggleTreeExpansion(row, expanded)\n    }\n  }\n\n  return {\n    assertRowKey,\n    updateColumns,\n    scheduleLayout,\n    isSelected,\n    clearSelection,\n    cleanSelection,\n    toggleRowSelection,\n    _toggleAllSelection,\n    toggleAllSelection: null,\n    updateSelectionByRowKey,\n    updateAllSelected,\n    updateFilters,\n    updateCurrentRow,\n    updateSort,\n    execFilter,\n    execSort,\n    execQuery,\n    clearFilter,\n    clearSort,\n    toggleRowExpansion,\n    setExpandRowKeysAdapter,\n    setCurrentRowKey,\n    toggleRowExpansionAdapter,\n    isRowExpanded,\n    updateExpandRows,\n    updateCurrentRowData,\n    loadOrToggle,\n    updateTreeData,\n    states: {\n      tableSize,\n      rowKey,\n      data,\n      _data,\n      isComplex,\n      _columns,\n      originColumns,\n      columns,\n      fixedColumns,\n      rightFixedColumns,\n      leafColumns,\n      fixedLeafColumns,\n      rightFixedLeafColumns,\n      leafColumnsLength,\n      fixedLeafColumnsLength,\n      rightFixedLeafColumnsLength,\n      isAllSelected,\n      selection,\n      reserveSelection,\n      selectOnIndeterminate,\n      selectable,\n      filters,\n      filteredData,\n      sortingColumn,\n      sortProp,\n      sortOrder,\n      hoverRow,\n      ...expandStates,\n      ...treeStates,\n      ...currentData,\n    },\n  }\n}\n\nexport default useWatcher\n"]},"metadata":{},"sourceType":"module"}