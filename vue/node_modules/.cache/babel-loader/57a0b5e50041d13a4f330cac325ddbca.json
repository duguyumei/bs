{"ast":null,"code":"import '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { buildProps } from '../../../utils/vue/props.mjs';\nimport { componentSizes } from '../../../constants/size.mjs';\nimport { isNumber } from '@vueuse/core';\nconst inputNumberProps = buildProps({\n  step: {\n    type: Number,\n    default: 1\n  },\n  stepStrictly: {\n    type: Boolean,\n    default: false\n  },\n  max: {\n    type: Number,\n    default: Infinity\n  },\n  min: {\n    type: Number,\n    default: -Infinity\n  },\n  modelValue: {\n    type: Number\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  size: {\n    type: String,\n    values: componentSizes\n  },\n  controls: {\n    type: Boolean,\n    default: true\n  },\n  controlsPosition: {\n    type: String,\n    default: \"\",\n    values: [\"\", \"right\"]\n  },\n  name: String,\n  label: String,\n  placeholder: String,\n  precision: {\n    type: Number,\n    validator: val => val >= 0 && val === parseInt(`${val}`, 10)\n  }\n});\nconst inputNumberEmits = {\n  change: (prev, cur) => prev !== cur,\n  blur: e => e instanceof FocusEvent,\n  focus: e => e instanceof FocusEvent,\n  input: val => isNumber(val),\n  \"update:modelValue\": val => isNumber(val) || val === void 0\n};\nexport { inputNumberEmits, inputNumberProps };","map":{"version":3,"mappings":";;;;;AAEY,MAACA,gBAAgB,GAAGC,UAAU,CAAC;AACzCC,MAAI,EAAE;AACJC,QAAI,EAAEC,MADF;AAEJC,WAAO,EAAE;AAFL,GADmC;AAKzCC,cAAY,EAAE;AACZH,QAAI,EAAEI,OADM;AAEZF,WAAO,EAAE;AAFG,GAL2B;AASzCG,KAAG,EAAE;AACHL,QAAI,EAAEC,MADH;AAEHC,WAAO,EAAEI;AAFN,GAToC;AAazCC,KAAG,EAAE;AACHP,QAAI,EAAEC,MADH;AAEHC,WAAO,EAAE,CAACI;AAFP,GAboC;AAiBzCE,YAAU,EAAE;AACVR,QAAI,EAAEC;AADI,GAjB6B;AAoBzCQ,UAAQ,EAAE;AACRT,QAAI,EAAEI,OADE;AAERF,WAAO,EAAE;AAFD,GApB+B;AAwBzCQ,MAAI,EAAE;AACJV,QAAI,EAAEW,MADF;AAEJC,UAAM,EAAEC;AAFJ,GAxBmC;AA4BzCC,UAAQ,EAAE;AACRd,QAAI,EAAEI,OADE;AAERF,WAAO,EAAE;AAFD,GA5B+B;AAgCzCa,kBAAgB,EAAE;AAChBf,QAAI,EAAEW,MADU;AAEhBT,WAAO,EAAE,EAFO;AAGhBU,UAAM,EAAE,CAAC,EAAD,EAAK,OAAL;AAHQ,GAhCuB;AAqCzCI,MAAI,EAAEL,MArCmC;AAsCzCM,OAAK,EAAEN,MAtCkC;AAuCzCO,aAAW,EAAEP,MAvC4B;AAwCzCQ,WAAS,EAAE;AACTnB,QAAI,EAAEC,MADG;AAETmB,aAAS,EAAGC,GAAD,IAASA,GAAG,IAAI,CAAP,IAAYA,GAAG,KAAKC,QAAQ,CAAE,GAAED,GAAI,EAAR,EAAW,EAAX;AAFvC;AAxC8B,CAAD,CAA9B;AA6CA,MAACE,gBAAgB,GAAG;AAC9BC,QAAM,EAAE,CAACC,IAAD,EAAOC,GAAP,KAAeD,IAAI,KAAKC,GADF;AAE9BC,MAAI,EAAGC,CAAD,IAAOA,CAAC,YAAYC,UAFI;AAG9BC,OAAK,EAAGF,CAAD,IAAOA,CAAC,YAAYC,UAHG;AAI9BE,OAAK,EAAGV,GAAD,IAASW,QAAQ,CAACX,GAAD,CAJM;AAK9B,uBAAsBA,GAAD,IAASW,QAAQ,CAACX,GAAD,CAAR,IAAiBA,GAAG,KAAK,KAAK;AAL9B,CAApB","names":["inputNumberProps","buildProps","step","type","Number","default","stepStrictly","Boolean","max","Infinity","min","modelValue","disabled","size","String","values","componentSizes","controls","controlsPosition","name","label","placeholder","precision","validator","val","parseInt","inputNumberEmits","change","prev","cur","blur","e","FocusEvent","focus","input","isNumber"],"sources":["../../../../../../packages/components/input-number/src/input-number.ts"],"sourcesContent":["import { buildProps, isNumber } from '@element-plus/utils'\nimport { componentSizes } from '@element-plus/constants'\n\nexport const inputNumberProps = buildProps({\n  step: {\n    type: Number,\n    default: 1,\n  },\n  stepStrictly: {\n    type: Boolean,\n    default: false,\n  },\n  max: {\n    type: Number,\n    default: Infinity,\n  },\n  min: {\n    type: Number,\n    default: -Infinity,\n  },\n  modelValue: {\n    type: Number,\n  },\n  disabled: {\n    type: Boolean,\n    default: false,\n  },\n  size: {\n    type: String,\n    values: componentSizes,\n  },\n  controls: {\n    type: Boolean,\n    default: true,\n  },\n  controlsPosition: {\n    type: String,\n    default: '',\n    values: ['', 'right'],\n  },\n  name: String,\n  label: String,\n  placeholder: String,\n  precision: {\n    type: Number,\n    validator: (val: number) => val >= 0 && val === parseInt(`${val}`, 10),\n  },\n} as const)\n\nexport const inputNumberEmits = {\n  change: (prev: number, cur: number) => prev !== cur,\n  blur: (e: FocusEvent) => e instanceof FocusEvent,\n  focus: (e: FocusEvent) => e instanceof FocusEvent,\n  input: (val: number) => isNumber(val),\n  'update:modelValue': (val: number | undefined) =>\n    isNumber(val) || val === undefined,\n}\n"]},"metadata":{},"sourceType":"module"}