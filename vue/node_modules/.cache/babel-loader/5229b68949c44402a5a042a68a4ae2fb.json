{"ast":null,"code":"import { defineComponent, inject, ref, computed, onBeforeUnmount, toRef, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, vShow } from 'vue';\nimport { isClient, useEventListener } from '@vueuse/core';\nimport '../../../tokens/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { BAR_MAP, renderThumbStyle } from './util.mjs';\nimport { thumbProps } from './thumb.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { scrollbarContextKey } from '../../../tokens/scrollbar.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nconst COMPONENT_NAME = \"Thumb\";\n\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  props: thumbProps,\n\n  setup(props) {\n    const scrollbar = inject(scrollbarContextKey);\n    const ns = useNamespace(\"scrollbar\");\n    if (!scrollbar) throwError(COMPONENT_NAME, \"can not inject scrollbar context\");\n    const instance = ref();\n    const thumb = ref();\n    const thumbState = ref({});\n    const visible = ref(false);\n    let cursorDown = false;\n    let cursorLeave = false;\n    let originalOnSelectStart = isClient ? document.onselectstart : null;\n    const bar = computed(() => BAR_MAP[props.vertical ? \"vertical\" : \"horizontal\"]);\n    const thumbStyle = computed(() => renderThumbStyle({\n      size: props.size,\n      move: props.move,\n      bar: bar.value\n    }));\n    const offsetRatio = computed(() => instance.value[bar.value.offset] ** 2 / scrollbar.wrapElement[bar.value.scrollSize] / props.ratio / thumb.value[bar.value.offset]);\n\n    const clickThumbHandler = e => {\n      var _a;\n\n      e.stopPropagation();\n      if (e.ctrlKey || [1, 2].includes(e.button)) return;\n      (_a = window.getSelection()) == null ? void 0 : _a.removeAllRanges();\n      startDrag(e);\n      const el = e.currentTarget;\n      if (!el) return;\n      thumbState.value[bar.value.axis] = el[bar.value.offset] - (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction]);\n    };\n\n    const clickTrackHandler = e => {\n      if (!thumb.value || !instance.value || !scrollbar.wrapElement) return;\n      const offset = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);\n      const thumbHalf = thumb.value[bar.value.offset] / 2;\n      const thumbPositionPercentage = (offset - thumbHalf) * 100 * offsetRatio.value / instance.value[bar.value.offset];\n      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;\n    };\n\n    const startDrag = e => {\n      e.stopImmediatePropagation();\n      cursorDown = true;\n      document.addEventListener(\"mousemove\", mouseMoveDocumentHandler);\n      document.addEventListener(\"mouseup\", mouseUpDocumentHandler);\n      originalOnSelectStart = document.onselectstart;\n\n      document.onselectstart = () => false;\n    };\n\n    const mouseMoveDocumentHandler = e => {\n      if (!instance.value || !thumb.value) return;\n      if (cursorDown === false) return;\n      const prevPage = thumbState.value[bar.value.axis];\n      if (!prevPage) return;\n      const offset = (instance.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;\n      const thumbClickPosition = thumb.value[bar.value.offset] - prevPage;\n      const thumbPositionPercentage = (offset - thumbClickPosition) * 100 * offsetRatio.value / instance.value[bar.value.offset];\n      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;\n    };\n\n    const mouseUpDocumentHandler = () => {\n      cursorDown = false;\n      thumbState.value[bar.value.axis] = 0;\n      document.removeEventListener(\"mousemove\", mouseMoveDocumentHandler);\n      document.removeEventListener(\"mouseup\", mouseUpDocumentHandler);\n      restoreOnselectstart();\n      if (cursorLeave) visible.value = false;\n    };\n\n    const mouseMoveScrollbarHandler = () => {\n      cursorLeave = false;\n      visible.value = !!props.size;\n    };\n\n    const mouseLeaveScrollbarHandler = () => {\n      cursorLeave = true;\n      visible.value = cursorDown;\n    };\n\n    onBeforeUnmount(() => {\n      restoreOnselectstart();\n      document.removeEventListener(\"mouseup\", mouseUpDocumentHandler);\n    });\n\n    const restoreOnselectstart = () => {\n      if (document.onselectstart !== originalOnSelectStart) document.onselectstart = originalOnSelectStart;\n    };\n\n    useEventListener(toRef(scrollbar, \"scrollbarElement\"), \"mousemove\", mouseMoveScrollbarHandler);\n    useEventListener(toRef(scrollbar, \"scrollbarElement\"), \"mouseleave\", mouseLeaveScrollbarHandler);\n    return {\n      ns,\n      instance,\n      thumb,\n      bar,\n      thumbStyle,\n      visible,\n      clickTrackHandler,\n      clickThumbHandler\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createBlock(Transition, {\n    name: _ctx.ns.b(\"fade\")\n  }, {\n    default: withCtx(() => [withDirectives(createElementVNode(\"div\", {\n      ref: \"instance\",\n      class: normalizeClass([_ctx.ns.e(\"bar\"), _ctx.ns.is(_ctx.bar.key)]),\n      onMousedown: _cache[1] || (_cache[1] = (...args) => _ctx.clickTrackHandler && _ctx.clickTrackHandler(...args))\n    }, [createElementVNode(\"div\", {\n      ref: \"thumb\",\n      class: normalizeClass(_ctx.ns.e(\"thumb\")),\n      style: normalizeStyle(_ctx.thumbStyle),\n      onMousedown: _cache[0] || (_cache[0] = (...args) => _ctx.clickThumbHandler && _ctx.clickThumbHandler(...args))\n    }, null, 38)], 34), [[vShow, _ctx.always || _ctx.visible]])]),\n    _: 1\n  }, 8, [\"name\"]);\n}\n\nvar Thumb = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Thumb as default };","map":{"version":3,"mappings":"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","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","props","thumbProps","setup","scrollbar","inject","scrollbarContextKey","ns","useNamespace","throwError","instance","ref","thumb","thumbState","visible","cursorDown","cursorLeave","originalOnSelectStart","isClient","document","onselectstart","bar","computed","BAR_MAP","vertical","thumbStyle","renderThumbStyle","size","move","value","offsetRatio","offset","wrapElement","scrollSize","ratio","clickThumbHandler","e","startDrag","clickTrackHandler","thumbHalf","addEventListener","mouseMoveDocumentHandler","direction","thumbClickPosition","prevPage","removeEventListener","restoreOnselectstart","onBeforeUnmount","useEventListener","toRef","mouseMoveScrollbarHandler","default","withDirectives","class","_ctx","onMousedown","createElementVNode","_normalizeClass","style"],"sources":["../../../../../../packages/components/scrollbar/src/thumb.vue"],"sourcesContent":["<template>\n  <transition :name=\"ns.b('fade')\">\n    <div\n      v-show=\"always || visible\"\n      ref=\"instance\"\n      :class=\"[ns.e('bar'), ns.is(bar.key)]\"\n      @mousedown=\"clickTrackHandler\"\n    >\n      <div\n        ref=\"thumb\"\n        :class=\"ns.e('thumb')\"\n        :style=\"thumbStyle\"\n        @mousedown=\"clickThumbHandler\"\n      ></div>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  onBeforeUnmount,\n  ref,\n  toRef,\n} from 'vue'\nimport { useEventListener, isClient } from '@vueuse/core'\nimport { scrollbarContextKey } from '@element-plus/tokens'\nimport { throwError } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { BAR_MAP, renderThumbStyle } from './util'\n\nimport { thumbProps } from './thumb'\n\nconst COMPONENT_NAME = 'Thumb'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: thumbProps,\n\n  setup(props) {\n    const scrollbar = inject(scrollbarContextKey)\n    const ns = useNamespace('scrollbar')\n\n    if (!scrollbar)\n      throwError(COMPONENT_NAME, 'can not inject scrollbar context')\n\n    const instance = ref<HTMLDivElement>()\n    const thumb = ref<HTMLDivElement>()\n\n    const thumbState = ref({})\n    const visible = ref(false)\n\n    let cursorDown = false\n    let cursorLeave = false\n    let originalOnSelectStart:\n      | ((this: GlobalEventHandlers, ev: Event) => any)\n      | null = isClient ? document.onselectstart : null\n\n    const bar = computed(\n      () => BAR_MAP[props.vertical ? 'vertical' : 'horizontal']\n    )\n\n    const thumbStyle = computed(() =>\n      renderThumbStyle({\n        size: props.size,\n        move: props.move,\n        bar: bar.value,\n      })\n    )\n\n    const offsetRatio = computed(\n      () =>\n        // offsetRatioX = original width of thumb / current width of thumb / ratioX\n        // offsetRatioY = original height of thumb / current height of thumb / ratioY\n        // instance height = wrap height - GAP\n        instance.value![bar.value.offset] ** 2 /\n        scrollbar.wrapElement![bar.value.scrollSize] /\n        props.ratio /\n        thumb.value![bar.value.offset]\n    )\n\n    const clickThumbHandler = (e: MouseEvent) => {\n      // prevent click event of middle and right button\n      e.stopPropagation()\n      if (e.ctrlKey || [1, 2].includes(e.button)) return\n\n      window.getSelection()?.removeAllRanges()\n      startDrag(e)\n\n      const el = e.currentTarget as HTMLDivElement\n      if (!el) return\n      thumbState.value[bar.value.axis] =\n        el[bar.value.offset] -\n        (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction])\n    }\n\n    const clickTrackHandler = (e: MouseEvent) => {\n      if (!thumb.value || !instance.value || !scrollbar.wrapElement) return\n\n      const offset = Math.abs(\n        (e.target as HTMLElement).getBoundingClientRect()[bar.value.direction] -\n          e[bar.value.client]\n      )\n      const thumbHalf = thumb.value[bar.value.offset] / 2\n      const thumbPositionPercentage =\n        ((offset - thumbHalf) * 100 * offsetRatio.value) /\n        instance.value[bar.value.offset]\n\n      scrollbar.wrapElement[bar.value.scroll] =\n        (thumbPositionPercentage *\n          scrollbar.wrapElement[bar.value.scrollSize]) /\n        100\n    }\n\n    const startDrag = (e: MouseEvent) => {\n      e.stopImmediatePropagation()\n      cursorDown = true\n      document.addEventListener('mousemove', mouseMoveDocumentHandler)\n      document.addEventListener('mouseup', mouseUpDocumentHandler)\n      originalOnSelectStart = document.onselectstart\n      document.onselectstart = () => false\n    }\n\n    const mouseMoveDocumentHandler = (e: MouseEvent) => {\n      if (!instance.value || !thumb.value) return\n      if (cursorDown === false) return\n\n      const prevPage = thumbState.value[bar.value.axis]\n      if (!prevPage) return\n\n      const offset =\n        (instance.value.getBoundingClientRect()[bar.value.direction] -\n          e[bar.value.client]) *\n        -1\n      const thumbClickPosition = thumb.value[bar.value.offset] - prevPage\n      const thumbPositionPercentage =\n        ((offset - thumbClickPosition) * 100 * offsetRatio.value) /\n        instance.value[bar.value.offset]\n      scrollbar.wrapElement[bar.value.scroll] =\n        (thumbPositionPercentage *\n          scrollbar.wrapElement[bar.value.scrollSize]) /\n        100\n    }\n\n    const mouseUpDocumentHandler = () => {\n      cursorDown = false\n      thumbState.value[bar.value.axis] = 0\n      document.removeEventListener('mousemove', mouseMoveDocumentHandler)\n      document.removeEventListener('mouseup', mouseUpDocumentHandler)\n      restoreOnselectstart()\n      if (cursorLeave) visible.value = false\n    }\n\n    const mouseMoveScrollbarHandler = () => {\n      cursorLeave = false\n      visible.value = !!props.size\n    }\n\n    const mouseLeaveScrollbarHandler = () => {\n      cursorLeave = true\n      visible.value = cursorDown\n    }\n\n    onBeforeUnmount(() => {\n      restoreOnselectstart()\n      document.removeEventListener('mouseup', mouseUpDocumentHandler)\n    })\n\n    const restoreOnselectstart = () => {\n      if (document.onselectstart !== originalOnSelectStart)\n        document.onselectstart = originalOnSelectStart\n    }\n\n    useEventListener(\n      toRef(scrollbar, 'scrollbarElement'),\n      'mousemove',\n      mouseMoveScrollbarHandler\n    )\n    useEventListener(\n      toRef(scrollbar, 'scrollbarElement'),\n      'mouseleave',\n      mouseLeaveScrollbarHandler\n    )\n\n    return {\n      ns,\n      instance,\n      thumb,\n      bar,\n      thumbStyle,\n      visible,\n      clickTrackHandler,\n      clickThumbHandler,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}