{"ast":null,"code":"import { defineComponent, ref, nextTick, onMounted, provide, reactive, toRefs, watch, openBlock, createElementBlock, normalizeClass, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { radioGroupProps, radioGroupEmits } from './radio-group.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { radioGroupKey } from '../../../tokens/radio.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElRadioGroup\",\n  props: radioGroupProps,\n  emits: radioGroupEmits,\n\n  setup(props, ctx) {\n    const ns = useNamespace(\"radio\");\n    const radioGroupRef = ref();\n    const {\n      formItem\n    } = useFormItem();\n\n    const changeEvent = value => {\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      nextTick(() => ctx.emit(\"change\", value));\n    };\n\n    const handleKeydown = e => {\n      if (!radioGroupRef.value) return;\n      const target = e.target;\n      const className = target.nodeName === \"INPUT\" ? \"[type=radio]\" : \"[role=radio]\";\n      const radios = radioGroupRef.value.querySelectorAll(className);\n      const length = radios.length;\n      const index = Array.from(radios).indexOf(target);\n      const roleRadios = radioGroupRef.value.querySelectorAll(\"[role=radio]\");\n      let nextIndex = null;\n\n      switch (e.code) {\n        case EVENT_CODE.left:\n        case EVENT_CODE.up:\n          e.stopPropagation();\n          e.preventDefault();\n          nextIndex = index === 0 ? length - 1 : index - 1;\n          break;\n\n        case EVENT_CODE.right:\n        case EVENT_CODE.down:\n          e.stopPropagation();\n          e.preventDefault();\n          nextIndex = index === length - 1 ? 0 : index + 1;\n          break;\n\n        default:\n          break;\n      }\n\n      if (nextIndex === null) return;\n      roleRadios[nextIndex].click();\n      roleRadios[nextIndex].focus();\n    };\n\n    onMounted(() => {\n      const radios = radioGroupRef.value.querySelectorAll(\"[type=radio]\");\n      const firstLabel = radios[0];\n\n      if (!Array.from(radios).some(radio => radio.checked) && firstLabel) {\n        firstLabel.tabIndex = 0;\n      }\n    });\n    provide(radioGroupKey, reactive({ ...toRefs(props),\n      changeEvent\n    }));\n    watch(() => props.modelValue, () => formItem == null ? void 0 : formItem.validate(\"change\"));\n    return {\n      ns,\n      radioGroupRef,\n      handleKeydown\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"radioGroupRef\",\n    class: normalizeClass(_ctx.ns.b(\"group\")),\n    role: \"radiogroup\",\n    onKeydown: _cache[0] || (_cache[0] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n  }, [renderSlot(_ctx.$slots, \"default\")], 34);\n}\n\nvar RadioGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { RadioGroup as default };","map":{"version":3,"mappings":";;;;;;;;;;;;AA4BA,MAAKA,YAAaC,gBAAa;AAC7BC,QAAM,cADuB;AAE7BC,SAAOC,eAFsB;AAG7BC,SAAOC,eAHsB;;AAK7BC,QAAMJ,KAAN,EAAaK,GAAb,EAAkB;AAChB,UAAMC,KAAKC,aAAa,OAAb,CAAX;AACA,UAAMC,gBAAgBC,KAAtB;AACA,UAAM;AAAEC;AAAF,QAAeC,aAArB;;AAEA,UAAMC,cAAeC,KAAD,IAA0C;AAC5DR,UAAIS,IAAJ,CAASC,kBAAT,EAA6BF,KAA7B;AACAG,eAAS,MAAMX,IAAIS,IAAJ,CAAS,QAAT,EAAmBD,KAAnB,CAAf;AAAkC,KAFpC;;AAKA,UAAMI,gBAAiBC,CAAD,IAAsB;AAC1C,UAAI,CAACV,cAAcK,KAAnB,EAA0B;AAG1B,YAAMM,SAASD,EAAEC,MAAjB;AACA,YAAMC,YACJD,OAAOE,QAAP,KAAoB,OAApB,GAA8B,cAA9B,GAA+C,cADjD;AAEA,YAAMC,SACJd,cAAcK,KAAd,CAAoBU,gBAApB,CAAuDH,SAAvD,CADF;AAEA,YAAMI,SAASF,OAAOE,MAAtB;AACA,YAAMC,QAAQC,MAAMC,IAAN,CAAWL,MAAX,EAAmBM,OAAnB,CAA2BT,MAA3B,CAAd;AACA,YAAMU,aACJrB,cAAcK,KAAd,CAAoBU,gBAApB,CAAuD,cAAvD,CADF;AAGA,UAAIO,YAA2B,IAA/B;;AACA,cAAQZ,EAAEa,IAAV;AAAU,aACHC,WAAWC,IADR;AACQ,aACXD,WAAWE,EADA;AAEdhB,YAAEiB,eAAF;AACAjB,YAAEkB,cAAF;AACAN,sBAAYL,UAAU,CAAV,GAAcD,SAAS,CAAvB,GAA2BC,QAAQ,CAA/C;AACA;;AAAA,aACGO,WAAWK,KADd;AACc,aACXL,WAAWM,IADA;AAEdpB,YAAEiB,eAAF;AACAjB,YAAEkB,cAAF;AACAN,sBAAYL,UAAUD,SAAS,CAAnB,GAAuB,CAAvB,GAA2BC,QAAQ,CAA/C;AACA;;AAAA;AAEA;AAdJ;;AAgBA,UAAIK,cAAc,IAAlB,EAAwB;AACxBD,iBAAWC,SAAX,EAAsBS,KAAtB;AACAV,iBAAWC,SAAX,EAAsBU,KAAtB;AAAsB,KAjCxB;;AAoCAC,cAAU,MAAM;AACd,YAAMnB,SACJd,cAAcK,KAAd,CAAqBU,gBAArB,CAAwD,cAAxD,CADF;AAEA,YAAMmB,aAAapB,OAAO,CAAP,CAAnB;;AACA,UAAI,CAACI,MAAMC,IAAN,CAAWL,MAAX,EAAmBqB,IAAnB,CAAyBC,KAAD,IAAWA,MAAMC,OAAzC,CAAD,IAAsDH,UAA1D,EAAsE;AACpEA,mBAAWI,QAAX,GAAsB,CAAtB;AAAsB;AAAA,KAL1B;AASAC,YACEC,aADF,EAEEC,SAAS,KACJC,OAAOlD,KAAP,CADI;AAEPY;AAFO,KAAT,CAFF;AAQAuC,UACE,MAAMnD,MAAMoD,UADd,EAEE,MAAM1C,mBAAmB,MAAnB,GAAmBA,2BAF3B;AAKA,WAAO;AACLJ,QADK;AAELE,mBAFK;AAGLS;AAHK,KAAP;AAGE;;AA5EyB,CAAb,CAAlB;;;sBA3BEoC,mBAOM,KAPNA,EAOM;AANJ5C,SAAI,eAMA;AALH6C,WAAKC,eAAEC,QAAGC,CAAH,CAAI,OAAJ,CAAFF,CAKF;AAJJG,UAAK,YAID;AAHHC,eAAOC,uCAAEJ,iDAAF;AAGJ,GAPNH,EAIY,CAEVQ,WAAaL,WAAbK,EAAa,SAAbA,CAFU,CAJZR,EAMe,EANfA","names":["_sfc_main","defineComponent","name","props","radioGroupProps","emits","radioGroupEmits","setup","ctx","ns","useNamespace","radioGroupRef","ref","formItem","useFormItem","changeEvent","value","emit","UPDATE_MODEL_EVENT","nextTick","handleKeydown","e","target","className","nodeName","radios","querySelectorAll","length","index","Array","from","indexOf","roleRadios","nextIndex","code","EVENT_CODE","left","up","stopPropagation","preventDefault","right","down","click","focus","onMounted","firstLabel","some","radio","checked","tabIndex","provide","radioGroupKey","reactive","toRefs","watch","modelValue","_createElementBlock","class","_normalizeClass","_ctx","b","role","onKeydown","_cache","_renderSlot"],"sources":["../../../../../../packages/components/radio/src/radio-group.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"radioGroupRef\"\n    :class=\"ns.b('group')\"\n    role=\"radiogroup\"\n    @keydown=\"handleKeydown\"\n  >\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  nextTick,\n  provide,\n  onMounted,\n  ref,\n  reactive,\n  toRefs,\n  watch,\n} from 'vue'\nimport { EVENT_CODE, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { radioGroupKey } from '@element-plus/tokens'\nimport { useFormItem, useNamespace } from '@element-plus/hooks'\nimport { radioGroupEmits, radioGroupProps } from './radio-group'\nimport type { RadioGroupProps } from '..'\n\nexport default defineComponent({\n  name: 'ElRadioGroup',\n  props: radioGroupProps,\n  emits: radioGroupEmits,\n\n  setup(props, ctx) {\n    const ns = useNamespace('radio')\n    const radioGroupRef = ref<HTMLDivElement>()\n    const { formItem } = useFormItem()\n\n    const changeEvent = (value: RadioGroupProps['modelValue']) => {\n      ctx.emit(UPDATE_MODEL_EVENT, value)\n      nextTick(() => ctx.emit('change', value))\n    }\n\n    const handleKeydown = (e: KeyboardEvent) => {\n      if (!radioGroupRef.value) return\n\n      // 左右上下按键 可以在 radio 组内切换不同选项\n      const target = e.target as HTMLInputElement\n      const className =\n        target.nodeName === 'INPUT' ? '[type=radio]' : '[role=radio]'\n      const radios =\n        radioGroupRef.value.querySelectorAll<HTMLInputElement>(className)\n      const length = radios.length\n      const index = Array.from(radios).indexOf(target)\n      const roleRadios =\n        radioGroupRef.value.querySelectorAll<HTMLInputElement>('[role=radio]')\n\n      let nextIndex: number | null = null\n      switch (e.code) {\n        case EVENT_CODE.left:\n        case EVENT_CODE.up:\n          e.stopPropagation()\n          e.preventDefault()\n          nextIndex = index === 0 ? length - 1 : index - 1\n          break\n        case EVENT_CODE.right:\n        case EVENT_CODE.down:\n          e.stopPropagation()\n          e.preventDefault()\n          nextIndex = index === length - 1 ? 0 : index + 1\n          break\n        default:\n          break\n      }\n      if (nextIndex === null) return\n      roleRadios[nextIndex].click()\n      roleRadios[nextIndex].focus()\n    }\n\n    onMounted(() => {\n      const radios =\n        radioGroupRef.value!.querySelectorAll<HTMLInputElement>('[type=radio]')\n      const firstLabel = radios[0]\n      if (!Array.from(radios).some((radio) => radio.checked) && firstLabel) {\n        firstLabel.tabIndex = 0\n      }\n    })\n\n    provide(\n      radioGroupKey,\n      reactive({\n        ...toRefs(props),\n        changeEvent,\n      })\n    )\n\n    watch(\n      () => props.modelValue,\n      () => formItem?.validate('change')\n    )\n\n    return {\n      ns,\n      radioGroupRef,\n      handleKeydown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}