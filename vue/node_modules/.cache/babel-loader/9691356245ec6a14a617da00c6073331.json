{"ast":null,"code":"import { defineComponent, inject, ref, computed, nextTick, watch, onMounted, onBeforeUnmount, resolveComponent, resolveDirective, openBlock, createBlock, withCtx, withDirectives, createElementBlock, normalizeClass, normalizeStyle, createVNode, withModifiers, Fragment, renderList, createElementVNode, toDisplayString, withKeys, vModelText, createCommentVNode, vShow, renderSlot } from 'vue';\nimport { isPromise } from '@vue/shared';\nimport { debounce } from 'lodash-unified';\nimport { isClient } from '@vueuse/core';\nimport _CascaderPanel from '../../cascader-panel/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../popper/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { CircleClose, Check, ArrowDown } from '@element-plus/icons-vue';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { CommonProps } from '../../cascader-panel/src/config.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useTooltipContentProps } from '../../tooltip/src/tooltip.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { useDeprecateAppendToBody } from '../../popper/src/deprecation.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../utils/dom/resize-event.mjs';\nconst DEFAULT_INPUT_HEIGHT = 40;\nconst INPUT_HEIGHT_MAP = {\n  large: 36,\n  default: 32,\n  small: 28\n};\nconst popperOptions = {\n  modifiers: [{\n    name: \"arrowPosition\",\n    enabled: true,\n    phase: \"main\",\n    fn: ({\n      state\n    }) => {\n      const {\n        modifiersData,\n        placement\n      } = state;\n      if ([\"right\", \"left\", \"bottom\", \"top\"].includes(placement)) return;\n      modifiersData.arrow.x = 35;\n    },\n    requires: [\"arrow\"]\n  }]\n};\nconst COMPONENT_NAME = \"ElCascader\";\n\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElCascaderPanel: _CascaderPanel,\n    ElInput,\n    ElTooltip,\n    ElScrollbar,\n    ElTag,\n    ElIcon,\n    CircleClose,\n    Check,\n    ArrowDown\n  },\n  directives: {\n    Clickoutside: ClickOutside\n  },\n  props: { ...CommonProps,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    placeholder: {\n      type: String\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    filterMethod: {\n      type: Function,\n      default: (node, keyword) => node.text.includes(keyword)\n    },\n    separator: {\n      type: String,\n      default: \" / \"\n    },\n    showAllLevels: {\n      type: Boolean,\n      default: true\n    },\n    collapseTags: Boolean,\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    beforeFilter: {\n      type: Function,\n      default: () => true\n    },\n    popperClass: {\n      type: String,\n      default: \"\"\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      default: void 0\n    },\n    teleported: useTooltipContentProps.teleported\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"focus\", \"blur\", \"visible-change\", \"expand-change\", \"remove-tag\"],\n\n  setup(props, {\n    emit\n  }) {\n    let inputInitialHeight = 0;\n    let pressDeleteCount = 0;\n    const {\n      compatTeleported\n    } = useDeprecateAppendToBody(COMPONENT_NAME, \"popperAppendToBody\");\n    const {\n      t\n    } = useLocale();\n    const elForm = inject(elFormKey, {});\n    const elFormItem = inject(elFormItemKey, {});\n    const tooltipRef = ref(null);\n    const input = ref(null);\n    const tagWrapper = ref(null);\n    const panel = ref(null);\n    const suggestionPanel = ref(null);\n    const popperVisible = ref(false);\n    const inputHover = ref(false);\n    const filtering = ref(false);\n    const inputValue = ref(\"\");\n    const searchInputValue = ref(\"\");\n    const presentTags = ref([]);\n    const suggestions = ref([]);\n    const isOnComposition = ref(false);\n    const isDisabled = computed(() => props.disabled || elForm.disabled);\n    const inputPlaceholder = computed(() => props.placeholder || t(\"el.cascader.placeholder\"));\n    const realSize = useSize();\n    const tagSize = computed(() => [\"small\"].includes(realSize.value) ? \"small\" : \"default\");\n    const multiple = computed(() => !!props.props.multiple);\n    const readonly = computed(() => !props.filterable || multiple.value);\n    const searchKeyword = computed(() => multiple.value ? searchInputValue.value : inputValue.value);\n    const checkedNodes = computed(() => {\n      var _a;\n\n      return ((_a = panel.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    const clearBtnVisible = computed(() => {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value) return false;\n      return !!checkedNodes.value.length;\n    });\n    const presentText = computed(() => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      const nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \" \" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    const checkedValue = computed({\n      get() {\n        return props.modelValue;\n      },\n\n      set(val) {\n        var _a;\n\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n      }\n\n    });\n    const popperPaneRef = computed(() => {\n      var _a, _b;\n\n      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n\n    const togglePopperVisible = visible => {\n      var _a, _b, _c;\n\n      if (isDisabled.value) return;\n      visible = visible != null ? visible : !popperVisible.value;\n\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", `${visible}`);\n\n        if (visible) {\n          updatePopperPosition();\n          nextTick((_c = panel.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          const {\n            value\n          } = presentText;\n          inputValue.value = value;\n          searchInputValue.value = value;\n        }\n\n        emit(\"visible-change\", visible);\n      }\n    };\n\n    const updatePopperPosition = () => {\n      nextTick(() => {\n        var _a;\n\n        (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();\n      });\n    };\n\n    const hideSuggestionPanel = () => {\n      filtering.value = false;\n    };\n\n    const genTag = node => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled\n      };\n    };\n\n    const deleteTag = tag => {\n      var _a;\n\n      const node = tag.node;\n      node.doCheck(false);\n      (_a = panel.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"remove-tag\", node.valueByOption);\n    };\n\n    const calculatePresentTags = () => {\n      if (!multiple.value) return;\n      const nodes = checkedNodes.value;\n      const tags = [];\n\n      if (nodes.length) {\n        const [first, ...rest] = nodes;\n        const restCount = rest.length;\n        tags.push(genTag(first));\n\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false\n            });\n          } else {\n            rest.forEach(node => tags.push(genTag(node)));\n          }\n        }\n      }\n\n      presentTags.value = tags;\n    };\n\n    const calculateSuggestions = () => {\n      var _a, _b;\n\n      const {\n        filterMethod,\n        showAllLevels,\n        separator\n      } = props;\n      const res = (_b = (_a = panel.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter(node => {\n        if (node.isDisabled) return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n\n      if (multiple.value) {\n        presentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n      }\n\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n\n    const focusFirstNode = () => {\n      var _a;\n\n      let firstNode;\n\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(\".el-cascader__suggestion-item\");\n      } else {\n        firstNode = (_a = panel.value) == null ? void 0 : _a.$el.querySelector('.el-cascader-node[tabindex=\"-1\"]');\n      }\n\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n\n    const updateStyle = () => {\n      var _a, _b;\n\n      const inputInner = (_a = input.value) == null ? void 0 : _a.input;\n      const tagWrapperEl = tagWrapper.value;\n      const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (!isClient || !inputInner) return;\n\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(\".el-cascader__suggestion-list\");\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;\n      }\n\n      if (tagWrapperEl) {\n        const {\n          offsetHeight\n        } = tagWrapperEl;\n        const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px` : `${inputInitialHeight}px`;\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n\n    const getCheckedNodes = leafOnly => {\n      var _a;\n\n      return (_a = panel.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n\n    const handleExpandChange = value => {\n      updatePopperPosition();\n      emit(\"expand-change\", value);\n    };\n\n    const handleComposition = event => {\n      var _a;\n\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n\n      if (event.type === \"compositionend\") {\n        isOnComposition.value = false;\n        nextTick(() => handleInput(text));\n      } else {\n        const lastCharacter = text[text.length - 1] || \"\";\n        isOnComposition.value = !isKorean(lastCharacter);\n      }\n    };\n\n    const handleKeyDown = e => {\n      if (isOnComposition.value) return;\n\n      switch (e.code) {\n        case EVENT_CODE.enter:\n          togglePopperVisible();\n          break;\n\n        case EVENT_CODE.down:\n          togglePopperVisible(true);\n          nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n\n    const handleClear = () => {\n      var _a;\n\n      (_a = panel.value) == null ? void 0 : _a.clearCheckedNodes();\n      togglePopperVisible(false);\n    };\n\n    const handleSuggestionClick = node => {\n      var _a, _b;\n\n      const {\n        checked\n      } = node;\n\n      if (multiple.value) {\n        (_a = panel.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = panel.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n\n    const handleSuggestionKeyDown = e => {\n      const target = e.target;\n      const {\n        code\n      } = e;\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            const distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, '.el-cascader__suggestion-item[tabindex=\"-1\"]'));\n            break;\n          }\n\n        case EVENT_CODE.enter:\n          target.click();\n          break;\n\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n\n    const handleDelete = () => {\n      const tags = presentTags.value;\n      const lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount) return;\n\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n\n    const handleFilter = debounce(() => {\n      const {\n        value\n      } = searchKeyword;\n      if (!value) return;\n      const passed = props.beforeFilter(value);\n\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {});\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n\n    const handleInput = (val, e) => {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing) return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n\n    watch(filtering, updatePopperPosition);\n    watch([checkedNodes, isDisabled], calculatePresentTags);\n    watch(presentTags, () => {\n      nextTick(() => updateStyle());\n    });\n    watch(presentText, val => inputValue.value = val, {\n      immediate: true\n    });\n    onMounted(() => {\n      var _a;\n\n      const inputEl = (_a = input.value) == null ? void 0 : _a.$el;\n      inputInitialHeight = (inputEl == null ? void 0 : inputEl.offsetHeight) || INPUT_HEIGHT_MAP[realSize.value] || DEFAULT_INPUT_HEIGHT;\n      addResizeListener(inputEl, updateStyle);\n    });\n    onBeforeUnmount(() => {\n      var _a;\n\n      removeResizeListener((_a = input.value) == null ? void 0 : _a.$el, updateStyle);\n    });\n    return {\n      popperOptions,\n      tooltipRef,\n      popperPaneRef,\n      input,\n      tagWrapper,\n      panel,\n      suggestionPanel,\n      popperVisible,\n      inputHover,\n      inputPlaceholder,\n      filtering,\n      presentText,\n      checkedValue,\n      inputValue,\n      searchInputValue,\n      presentTags,\n      suggestions,\n      isDisabled,\n      isOnComposition,\n      realSize,\n      tagSize,\n      multiple,\n      readonly,\n      clearBtnVisible,\n      compatTeleported,\n      t,\n      togglePopperVisible,\n      hideSuggestionPanel,\n      deleteTag,\n      focusFirstNode,\n      getCheckedNodes,\n      handleExpandChange,\n      handleKeyDown,\n      handleComposition,\n      handleClear,\n      handleSuggestionClick,\n      handleSuggestionKeyDown,\n      handleDelete,\n      handleInput\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  key: 0,\n  ref: \"tagWrapper\",\n  class: \"el-cascader__tags\"\n};\nconst _hoisted_2 = [\"placeholder\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  class: \"el-cascader__empty-text\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_circle_close = resolveComponent(\"circle-close\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _component_el_tag = resolveComponent(\"el-tag\");\n\n  const _component_el_cascader_panel = resolveComponent(\"el-cascader-panel\");\n\n  const _component_check = resolveComponent(\"check\");\n\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  const _directive_clickoutside = resolveDirective(\"clickoutside\");\n\n  return openBlock(), createBlock(_component_el_tooltip, {\n    ref: \"tooltipRef\",\n    visible: _ctx.popperVisible,\n    \"onUpdate:visible\": _cache[17] || (_cache[17] = $event => _ctx.popperVisible = $event),\n    teleported: _ctx.compatTeleported,\n    \"popper-class\": `el-cascader__dropdown ${_ctx.popperClass}`,\n    \"popper-options\": _ctx.popperOptions,\n    \"fallback-placements\": [\"bottom-start\", \"bottom\", \"top-start\", \"top\", \"right\", \"left\"],\n    \"stop-popper-mouse-event\": false,\n    \"gpu-acceleration\": false,\n    placement: \"bottom-start\",\n    transition: \"el-zoom-in-top\",\n    effect: \"light\",\n    pure: \"\",\n    persistent: \"\",\n    onHide: _ctx.hideSuggestionPanel\n  }, {\n    default: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", {\n      class: normalizeClass([\"el-cascader\", _ctx.realSize && `el-cascader--${_ctx.realSize}`, {\n        \"is-disabled\": _ctx.isDisabled\n      }, _ctx.$attrs.class]),\n      style: normalizeStyle(_ctx.$attrs.style),\n      onClick: _cache[11] || (_cache[11] = () => _ctx.togglePopperVisible(_ctx.readonly ? void 0 : true)),\n      onKeydown: _cache[12] || (_cache[12] = (...args) => _ctx.handleKeyDown && _ctx.handleKeyDown(...args)),\n      onMouseenter: _cache[13] || (_cache[13] = $event => _ctx.inputHover = true),\n      onMouseleave: _cache[14] || (_cache[14] = $event => _ctx.inputHover = false)\n    }, [createVNode(_component_el_input, {\n      ref: \"input\",\n      modelValue: _ctx.inputValue,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.inputValue = $event),\n      placeholder: _ctx.inputPlaceholder,\n      readonly: _ctx.readonly,\n      disabled: _ctx.isDisabled,\n      \"validate-event\": false,\n      size: _ctx.realSize,\n      class: normalizeClass({\n        \"is-focus\": _ctx.popperVisible\n      }),\n      onCompositionstart: _ctx.handleComposition,\n      onCompositionupdate: _ctx.handleComposition,\n      onCompositionend: _ctx.handleComposition,\n      onFocus: _cache[2] || (_cache[2] = e => _ctx.$emit(\"focus\", e)),\n      onBlur: _cache[3] || (_cache[3] = e => _ctx.$emit(\"blur\", e)),\n      onInput: _ctx.handleInput\n    }, {\n      suffix: withCtx(() => [_ctx.clearBtnVisible ? (openBlock(), createBlock(_component_el_icon, {\n        key: \"clear\",\n        class: \"el-input__icon icon-circle-close\",\n        onClick: withModifiers(_ctx.handleClear, [\"stop\"])\n      }, {\n        default: withCtx(() => [createVNode(_component_circle_close)]),\n        _: 1\n      }, 8, [\"onClick\"])) : (openBlock(), createBlock(_component_el_icon, {\n        key: \"arrow-down\",\n        class: normalizeClass([\"el-input__icon\", \"icon-arrow-down\", _ctx.popperVisible && \"is-reverse\"]),\n        onClick: _cache[0] || (_cache[0] = withModifiers($event => _ctx.togglePopperVisible(), [\"stop\"]))\n      }, {\n        default: withCtx(() => [createVNode(_component_arrow_down)]),\n        _: 1\n      }, 8, [\"class\"]))]),\n      _: 1\n    }, 8, [\"modelValue\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"class\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\", \"onInput\"]), _ctx.multiple ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.presentTags, tag => {\n      return openBlock(), createBlock(_component_el_tag, {\n        key: tag.key,\n        type: \"info\",\n        size: _ctx.tagSize,\n        hit: tag.hitState,\n        closable: tag.closable,\n        \"disable-transitions\": \"\",\n        onClose: $event => _ctx.deleteTag(tag)\n      }, {\n        default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag.text), 1)]),\n        _: 2\n      }, 1032, [\"size\", \"hit\", \"closable\", \"onClose\"]);\n    }), 128)), _ctx.filterable && !_ctx.isDisabled ? withDirectives((openBlock(), createElementBlock(\"input\", {\n      key: 0,\n      \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.searchInputValue = $event),\n      type: \"text\",\n      class: \"el-cascader__search-input\",\n      placeholder: _ctx.presentText ? \"\" : _ctx.inputPlaceholder,\n      onInput: _cache[5] || (_cache[5] = e => _ctx.handleInput(_ctx.searchInputValue, e)),\n      onClick: _cache[6] || (_cache[6] = withModifiers($event => _ctx.togglePopperVisible(true), [\"stop\"])),\n      onKeydown: _cache[7] || (_cache[7] = withKeys((...args) => _ctx.handleDelete && _ctx.handleDelete(...args), [\"delete\"])),\n      onCompositionstart: _cache[8] || (_cache[8] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n      onCompositionupdate: _cache[9] || (_cache[9] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n      onCompositionend: _cache[10] || (_cache[10] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args))\n    }, null, 40, _hoisted_2)), [[vModelText, _ctx.searchInputValue]]) : createCommentVNode(\"v-if\", true)], 512)) : createCommentVNode(\"v-if\", true)], 38)), [[_directive_clickoutside, () => _ctx.togglePopperVisible(false), _ctx.popperPaneRef]])]),\n    content: withCtx(() => [withDirectives(createVNode(_component_el_cascader_panel, {\n      ref: \"panel\",\n      modelValue: _ctx.checkedValue,\n      \"onUpdate:modelValue\": _cache[15] || (_cache[15] = $event => _ctx.checkedValue = $event),\n      options: _ctx.options,\n      props: _ctx.props,\n      border: false,\n      \"render-label\": _ctx.$slots.default,\n      onExpandChange: _ctx.handleExpandChange,\n      onClose: _cache[16] || (_cache[16] = $event => _ctx.$nextTick(() => _ctx.togglePopperVisible(false)))\n    }, null, 8, [\"modelValue\", \"options\", \"props\", \"render-label\", \"onExpandChange\"]), [[vShow, !_ctx.filtering]]), _ctx.filterable ? withDirectives((openBlock(), createBlock(_component_el_scrollbar, {\n      key: 0,\n      ref: \"suggestionPanel\",\n      tag: \"ul\",\n      class: \"el-cascader__suggestion-panel\",\n      \"view-class\": \"el-cascader__suggestion-list\",\n      onKeydown: _ctx.handleSuggestionKeyDown\n    }, {\n      default: withCtx(() => [_ctx.suggestions.length ? (openBlock(true), createElementBlock(Fragment, {\n        key: 0\n      }, renderList(_ctx.suggestions, item => {\n        return openBlock(), createElementBlock(\"li\", {\n          key: item.uid,\n          class: normalizeClass([\"el-cascader__suggestion-item\", item.checked && \"is-checked\"]),\n          tabindex: -1,\n          onClick: $event => _ctx.handleSuggestionClick(item)\n        }, [createElementVNode(\"span\", null, toDisplayString(item.text), 1), item.checked ? (openBlock(), createBlock(_component_el_icon, {\n          key: 0\n        }, {\n          default: withCtx(() => [createVNode(_component_check)]),\n          _: 1\n        })) : createCommentVNode(\"v-if\", true)], 10, _hoisted_3);\n      }), 128)) : renderSlot(_ctx.$slots, \"empty\", {\n        key: 1\n      }, () => [createElementVNode(\"li\", _hoisted_4, toDisplayString(_ctx.t(\"el.cascader.noMatch\")), 1)])]),\n      _: 3\n    }, 8, [\"onKeydown\"])), [[vShow, _ctx.filtering]]) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  }, 8, [\"visible\", \"teleported\", \"popper-class\", \"popper-options\", \"onHide\"]);\n}\n\nvar Cascader = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Cascader as default };","map":{"version":3,"mappings":"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","names":["DEFAULT_INPUT_HEIGHT","INPUT_HEIGHT_MAP","large","default","small","popperOptions","modifiers","name","enabled","phase","fn","state","modifiersData","placement","includes","arrow","x","requires","COMPONENT_NAME","_sfc_main","defineComponent","components","ElCascaderPanel","ElInput","ElTooltip","ElScrollbar","ElTag","ElIcon","CircleClose","Check","ArrowDown","directives","Clickoutside","props","CommonProps","size","type","String","validator","isValidComponentSize","placeholder","disabled","Boolean","clearable","filterable","filterMethod","Function","node","keyword","text","separator","showAllLevels","collapseTags","debounce","Number","beforeFilter","popperClass","popperAppendToBody","teleported","useTooltipContentProps","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","setup","emit","inputInitialHeight","pressDeleteCount","compatTeleported","useDeprecateAppendToBody","t","useLocale","elForm","inject","elFormKey","elFormItem","elFormItemKey","tooltipRef","ref","input","tagWrapper","panel","suggestionPanel","popperVisible","inputHover","filtering","inputValue","searchInputValue","presentTags","suggestions","isOnComposition","isDisabled","computed","inputPlaceholder","realSize","useSize","tagSize","value","multiple","readonly","searchKeyword","checkedNodes","_a","get","set","popperPaneRef","_b","_c","visible","updatePopperPosition","nextTick","key","calcText","hitState","closable","deleteTag","tags","genTag","rest","calculateSuggestions","tag","firstNode","updateStyle","suggestionPanelEl","suggestionList","offsetHeight","tagWrapperEl","inputInner","height","togglePopperVisible","e","preventDefault","EVENT_CODE","handleClear","checked","code","focusNode","target","lastTag","isPromise","passed","hideSuggestionPanel","val","watch","immediate","onMounted","addResizeListener","onBeforeUnmount","removeResizeListener","presentText","checkedValue","clearBtnVisible","focusFirstNode","getCheckedNodes","class","transition","effect","pure","onHide","withDirectives","_openBlock","_ctx","style","onClick","onKeydown","_cache","onMouseenter","$event","onMouseleave","modelValue","onCompositionupdate","onCompositionend","onFocus","suffix","_withCtx","createVNode","_","openBlock","hit","onClose","createElementVNode","onInput","onCompositionstart","_hoisted_2","createCommentVNode","content","onExpandChange"],"sources":["../../../../../../packages/components/cascader/src/index.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"tooltipRef\"\n    v-model:visible=\"popperVisible\"\n    :teleported=\"compatTeleported\"\n    :popper-class=\"`el-cascader__dropdown ${popperClass}`\"\n    :popper-options=\"popperOptions\"\n    :fallback-placements=\"[\n      'bottom-start',\n      'bottom',\n      'top-start',\n      'top',\n      'right',\n      'left',\n    ]\"\n    :stop-popper-mouse-event=\"false\"\n    :gpu-acceleration=\"false\"\n    placement=\"bottom-start\"\n    transition=\"el-zoom-in-top\"\n    effect=\"light\"\n    pure\n    persistent\n    @hide=\"hideSuggestionPanel\"\n  >\n    <template #default>\n      <div\n        v-clickoutside:[popperPaneRef]=\"() => togglePopperVisible(false)\"\n        :class=\"[\n          'el-cascader',\n          realSize && `el-cascader--${realSize}`,\n          { 'is-disabled': isDisabled },\n          $attrs.class,\n        ]\"\n        :style=\"$attrs.style\"\n        @click=\"() => togglePopperVisible(readonly ? undefined : true)\"\n        @keydown=\"handleKeyDown\"\n        @mouseenter=\"inputHover = true\"\n        @mouseleave=\"inputHover = false\"\n      >\n        <el-input\n          ref=\"input\"\n          v-model=\"inputValue\"\n          :placeholder=\"inputPlaceholder\"\n          :readonly=\"readonly\"\n          :disabled=\"isDisabled\"\n          :validate-event=\"false\"\n          :size=\"realSize\"\n          :class=\"{ 'is-focus': popperVisible }\"\n          @compositionstart=\"handleComposition\"\n          @compositionupdate=\"handleComposition\"\n          @compositionend=\"handleComposition\"\n          @focus=\"(e) => $emit('focus', e)\"\n          @blur=\"(e) => $emit('blur', e)\"\n          @input=\"handleInput\"\n        >\n          <template #suffix>\n            <el-icon\n              v-if=\"clearBtnVisible\"\n              key=\"clear\"\n              class=\"el-input__icon icon-circle-close\"\n              @click.stop=\"handleClear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-else\n              key=\"arrow-down\"\n              :class=\"[\n                'el-input__icon',\n                'icon-arrow-down',\n                popperVisible && 'is-reverse',\n              ]\"\n              @click.stop=\"togglePopperVisible()\"\n            >\n              <arrow-down />\n            </el-icon>\n          </template>\n        </el-input>\n\n        <div v-if=\"multiple\" ref=\"tagWrapper\" class=\"el-cascader__tags\">\n          <el-tag\n            v-for=\"tag in presentTags\"\n            :key=\"tag.key\"\n            type=\"info\"\n            :size=\"tagSize\"\n            :hit=\"tag.hitState\"\n            :closable=\"tag.closable\"\n            disable-transitions\n            @close=\"deleteTag(tag)\"\n          >\n            <span>{{ tag.text }}</span>\n          </el-tag>\n          <input\n            v-if=\"filterable && !isDisabled\"\n            v-model=\"searchInputValue\"\n            type=\"text\"\n            class=\"el-cascader__search-input\"\n            :placeholder=\"presentText ? '' : inputPlaceholder\"\n            @input=\"(e) => handleInput(searchInputValue, e)\"\n            @click.stop=\"togglePopperVisible(true)\"\n            @keydown.delete=\"handleDelete\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n          />\n        </div>\n      </div>\n    </template>\n\n    <template #content>\n      <el-cascader-panel\n        v-show=\"!filtering\"\n        ref=\"panel\"\n        v-model=\"checkedValue\"\n        :options=\"options\"\n        :props=\"props\"\n        :border=\"false\"\n        :render-label=\"$slots.default\"\n        @expand-change=\"handleExpandChange\"\n        @close=\"$nextTick(() => togglePopperVisible(false))\"\n      />\n      <el-scrollbar\n        v-if=\"filterable\"\n        v-show=\"filtering\"\n        ref=\"suggestionPanel\"\n        tag=\"ul\"\n        class=\"el-cascader__suggestion-panel\"\n        view-class=\"el-cascader__suggestion-list\"\n        @keydown=\"handleSuggestionKeyDown\"\n      >\n        <template v-if=\"suggestions.length\">\n          <li\n            v-for=\"item in suggestions\"\n            :key=\"item.uid\"\n            :class=\"[\n              'el-cascader__suggestion-item',\n              item.checked && 'is-checked',\n            ]\"\n            :tabindex=\"-1\"\n            @click=\"handleSuggestionClick(item)\"\n          >\n            <span>{{ item.text }}</span>\n            <el-icon v-if=\"item.checked\"><check /></el-icon>\n          </li>\n        </template>\n        <slot v-else name=\"empty\">\n          <li class=\"el-cascader__empty-text\">\n            {{ t('el.cascader.noMatch') }}\n          </li>\n        </slot>\n      </el-scrollbar>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onMounted,\n  onBeforeUnmount,\n  ref,\n  watch,\n} from 'vue'\nimport { isPromise } from '@vue/shared'\nimport { debounce } from 'lodash-unified'\n\nimport { isClient } from '@vueuse/core'\nimport ElCascaderPanel, {\n  CommonProps,\n} from '@element-plus/components/cascader-panel'\nimport ElInput from '@element-plus/components/input'\nimport ElTooltip, {\n  useTooltipContentProps,\n} from '@element-plus/components/tooltip'\nimport { useDeprecateAppendToBody } from '@element-plus/components/popper'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\n\nimport { elFormKey, elFormItemKey } from '@element-plus/tokens'\nimport { ClickOutside as Clickoutside } from '@element-plus/directives'\nimport { useLocale, useSize } from '@element-plus/hooks'\n\nimport {\n  focusNode,\n  getSibling,\n  addResizeListener,\n  removeResizeListener,\n  isValidComponentSize,\n  isKorean,\n} from '@element-plus/utils'\nimport {\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n  CHANGE_EVENT,\n} from '@element-plus/constants'\nimport { CircleClose, Check, ArrowDown } from '@element-plus/icons-vue'\n\nimport type { Options } from '@element-plus/components/popper'\nimport type { ComputedRef, PropType, Ref } from 'vue'\nimport type { ElFormContext, ElFormItemContext } from '@element-plus/tokens'\nimport type {\n  CascaderValue,\n  CascaderNode,\n  Tag,\n} from '@element-plus/components/cascader-panel'\nimport type { ComponentSize } from '@element-plus/constants'\n\ntype cascaderPanelType = InstanceType<typeof ElCascaderPanel>\ntype tooltipType = InstanceType<typeof ElTooltip>\ntype inputType = InstanceType<typeof ElInput>\ntype suggestionPanelType = InstanceType<typeof ElScrollbar>\n\nconst DEFAULT_INPUT_HEIGHT = 40\n\nconst INPUT_HEIGHT_MAP = {\n  large: 36,\n  default: 32,\n  small: 28,\n}\n\nconst popperOptions: Partial<Options> = {\n  modifiers: [\n    {\n      name: 'arrowPosition',\n      enabled: true,\n      phase: 'main',\n      fn: ({ state }) => {\n        const { modifiersData, placement } = state as any\n        if (['right', 'left', 'bottom', 'top'].includes(placement)) return\n        modifiersData.arrow.x = 35\n      },\n      requires: ['arrow'],\n    },\n  ],\n}\nconst COMPONENT_NAME = 'ElCascader'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n\n  components: {\n    ElCascaderPanel,\n    ElInput,\n    ElTooltip,\n    ElScrollbar,\n    ElTag,\n    ElIcon,\n    CircleClose,\n    Check,\n    ArrowDown,\n  },\n\n  directives: {\n    Clickoutside,\n  },\n\n  props: {\n    ...CommonProps,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    placeholder: {\n      type: String,\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    filterMethod: {\n      type: Function as PropType<\n        (node: CascaderNode, keyword: string) => boolean\n      >,\n      default: (node: CascaderNode, keyword: string) =>\n        node.text.includes(keyword),\n    },\n    separator: {\n      type: String,\n      default: ' / ',\n    },\n    showAllLevels: {\n      type: Boolean,\n      default: true,\n    },\n    collapseTags: Boolean,\n    debounce: {\n      type: Number,\n      default: 300,\n    },\n    beforeFilter: {\n      type: Function as PropType<(value: string) => boolean | Promise<any>>,\n      default: () => true,\n    },\n    popperClass: {\n      type: String,\n      default: '',\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      default: undefined,\n    },\n    teleported: useTooltipContentProps.teleported,\n  },\n\n  emits: [\n    UPDATE_MODEL_EVENT,\n    CHANGE_EVENT,\n    'focus',\n    'blur',\n    'visible-change',\n    'expand-change',\n    'remove-tag',\n  ],\n\n  setup(props, { emit }) {\n    let inputInitialHeight = 0\n    let pressDeleteCount = 0\n\n    const { compatTeleported } = useDeprecateAppendToBody(\n      COMPONENT_NAME,\n      'popperAppendToBody'\n    )\n    const { t } = useLocale()\n    const elForm = inject(elFormKey, {} as ElFormContext)\n    const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n\n    const tooltipRef: Ref<tooltipType | null> = ref(null)\n    const input: Ref<inputType | null> = ref(null)\n    const tagWrapper = ref(null)\n    const panel: Ref<cascaderPanelType | null> = ref(null)\n    const suggestionPanel: Ref<suggestionPanelType | null> = ref(null)\n    const popperVisible = ref(false)\n    const inputHover = ref(false)\n    const filtering = ref(false)\n    const inputValue = ref('')\n    const searchInputValue = ref('')\n    const presentTags: Ref<Tag[]> = ref([])\n    const suggestions: Ref<CascaderNode[]> = ref([])\n    const isOnComposition = ref(false)\n\n    const isDisabled = computed(() => props.disabled || elForm.disabled)\n    const inputPlaceholder = computed(\n      () => props.placeholder || t('el.cascader.placeholder')\n    )\n    const realSize = useSize()\n    const tagSize = computed(() =>\n      ['small'].includes(realSize.value) ? 'small' : 'default'\n    )\n    const multiple = computed(() => !!props.props.multiple)\n    const readonly = computed(() => !props.filterable || multiple.value)\n    const searchKeyword = computed(() =>\n      multiple.value ? searchInputValue.value : inputValue.value\n    )\n    const checkedNodes: ComputedRef<CascaderNode[]> = computed(\n      () => panel.value?.checkedNodes || []\n    )\n    const clearBtnVisible = computed(() => {\n      if (\n        !props.clearable ||\n        isDisabled.value ||\n        filtering.value ||\n        !inputHover.value\n      )\n        return false\n\n      return !!checkedNodes.value.length\n    })\n    const presentText = computed(() => {\n      const { showAllLevels, separator } = props\n      const nodes = checkedNodes.value\n      return nodes.length\n        ? multiple.value\n          ? ' '\n          : nodes[0].calcText(showAllLevels, separator)\n        : ''\n    })\n\n    const checkedValue = computed<CascaderValue>({\n      get() {\n        return props.modelValue\n      },\n      set(val) {\n        emit(UPDATE_MODEL_EVENT, val)\n        emit(CHANGE_EVENT, val)\n        elFormItem.validate?.('change')\n      },\n    })\n\n    const popperPaneRef = computed(() => {\n      return tooltipRef.value?.popperRef?.contentRef\n    })\n\n    const togglePopperVisible = (visible?: boolean) => {\n      if (isDisabled.value) return\n\n      visible = visible ?? !popperVisible.value\n\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible\n        input.value?.input?.setAttribute('aria-expanded', `${visible}`)\n\n        if (visible) {\n          updatePopperPosition()\n          nextTick(panel.value?.scrollToExpandingNode)\n        } else if (props.filterable) {\n          const { value } = presentText\n          inputValue.value = value\n          searchInputValue.value = value\n        }\n\n        emit('visible-change', visible)\n      }\n    }\n\n    const updatePopperPosition = () => {\n      nextTick(() => {\n        tooltipRef.value?.updatePopper()\n      })\n    }\n\n    const hideSuggestionPanel = () => {\n      filtering.value = false\n    }\n\n    const genTag = (node: CascaderNode): Tag => {\n      const { showAllLevels, separator } = props\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n      }\n    }\n\n    const deleteTag = (tag: Tag) => {\n      const node = tag.node as CascaderNode\n      node.doCheck(false)\n      panel.value?.calculateCheckedValue()\n      emit('remove-tag', node.valueByOption)\n    }\n\n    const calculatePresentTags = () => {\n      if (!multiple.value) return\n\n      const nodes = checkedNodes.value\n      const tags: Tag[] = []\n\n      if (nodes.length) {\n        const [first, ...rest] = nodes\n        const restCount = rest.length\n\n        tags.push(genTag(first))\n\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false,\n            })\n          } else {\n            rest.forEach((node) => tags.push(genTag(node)))\n          }\n        }\n      }\n\n      presentTags.value = tags\n    }\n\n    const calculateSuggestions = () => {\n      const { filterMethod, showAllLevels, separator } = props\n      const res = panel.value\n        ?.getFlattedNodes(!props.props.checkStrictly)\n        ?.filter((node) => {\n          if (node.isDisabled) return false\n          node.calcText(showAllLevels, separator)\n          return filterMethod(node, searchKeyword.value)\n        })\n\n      if (multiple.value) {\n        presentTags.value.forEach((tag) => {\n          tag.hitState = false\n        })\n      }\n\n      filtering.value = true\n      suggestions.value = res!\n      updatePopperPosition()\n    }\n\n    const focusFirstNode = () => {\n      let firstNode!: HTMLElement\n\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(\n          '.el-cascader__suggestion-item'\n        )\n      } else {\n        firstNode = panel.value?.$el.querySelector(\n          '.el-cascader-node[tabindex=\"-1\"]'\n        )\n      }\n\n      if (firstNode) {\n        firstNode.focus()\n        !filtering.value && firstNode.click()\n      }\n    }\n\n    const updateStyle = () => {\n      const inputInner = input.value?.input\n      const tagWrapperEl = tagWrapper.value\n      const suggestionPanelEl = suggestionPanel.value?.$el\n\n      if (!isClient || !inputInner) return\n\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(\n          '.el-cascader__suggestion-list'\n        )\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`\n      }\n\n      if (tagWrapperEl) {\n        const { offsetHeight } = tagWrapperEl\n        const height =\n          presentTags.value.length > 0\n            ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px`\n            : `${inputInitialHeight}px`\n        inputInner.style.height = height\n        updatePopperPosition()\n      }\n    }\n\n    const getCheckedNodes = (leafOnly: boolean) => {\n      return panel.value?.getCheckedNodes(leafOnly)\n    }\n\n    const handleExpandChange = (value: CascaderValue) => {\n      updatePopperPosition()\n      emit('expand-change', value)\n    }\n\n    const handleComposition = (event: CompositionEvent) => {\n      const text = (event.target as HTMLInputElement)?.value\n      if (event.type === 'compositionend') {\n        isOnComposition.value = false\n        nextTick(() => handleInput(text))\n      } else {\n        const lastCharacter = text[text.length - 1] || ''\n        isOnComposition.value = !isKorean(lastCharacter)\n      }\n    }\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isOnComposition.value) return\n\n      switch (e.code) {\n        case EVENT_CODE.enter:\n          togglePopperVisible()\n          break\n        case EVENT_CODE.down:\n          togglePopperVisible(true)\n          nextTick(focusFirstNode)\n          e.preventDefault()\n          break\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          togglePopperVisible(false)\n          break\n      }\n    }\n\n    const handleClear = () => {\n      panel.value?.clearCheckedNodes()\n      togglePopperVisible(false)\n    }\n\n    const handleSuggestionClick = (node: CascaderNode) => {\n      const { checked } = node\n\n      if (multiple.value) {\n        panel.value?.handleCheckChange(node, !checked, false)\n      } else {\n        !checked && panel.value?.handleCheckChange(node, true, false)\n        togglePopperVisible(false)\n      }\n    }\n\n    const handleSuggestionKeyDown = (e: KeyboardEvent) => {\n      const target = e.target as HTMLElement\n      const { code } = e\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down: {\n          const distance = code === EVENT_CODE.up ? -1 : 1\n          focusNode(\n            getSibling(\n              target,\n              distance,\n              '.el-cascader__suggestion-item[tabindex=\"-1\"]'\n            )\n          )\n          break\n        }\n        case EVENT_CODE.enter:\n          target.click()\n          break\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          togglePopperVisible(false)\n          break\n      }\n    }\n\n    const handleDelete = () => {\n      const tags = presentTags.value\n      const lastTag = tags[tags.length - 1]\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1\n\n      if (!lastTag || !pressDeleteCount) return\n\n      if (lastTag.hitState) {\n        deleteTag(lastTag)\n      } else {\n        lastTag.hitState = true\n      }\n    }\n\n    const handleFilter = debounce(() => {\n      const { value } = searchKeyword\n\n      if (!value) return\n\n      const passed = props.beforeFilter(value)\n\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {\n          /* prevent log error */\n        })\n      } else if (passed !== false) {\n        calculateSuggestions()\n      } else {\n        hideSuggestionPanel()\n      }\n    }, props.debounce)\n\n    const handleInput = (val: string, e?: KeyboardEvent) => {\n      !popperVisible.value && togglePopperVisible(true)\n\n      if (e?.isComposing) return\n\n      val ? handleFilter() : hideSuggestionPanel()\n    }\n\n    watch(filtering, updatePopperPosition)\n\n    watch([checkedNodes, isDisabled], calculatePresentTags)\n\n    watch(presentTags, () => {\n      nextTick(() => updateStyle())\n    })\n\n    watch(presentText, (val) => (inputValue.value = val), { immediate: true })\n\n    onMounted(() => {\n      const inputEl = input.value?.$el\n      inputInitialHeight =\n        inputEl?.offsetHeight ||\n        INPUT_HEIGHT_MAP[realSize.value] ||\n        DEFAULT_INPUT_HEIGHT\n      addResizeListener(inputEl, updateStyle)\n    })\n\n    onBeforeUnmount(() => {\n      removeResizeListener(input.value?.$el, updateStyle)\n    })\n\n    return {\n      popperOptions,\n      tooltipRef,\n      popperPaneRef,\n      input,\n      tagWrapper,\n      panel,\n      suggestionPanel,\n      popperVisible,\n      inputHover,\n      inputPlaceholder,\n      filtering,\n      presentText,\n      checkedValue,\n      inputValue,\n      searchInputValue,\n      presentTags,\n      suggestions,\n      isDisabled,\n      isOnComposition,\n      realSize,\n      tagSize,\n      multiple,\n      readonly,\n      clearBtnVisible,\n      // deprecation in ver 2.1.0\n      compatTeleported,\n\n      t,\n      togglePopperVisible,\n      hideSuggestionPanel,\n      deleteTag,\n      focusFirstNode,\n      getCheckedNodes,\n      handleExpandChange,\n      handleKeyDown,\n      handleComposition,\n      handleClear,\n      handleSuggestionClick,\n      handleSuggestionKeyDown,\n      handleDelete,\n      handleInput,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}