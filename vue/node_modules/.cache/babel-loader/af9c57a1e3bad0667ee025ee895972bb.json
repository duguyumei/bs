{"ast":null,"code":"import { ref, watch } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { genFileId } from './upload.mjs';\nimport { debugWarn, throwError } from '../../../utils/error.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nconst SCOPE = \"ElUpload\";\n\nconst revokeObjectURL = file => {\n  var _a;\n\n  if ((_a = file.url) == null ? void 0 : _a.startsWith(\"blob:\")) {\n    URL.revokeObjectURL(file.url);\n  }\n};\n\nconst useHandlers = (props, uploadRef) => {\n  const uploadFiles = ref([]);\n\n  const getFile = rawFile => uploadFiles.value.find(file => file.uid === rawFile.uid);\n\n  function abort(file) {\n    var _a;\n\n    (_a = uploadRef.value) == null ? void 0 : _a.abort(file);\n  }\n\n  function clearFiles(states = [\"ready\", \"uploading\", \"success\", \"fail\"]) {\n    uploadFiles.value = uploadFiles.value.filter(row => !states.includes(row.status));\n  }\n\n  const handleError = (err, rawFile) => {\n    const file = getFile(rawFile);\n    if (!file) return;\n    file.status = \"fail\";\n    uploadFiles.value.splice(uploadFiles.value.indexOf(file), 1);\n    props.onError(err, file, uploadFiles.value);\n    props.onChange(file, uploadFiles.value);\n  };\n\n  const handleProgress = (evt, rawFile) => {\n    const file = getFile(rawFile);\n    if (!file) return;\n    props.onProgress(evt, file, uploadFiles.value);\n    file.status = \"uploading\";\n    file.percentage = evt.percent;\n  };\n\n  const handleSuccess = (response, rawFile) => {\n    const file = getFile(rawFile);\n    if (!file) return;\n    file.status = \"success\";\n    file.response = response;\n    props.onSuccess(response, file, uploadFiles.value);\n    props.onChange(file, uploadFiles.value);\n  };\n\n  const handleStart = file => {\n    const uploadFile = {\n      name: file.name,\n      percentage: 0,\n      status: \"ready\",\n      size: file.size,\n      raw: file,\n      uid: file.uid\n    };\n\n    if (props.listType === \"picture-card\" || props.listType === \"picture\") {\n      try {\n        uploadFile.url = URL.createObjectURL(file);\n      } catch (err) {\n        debugWarn(SCOPE, err.message);\n        props.onError(err, uploadFile, uploadFiles.value);\n      }\n    }\n\n    uploadFiles.value.push(uploadFile);\n    props.onChange(uploadFile, uploadFiles.value);\n  };\n\n  const handleRemove = async (file, rawFile) => {\n    if (rawFile) {\n      useDeprecated({\n        scope: SCOPE,\n        from: \"handleRemove second argument\",\n        version: \"2.2\",\n        replacement: \"first argument `file`\",\n        ref: \"https://element-plus.org/en-US/component/upload.html#methods\"\n      }, true);\n    }\n\n    const _file = rawFile || file;\n\n    const uploadFile = _file instanceof File ? getFile(_file) : _file;\n    if (!uploadFile) throwError(SCOPE, \"file to be removed not found\");\n\n    const doRemove = file2 => {\n      abort(file2);\n      const fileList = uploadFiles.value;\n      fileList.splice(fileList.indexOf(file2), 1);\n      props.onRemove(file2, fileList);\n      revokeObjectURL(file2);\n    };\n\n    if (props.beforeRemove) {\n      const before = await props.beforeRemove(uploadFile, uploadFiles.value);\n      if (before !== false) doRemove(uploadFile);\n    } else {\n      doRemove(uploadFile);\n    }\n  };\n\n  function submit() {\n    uploadFiles.value.filter(({\n      status\n    }) => status === \"ready\").forEach(({\n      raw\n    }) => {\n      var _a;\n\n      return (_a = uploadRef.value) == null ? void 0 : _a.upload(raw);\n    });\n  }\n\n  watch(() => props.listType, val => {\n    if (val !== \"picture-card\" && val !== \"picture\") {\n      return;\n    }\n\n    uploadFiles.value = uploadFiles.value.map(file => {\n      const {\n        raw,\n        url\n      } = file;\n\n      if (!url && raw) {\n        try {\n          file.url = URL.createObjectURL(raw);\n        } catch (err) {\n          props.onError(err, file, uploadFiles.value);\n        }\n      }\n\n      return file;\n    });\n  });\n  watch(() => props.fileList, fileList => {\n    for (const file of fileList) {\n      file.uid = genFileId();\n      file.status || (file.status = \"success\");\n    }\n  }, {\n    immediate: true\n  });\n  return {\n    abort,\n    clearFiles,\n    handleError,\n    handleProgress,\n    handleStart,\n    handleSuccess,\n    handleRemove,\n    submit,\n    uploadFiles\n  };\n};\n\nexport { useHandlers };","map":{"version":3,"mappings":"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","names":["SCOPE","revokeObjectURL","file","_a","url","startsWith","URL","useHandlers","props","uploadRef","uploadFiles","ref","getFile","rawFile","value","find","uid","abort","clearFiles","states","filter","row","includes","status","handleError","err","splice","indexOf","onError","onChange","handleProgress","evt","onProgress","percentage","percent","handleSuccess","response","onSuccess","handleStart","uploadFile","name","size","raw","listType","createObjectURL","debugWarn","message","push","handleRemove","useDeprecated","scope","from","version","replacement","_file","File","throwError","doRemove","file2","fileList","onRemove","beforeRemove","before","submit","forEach","upload","watch","val","map","genFileId","immediate"],"sources":["../../../../../../packages/components/upload/src/use-handlers.ts"],"sourcesContent":["import { ref, watch } from 'vue'\nimport { debugWarn, throwError } from '@element-plus/utils'\nimport { useDeprecated } from '@element-plus/hooks'\nimport { genFileId } from './upload'\nimport type { ShallowRef } from 'vue'\nimport type {\n  UploadContentProps,\n  UploadContentInstance,\n} from './upload-content'\nimport type {\n  UploadRawFile,\n  UploadFile,\n  UploadProps,\n  UploadStatus,\n  UploadFiles,\n} from './upload'\n\nconst SCOPE = 'ElUpload'\n\nconst revokeObjectURL = (file: UploadFile) => {\n  if (file.url?.startsWith('blob:')) {\n    URL.revokeObjectURL(file.url)\n  }\n}\n\nexport const useHandlers = (\n  props: UploadProps,\n  uploadRef: ShallowRef<UploadContentInstance | undefined>\n) => {\n  const uploadFiles = ref<UploadFiles>([])\n\n  const getFile = (rawFile: UploadRawFile) =>\n    uploadFiles.value.find((file) => file.uid === rawFile.uid)\n\n  function abort(file: UploadFile) {\n    uploadRef.value?.abort(file)\n  }\n\n  function clearFiles(\n    /** @default ['ready', 'uploading', 'success', 'fail'] */\n    states: UploadStatus[] = ['ready', 'uploading', 'success', 'fail']\n  ) {\n    uploadFiles.value = uploadFiles.value.filter(\n      (row) => !states.includes(row.status)\n    )\n  }\n\n  const handleError: UploadContentProps['onError'] = (err, rawFile) => {\n    const file = getFile(rawFile)\n    if (!file) return\n\n    file.status = 'fail'\n    uploadFiles.value.splice(uploadFiles.value.indexOf(file), 1)\n    props.onError(err, file, uploadFiles.value)\n    props.onChange(file, uploadFiles.value)\n  }\n\n  const handleProgress: UploadContentProps['onProgress'] = (evt, rawFile) => {\n    const file = getFile(rawFile)\n    if (!file) return\n\n    props.onProgress(evt, file, uploadFiles.value)\n    file.status = 'uploading'\n    file.percentage = evt.percent\n  }\n\n  const handleSuccess: UploadContentProps['onSuccess'] = (\n    response,\n    rawFile\n  ) => {\n    const file = getFile(rawFile)\n    if (!file) return\n\n    file.status = 'success'\n    file.response = response\n    props.onSuccess(response, file, uploadFiles.value)\n    props.onChange(file, uploadFiles.value)\n  }\n\n  const handleStart: UploadContentProps['onStart'] = (file) => {\n    const uploadFile: UploadFile = {\n      name: file.name,\n      percentage: 0,\n      status: 'ready',\n      size: file.size,\n      raw: file,\n      uid: file.uid,\n    }\n    if (props.listType === 'picture-card' || props.listType === 'picture') {\n      try {\n        uploadFile.url = URL.createObjectURL(file)\n      } catch (err: unknown) {\n        debugWarn(SCOPE, (err as Error).message)\n        props.onError(err as Error, uploadFile, uploadFiles.value)\n      }\n    }\n    uploadFiles.value.push(uploadFile)\n    props.onChange(uploadFile, uploadFiles.value)\n  }\n\n  const handleRemove: UploadContentProps['onRemove'] = async (\n    file,\n    rawFile // TODO: deprecated in 2.2\n  ): Promise<void> => {\n    if (rawFile) {\n      useDeprecated(\n        {\n          scope: SCOPE,\n          from: 'handleRemove second argument',\n          version: '2.2',\n          replacement: 'first argument `file`',\n          ref: 'https://element-plus.org/en-US/component/upload.html#methods',\n        },\n        true\n      )\n    }\n\n    const _file = rawFile || file\n    const uploadFile = _file instanceof File ? getFile(_file) : _file\n    if (!uploadFile) throwError(SCOPE, 'file to be removed not found')\n\n    const doRemove = (file: UploadFile) => {\n      abort(file)\n      const fileList = uploadFiles.value\n      fileList.splice(fileList.indexOf(file), 1)\n      props.onRemove(file, fileList)\n      revokeObjectURL(file)\n    }\n\n    if (props.beforeRemove) {\n      const before = await props.beforeRemove(uploadFile, uploadFiles.value)\n      if (before !== false) doRemove(uploadFile)\n    } else {\n      doRemove(uploadFile)\n    }\n  }\n\n  function submit() {\n    uploadFiles.value\n      .filter(({ status }) => status === 'ready')\n      .forEach(({ raw }) => uploadRef.value?.upload(raw))\n  }\n\n  watch(\n    () => props.listType,\n    (val) => {\n      if (val !== 'picture-card' && val !== 'picture') {\n        return\n      }\n\n      uploadFiles.value = uploadFiles.value.map((file) => {\n        const { raw, url } = file\n        if (!url && raw) {\n          try {\n            file.url = URL.createObjectURL(raw)\n          } catch (err: unknown) {\n            props.onError(err as Error, file, uploadFiles.value)\n          }\n        }\n        return file\n      })\n    }\n  )\n\n  watch(\n    () => props.fileList,\n    (fileList) => {\n      for (const file of fileList) {\n        file.uid = genFileId()\n        file.status ||= 'success'\n      }\n    },\n    { immediate: true }\n  )\n\n  return {\n    abort,\n    clearFiles,\n    handleError,\n    handleProgress,\n    handleStart,\n    handleSuccess,\n    handleRemove,\n    submit,\n    uploadFiles,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}