{"ast":null,"code":"import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, renderSlot, normalizeProps, guardReactiveProps, toDisplayString, createCommentVNode, createBlock, withCtx, resolveDynamicComponent } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleCheck, CircleClose, Check, Close, WarningFilled } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport { progressProps } from './progress.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElProgress\",\n  components: {\n    ElIcon,\n    CircleCheck,\n    CircleClose,\n    Check,\n    Close,\n    WarningFilled\n  },\n  props: progressProps,\n\n  setup(props) {\n    const ns = useNamespace(\"progress\");\n    const barStyle = computed(() => ({\n      width: `${props.percentage}%`,\n      animationDuration: `${props.duration}s`,\n      backgroundColor: getCurrentColor(props.percentage)\n    }));\n    const relativeStrokeWidth = computed(() => (props.strokeWidth / props.width * 100).toFixed(1));\n    const radius = computed(() => {\n      if (props.type === \"circle\" || props.type === \"dashboard\") {\n        return parseInt(`${50 - parseFloat(relativeStrokeWidth.value) / 2}`, 10);\n      } else {\n        return 0;\n      }\n    });\n    const trackPath = computed(() => {\n      const r = radius.value;\n      const isDashboard = props.type === \"dashboard\";\n      return `\n          M 50 50\n          m 0 ${isDashboard ? \"\" : \"-\"}${r}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? \"-\" : \"\"}${r * 2}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? \"\" : \"-\"}${r * 2}\n          `;\n    });\n    const perimeter = computed(() => 2 * Math.PI * radius.value);\n    const rate = computed(() => props.type === \"dashboard\" ? 0.75 : 1);\n    const strokeDashoffset = computed(() => {\n      const offset = -1 * perimeter.value * (1 - rate.value) / 2;\n      return `${offset}px`;\n    });\n    const trailPathStyle = computed(() => ({\n      strokeDasharray: `${perimeter.value * rate.value}px, ${perimeter.value}px`,\n      strokeDashoffset: strokeDashoffset.value\n    }));\n    const circlePathStyle = computed(() => ({\n      strokeDasharray: `${perimeter.value * rate.value * (props.percentage / 100)}px, ${perimeter.value}px`,\n      strokeDashoffset: strokeDashoffset.value,\n      transition: \"stroke-dasharray 0.6s ease 0s, stroke 0.6s ease\"\n    }));\n    const stroke = computed(() => {\n      let ret;\n\n      if (props.color) {\n        ret = getCurrentColor(props.percentage);\n      } else {\n        switch (props.status) {\n          case \"success\":\n            ret = \"#13ce66\";\n            break;\n\n          case \"exception\":\n            ret = \"#ff4949\";\n            break;\n\n          case \"warning\":\n            ret = \"#e6a23c\";\n            break;\n\n          default:\n            ret = \"#20a0ff\";\n        }\n      }\n\n      return ret;\n    });\n    const statusIcon = computed(() => {\n      if (props.status === \"warning\") {\n        return WarningFilled;\n      }\n\n      if (props.type === \"line\") {\n        return props.status === \"success\" ? CircleCheck : CircleClose;\n      } else {\n        return props.status === \"success\" ? Check : Close;\n      }\n    });\n    const progressTextSize = computed(() => {\n      return props.type === \"line\" ? 12 + props.strokeWidth * 0.4 : props.width * 0.111111 + 2;\n    });\n    const content = computed(() => props.format(props.percentage));\n\n    const getCurrentColor = percentage => {\n      var _a;\n\n      const {\n        color\n      } = props;\n\n      if (typeof color === \"function\") {\n        return color(percentage);\n      } else if (typeof color === \"string\") {\n        return color;\n      } else {\n        const span = 100 / color.length;\n        const seriesColors = color.map((seriesColor, index) => {\n          if (typeof seriesColor === \"string\") {\n            return {\n              color: seriesColor,\n              percentage: (index + 1) * span\n            };\n          }\n\n          return seriesColor;\n        });\n        const colors = seriesColors.sort((a, b) => a.percentage - b.percentage);\n\n        for (const color2 of colors) {\n          if (color2.percentage > percentage) return color2.color;\n        }\n\n        return (_a = colors[colors.length - 1]) == null ? void 0 : _a.color;\n      }\n    };\n\n    const slotData = computed(() => {\n      return {\n        percentage: props.percentage\n      };\n    });\n    return {\n      ns,\n      barStyle,\n      relativeStrokeWidth,\n      radius,\n      trackPath,\n      perimeter,\n      rate,\n      strokeDashoffset,\n      trailPathStyle,\n      circlePathStyle,\n      stroke,\n      statusIcon,\n      progressTextSize,\n      content,\n      slotData\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-valuenow\"];\nconst _hoisted_2 = {\n  viewBox: \"0 0 100 100\"\n};\nconst _hoisted_3 = [\"d\", \"stroke-width\"];\nconst _hoisted_4 = [\"d\", \"stroke\", \"stroke-linecap\", \"stroke-width\"];\nconst _hoisted_5 = {\n  key: 0\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.type), _ctx.ns.is(_ctx.status), {\n      [_ctx.ns.m(\"without-text\")]: !_ctx.showText,\n      [_ctx.ns.m(\"text-inside\")]: _ctx.textInside\n    }]),\n    role: \"progressbar\",\n    \"aria-valuenow\": _ctx.percentage,\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\"\n  }, [_ctx.type === \"line\" ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.b(\"bar\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.be(\"bar\", \"outer\")),\n    style: normalizeStyle({\n      height: `${_ctx.strokeWidth}px`\n    })\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.be(\"bar\", \"inner\"), {\n      [_ctx.ns.bem(\"bar\", \"inner\", \"indeterminate\")]: _ctx.indeterminate\n    }]),\n    style: normalizeStyle(_ctx.barStyle)\n  }, [(_ctx.showText || _ctx.$slots.default) && _ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.be(\"bar\", \"innerText\"))\n  }, [renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps(_ctx.slotData)), () => [createElementVNode(\"span\", null, toDisplayString(_ctx.content), 1)])], 2)) : createCommentVNode(\"v-if\", true)], 6)], 6)], 2)) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.b(\"circle\")),\n    style: normalizeStyle({\n      height: `${_ctx.width}px`,\n      width: `${_ctx.width}px`\n    })\n  }, [(openBlock(), createElementBlock(\"svg\", _hoisted_2, [createElementVNode(\"path\", {\n    class: normalizeClass(_ctx.ns.be(\"circle\", \"track\")),\n    d: _ctx.trackPath,\n    stroke: \"#e5e9f2\",\n    \"stroke-width\": _ctx.relativeStrokeWidth,\n    fill: \"none\",\n    style: normalizeStyle(_ctx.trailPathStyle)\n  }, null, 14, _hoisted_3), createElementVNode(\"path\", {\n    class: normalizeClass(_ctx.ns.be(\"circle\", \"path\")),\n    d: _ctx.trackPath,\n    stroke: _ctx.stroke,\n    fill: \"none\",\n    \"stroke-linecap\": _ctx.strokeLinecap,\n    \"stroke-width\": _ctx.percentage ? _ctx.relativeStrokeWidth : 0,\n    style: normalizeStyle(_ctx.circlePathStyle)\n  }, null, 14, _hoisted_4)]))], 6)), (_ctx.showText || _ctx.$slots.default) && !_ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n    key: 2,\n    class: normalizeClass(_ctx.ns.e(\"text\")),\n    style: normalizeStyle({\n      fontSize: `${_ctx.progressTextSize}px`\n    })\n  }, [renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps(_ctx.slotData)), () => [!_ctx.status ? (openBlock(), createElementBlock(\"span\", _hoisted_5, toDisplayString(_ctx.content), 1)) : (openBlock(), createBlock(_component_el_icon, {\n    key: 1\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.statusIcon)))]),\n    _: 1\n  }))])], 6)) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n}\n\nvar Progress = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Progress as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElIcon","CircleCheck","CircleClose","Check","Close","WarningFilled","props","progressProps","setup","ns","useNamespace","barStyle","computed","width","percentage","animationDuration","duration","backgroundColor","getCurrentColor","relativeStrokeWidth","strokeWidth","toFixed","radius","type","parseInt","parseFloat","value","trackPath","r","isDashboard","perimeter","Math","PI","rate","strokeDashoffset","offset","trailPathStyle","strokeDasharray","circlePathStyle","transition","stroke","ret","color","status","statusIcon","progressTextSize","content","format","span","seriesColors","slotData","class","_ctx","b","m","role","key","createElementVNode","_normalizeClass","style","height","renderSlot","openBlock","d","fill","fontSize","_guardReactiveProps","default"],"sources":["../../../../../../packages/components/progress/src/progress.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(type),\n      ns.is(status),\n      {\n        [ns.m('without-text')]: !showText,\n        [ns.m('text-inside')]: textInside,\n      },\n    ]\"\n    role=\"progressbar\"\n    :aria-valuenow=\"percentage\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n  >\n    <div v-if=\"type === 'line'\" :class=\"ns.b('bar')\">\n      <div\n        :class=\"ns.be('bar', 'outer')\"\n        :style=\"{ height: `${strokeWidth}px` }\"\n      >\n        <div\n          :class=\"[\n            ns.be('bar', 'inner'),\n            { [ns.bem('bar', 'inner', 'indeterminate')]: indeterminate },\n          ]\"\n          :style=\"barStyle\"\n        >\n          <div\n            v-if=\"(showText || $slots.default) && textInside\"\n            :class=\"ns.be('bar', 'innerText')\"\n          >\n            <slot v-bind=\"slotData\">\n              <span>{{ content }}</span>\n            </slot>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      v-else\n      :class=\"ns.b('circle')\"\n      :style=\"{ height: `${width}px`, width: `${width}px` }\"\n    >\n      <svg viewBox=\"0 0 100 100\">\n        <path\n          :class=\"ns.be('circle', 'track')\"\n          :d=\"trackPath\"\n          stroke=\"#e5e9f2\"\n          :stroke-width=\"relativeStrokeWidth\"\n          fill=\"none\"\n          :style=\"trailPathStyle\"\n        />\n        <path\n          :class=\"ns.be('circle', 'path')\"\n          :d=\"trackPath\"\n          :stroke=\"stroke\"\n          fill=\"none\"\n          :stroke-linecap=\"strokeLinecap\"\n          :stroke-width=\"percentage ? relativeStrokeWidth : 0\"\n          :style=\"circlePathStyle\"\n        />\n      </svg>\n    </div>\n    <div\n      v-if=\"(showText || $slots.default) && !textInside\"\n      :class=\"ns.e('text')\"\n      :style=\"{ fontSize: `${progressTextSize}px` }\"\n    >\n      <slot v-bind=\"slotData\">\n        <span v-if=\"!status\">{{ content }}</span>\n        <el-icon v-else><component :is=\"statusIcon\" /></el-icon>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  WarningFilled,\n  CircleCheck,\n  CircleClose,\n  Check,\n  Close,\n} from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { progressProps } from './progress'\nimport type { CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElProgress',\n  components: {\n    ElIcon,\n    CircleCheck,\n    CircleClose,\n    Check,\n    Close,\n    WarningFilled,\n  },\n  props: progressProps,\n\n  setup(props) {\n    const ns = useNamespace('progress')\n\n    const barStyle = computed(\n      (): CSSProperties => ({\n        width: `${props.percentage}%`,\n        animationDuration: `${props.duration}s`,\n        backgroundColor: getCurrentColor(props.percentage),\n      })\n    )\n\n    const relativeStrokeWidth = computed(() =>\n      ((props.strokeWidth / props.width) * 100).toFixed(1)\n    )\n\n    const radius = computed(() => {\n      if (props.type === 'circle' || props.type === 'dashboard') {\n        return parseInt(`${50 - parseFloat(relativeStrokeWidth.value) / 2}`, 10)\n      } else {\n        return 0\n      }\n    })\n\n    const trackPath = computed(() => {\n      const r = radius.value\n      const isDashboard = props.type === 'dashboard'\n      return `\n          M 50 50\n          m 0 ${isDashboard ? '' : '-'}${r}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '-' : ''}${r * 2}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '' : '-'}${r * 2}\n          `\n    })\n\n    const perimeter = computed(() => 2 * Math.PI * radius.value)\n\n    const rate = computed(() => (props.type === 'dashboard' ? 0.75 : 1))\n\n    const strokeDashoffset = computed(() => {\n      const offset = (-1 * perimeter.value * (1 - rate.value)) / 2\n      return `${offset}px`\n    })\n\n    const trailPathStyle = computed(\n      (): CSSProperties => ({\n        strokeDasharray: `${perimeter.value * rate.value}px, ${\n          perimeter.value\n        }px`,\n        strokeDashoffset: strokeDashoffset.value,\n      })\n    )\n\n    const circlePathStyle = computed(\n      (): CSSProperties => ({\n        strokeDasharray: `${\n          perimeter.value * rate.value * (props.percentage / 100)\n        }px, ${perimeter.value}px`,\n        strokeDashoffset: strokeDashoffset.value,\n        transition: 'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease',\n      })\n    )\n\n    const stroke = computed(() => {\n      let ret: string\n      if (props.color) {\n        ret = getCurrentColor(props.percentage)\n      } else {\n        switch (props.status) {\n          case 'success':\n            ret = '#13ce66'\n            break\n          case 'exception':\n            ret = '#ff4949'\n            break\n          case 'warning':\n            ret = '#e6a23c'\n            break\n          default:\n            ret = '#20a0ff'\n        }\n      }\n      return ret\n    })\n\n    const statusIcon = computed(() => {\n      if (props.status === 'warning') {\n        return WarningFilled\n      }\n      if (props.type === 'line') {\n        return props.status === 'success' ? CircleCheck : CircleClose\n      } else {\n        return props.status === 'success' ? Check : Close\n      }\n    })\n\n    const progressTextSize = computed(() => {\n      return props.type === 'line'\n        ? 12 + props.strokeWidth * 0.4\n        : props.width * 0.111111 + 2\n    })\n\n    const content = computed(() => props.format(props.percentage))\n\n    const getCurrentColor = (percentage: number) => {\n      const { color } = props\n      if (typeof color === 'function') {\n        return color(percentage)\n      } else if (typeof color === 'string') {\n        return color\n      } else {\n        const span = 100 / color.length\n        const seriesColors = color.map((seriesColor, index) => {\n          if (typeof seriesColor === 'string') {\n            return {\n              color: seriesColor,\n              percentage: (index + 1) * span,\n            }\n          }\n          return seriesColor\n        })\n        const colors = seriesColors.sort((a, b) => a.percentage - b.percentage)\n\n        for (const color of colors) {\n          if (color.percentage > percentage) return color.color\n        }\n        return colors[colors.length - 1]?.color\n      }\n    }\n\n    const slotData = computed(() => {\n      return {\n        percentage: props.percentage,\n      }\n    })\n\n    return {\n      ns,\n      barStyle,\n      relativeStrokeWidth,\n      radius,\n      trackPath,\n      perimeter,\n      rate,\n      strokeDashoffset,\n      trailPathStyle,\n      circlePathStyle,\n      stroke,\n      statusIcon,\n      progressTextSize,\n      content,\n      slotData,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}