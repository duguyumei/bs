{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onMounted, createElementVNode, openBlock, createElementBlock, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElSlPanel\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance();\n    const cursorTop = ref(0);\n    const cursorLeft = ref(0);\n    const background = ref(\"hsl(0, 100%, 50%)\");\n    const colorValue = computed(() => {\n      const hue = props.color.get(\"hue\");\n      const value = props.color.get(\"value\");\n      return {\n        hue,\n        value\n      };\n    });\n\n    function update() {\n      const saturation = props.color.get(\"saturation\");\n      const value = props.color.get(\"value\");\n      const el = instance.vnode.el;\n      const {\n        clientWidth: width,\n        clientHeight: height\n      } = el;\n      cursorLeft.value = saturation * width / 100;\n      cursorTop.value = (100 - value) * height / 100;\n      background.value = `hsl(${props.color.get(\"hue\")}, 100%, 50%)`;\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      let left = clientX - rect.left;\n      let top = clientY - rect.top;\n      left = Math.max(0, left);\n      left = Math.min(left, rect.width);\n      top = Math.max(0, top);\n      top = Math.min(top, rect.height);\n      cursorLeft.value = left;\n      cursorTop.value = top;\n      props.color.set({\n        saturation: left / rect.width * 100,\n        value: 100 - top / rect.height * 100\n      });\n    }\n\n    watch(() => colorValue.value, () => {\n      update();\n    });\n    onMounted(() => {\n      draggable(instance.vnode.el, {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      });\n      update();\n    });\n    return {\n      cursorTop,\n      cursorLeft,\n      background,\n      colorValue,\n      handleDrag,\n      update\n    };\n  }\n\n});\n\nconst _hoisted_1 = /* @__PURE__ */createElementVNode(\"div\", {\n  class: \"el-color-svpanel__white\"\n}, null, -1);\n\nconst _hoisted_2 = /* @__PURE__ */createElementVNode(\"div\", {\n  class: \"el-color-svpanel__black\"\n}, null, -1);\n\nconst _hoisted_3 = /* @__PURE__ */createElementVNode(\"div\", null, null, -1);\n\nconst _hoisted_4 = [_hoisted_3];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: \"el-color-svpanel\",\n    style: normalizeStyle({\n      backgroundColor: _ctx.background\n    })\n  }, [_hoisted_1, _hoisted_2, createElementVNode(\"div\", {\n    class: \"el-color-svpanel__cursor\",\n    style: normalizeStyle({\n      top: _ctx.cursorTop + \"px\",\n      left: _ctx.cursorLeft + \"px\"\n    })\n  }, _hoisted_4, 4)], 4);\n}\n\nvar SvPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { SvPanel as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","Object","required","setup","instance","getCurrentInstance","cursorTop","ref","cursorLeft","background","colorValue","computed","hue","get","value","saturation","el","vnode","clientWidth","width","clientHeight","height","event","rect","getBoundingClientRect","clientX","clientY","getClientXY","left","top","Math","max","min","set","watch","update","onMounted","draggable","drag","handleDrag","end","class","_hoisted_3","_createElementBlock","style","_normalizeStyle","backgroundColor","_ctx","_hoisted_1","_hoisted_2","_createElementVNode","_hoisted_4"],"sources":["../../../../../../../packages/components/color-picker/src/components/sv-panel.vue"],"sourcesContent":["<template>\n  <div\n    class=\"el-color-svpanel\"\n    :style=\"{\n      backgroundColor: background,\n    }\"\n  >\n    <div class=\"el-color-svpanel__white\"></div>\n    <div class=\"el-color-svpanel__black\"></div>\n    <div\n      class=\"el-color-svpanel__cursor\"\n      :style=\"{\n        top: cursorTop + 'px',\n        left: cursorLeft + 'px',\n      }\"\n    >\n      <div></div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  computed,\n  watch,\n  getCurrentInstance,\n  onMounted,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElSlPanel',\n\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n  },\n  setup(props) {\n    // instance\n    const instance = getCurrentInstance()\n    // data\n    const cursorTop = ref(0)\n    const cursorLeft = ref(0)\n    const background = ref('hsl(0, 100%, 50%)')\n    const colorValue = computed(() => {\n      const hue = props.color.get('hue')\n      const value = props.color.get('value')\n      return { hue, value }\n    })\n\n    // methods\n    function update() {\n      const saturation = props.color.get('saturation')\n      const value = props.color.get('value')\n\n      const el = instance.vnode.el\n      const { clientWidth: width, clientHeight: height } = el\n\n      cursorLeft.value = (saturation * width) / 100\n      cursorTop.value = ((100 - value) * height) / 100\n\n      background.value = `hsl(${props.color.get('hue')}, 100%, 50%)`\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n\n      let left = clientX - rect.left\n      let top = clientY - rect.top\n      left = Math.max(0, left)\n      left = Math.min(left, rect.width)\n\n      top = Math.max(0, top)\n      top = Math.min(top, rect.height)\n\n      cursorLeft.value = left\n      cursorTop.value = top\n      props.color.set({\n        saturation: (left / rect.width) * 100,\n        value: 100 - (top / rect.height) * 100,\n      })\n    }\n\n    // watch\n    watch(\n      () => colorValue.value,\n      () => {\n        update()\n      }\n    )\n    // mounted\n    onMounted(() => {\n      draggable(instance.vnode.el as HTMLElement, {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      })\n\n      update()\n    })\n    return {\n      cursorTop,\n      cursorLeft,\n      background,\n      colorValue,\n      handleDrag,\n      update,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}