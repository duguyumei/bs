{"ast":null,"code":"import { defineComponent, ref, computed, resolveComponent, openBlock, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createElementBlock, Fragment, renderList } from 'vue';\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nimport { ElSelect } from '../../select/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Clock, CircleClose } from '@element-plus/icons-vue';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\ndayjs.extend(customParseFormat);\nconst {\n  Option: ElOption\n} = ElSelect;\n\nconst parseTime = time => {\n  const values = (time || \"\").split(\":\");\n\n  if (values.length >= 2) {\n    let hours = parseInt(values[0], 10);\n    const minutes = parseInt(values[1], 10);\n    const timeUpper = time.toUpperCase();\n\n    if (timeUpper.includes(\"AM\") && hours === 12) {\n      hours = 0;\n    } else if (timeUpper.includes(\"PM\") && hours !== 12) {\n      hours += 12;\n    }\n\n    return {\n      hours,\n      minutes\n    };\n  }\n\n  return null;\n};\n\nconst compareTime = (time1, time2) => {\n  const value1 = parseTime(time1);\n  const value2 = parseTime(time2);\n  const minutes1 = value1.minutes + value1.hours * 60;\n  const minutes2 = value2.minutes + value2.hours * 60;\n\n  if (minutes1 === minutes2) {\n    return 0;\n  }\n\n  return minutes1 > minutes2 ? 1 : -1;\n};\n\nconst padTime = time => {\n  return `${time}`.padStart(2, \"0\");\n};\n\nconst formatTime = time => {\n  return `${padTime(time.hours)}:${padTime(time.minutes)}`;\n};\n\nconst nextTime = (time, step) => {\n  const timeValue = parseTime(time);\n  const stepValue = parseTime(step);\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes\n  };\n  next.minutes += stepValue.minutes;\n  next.hours += stepValue.hours;\n  next.hours += Math.floor(next.minutes / 60);\n  next.minutes = next.minutes % 60;\n  return formatTime(next);\n};\n\nconst _sfc_main = defineComponent({\n  name: \"ElTimeSelect\",\n  components: {\n    ElSelect,\n    ElOption,\n    ElIcon\n  },\n  model: {\n    prop: \"value\",\n    event: \"change\"\n  },\n  props: {\n    format: {\n      type: String,\n      default: \"HH:mm\"\n    },\n    modelValue: String,\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    editable: {\n      type: Boolean,\n      default: true\n    },\n    effect: {\n      type: String,\n      default: \"light\"\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: String,\n      default: \"default\",\n      validator: value => !value || [\"large\", \"default\", \"small\"].indexOf(value) !== -1\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    start: {\n      type: String,\n      default: \"09:00\"\n    },\n    end: {\n      type: String,\n      default: \"18:00\"\n    },\n    step: {\n      type: String,\n      default: \"00:30\"\n    },\n    minTime: {\n      type: String,\n      default: \"\"\n    },\n    maxTime: {\n      type: String,\n      default: \"\"\n    },\n    name: {\n      type: String,\n      default: \"\"\n    },\n    prefixIcon: {\n      type: [String, Object],\n      default: Clock\n    },\n    clearIcon: {\n      type: [String, Object],\n      default: CircleClose\n    }\n  },\n  emits: [\"change\", \"blur\", \"focus\", \"update:modelValue\"],\n\n  setup(props) {\n    const select = ref(null);\n    const value = computed(() => props.modelValue);\n    const start = computed(() => {\n      const time = parseTime(props.start);\n      return formatTime(time);\n    });\n    const end = computed(() => {\n      const time = parseTime(props.end);\n      return formatTime(time);\n    });\n    const step = computed(() => {\n      const time = parseTime(props.step);\n      return formatTime(time);\n    });\n    const minTime = computed(() => {\n      const time = parseTime(props.minTime);\n      return time ? formatTime(time) : null;\n    });\n    const maxTime = computed(() => {\n      const time = parseTime(props.maxTime);\n      return time ? formatTime(time) : null;\n    });\n    const items = computed(() => {\n      const result = [];\n\n      if (props.start && props.end && props.step) {\n        let current = start.value;\n        let currentTime;\n\n        while (compareTime(current, end.value) <= 0) {\n          currentTime = dayjs(current, \"HH:mm\").format(props.format);\n          result.push({\n            value: currentTime,\n            disabled: compareTime(current, minTime.value || \"-1:-1\") <= 0 || compareTime(current, maxTime.value || \"100:100\") >= 0\n          });\n          current = nextTime(current, step.value);\n        }\n      }\n\n      return result;\n    });\n\n    const blur = () => {\n      var _a, _b;\n\n      (_b = (_a = select.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n\n    const focus = () => {\n      var _a, _b;\n\n      (_b = (_a = select.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n\n    return {\n      select,\n      value,\n      items,\n      blur,\n      focus\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_option = resolveComponent(\"el-option\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_select = resolveComponent(\"el-select\");\n\n  return openBlock(), createBlock(_component_el_select, {\n    ref: \"select\",\n    \"model-value\": _ctx.value,\n    disabled: _ctx.disabled,\n    clearable: _ctx.clearable,\n    \"clear-icon\": _ctx.clearIcon,\n    size: _ctx.size,\n    effect: _ctx.effect,\n    placeholder: _ctx.placeholder,\n    \"default-first-option\": \"\",\n    filterable: _ctx.editable,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = event => _ctx.$emit(\"update:modelValue\", event)),\n    onChange: _cache[1] || (_cache[1] = event => _ctx.$emit(\"change\", event)),\n    onBlur: _cache[2] || (_cache[2] = event => _ctx.$emit(\"blur\", event)),\n    onFocus: _cache[3] || (_cache[3] = event => _ctx.$emit(\"focus\", event))\n  }, {\n    prefix: withCtx(() => [_ctx.prefixIcon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: \"el-input__prefix-icon\"\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))]),\n      _: 1\n    })) : createCommentVNode(\"v-if\", true)]),\n    default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, item => {\n      return openBlock(), createBlock(_component_el_option, {\n        key: item.value,\n        label: item.value,\n        value: item.value,\n        disabled: item.disabled\n      }, null, 8, [\"label\", \"value\", \"disabled\"]);\n    }), 128))]),\n    _: 1\n  }, 8, [\"model-value\", \"disabled\", \"clearable\", \"clear-icon\", \"size\", \"effect\", \"placeholder\", \"filterable\"]);\n}\n\nvar TimeSelect = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { TimeSelect as default };","map":{"version":3,"mappings":"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","names":["dayjs","extend","customParseFormat","Option","ElOption","ElSelect","parseTime","time","values","split","length","hours","parseInt","minutes","timeUpper","toUpperCase","includes","compareTime","time1","time2","value1","value2","minutes1","minutes2","padTime","padStart","formatTime","nextTime","step","timeValue","stepValue","next","Math","floor","_sfc_main","defineComponent","name","components","ElIcon","model","prop","event","props","format","type","String","default","modelValue","disabled","Boolean","editable","effect","clearable","size","validator","value","indexOf","placeholder","start","end","minTime","maxTime","prefixIcon","Object","Clock","clearIcon","CircleClose","emits","setup","select","ref","computed","items","result","current","currentTime","push","blur","focus","filterable","onChange","onBlur","onFocus","_cache","prefix","key","openBlock","label"],"sources":["../../../../../../packages/components/time-select/src/time-select.vue"],"sourcesContent":["<template>\n  <el-select\n    ref=\"select\"\n    :model-value=\"value\"\n    :disabled=\"disabled\"\n    :clearable=\"clearable\"\n    :clear-icon=\"clearIcon\"\n    :size=\"size\"\n    :effect=\"effect\"\n    :placeholder=\"placeholder\"\n    default-first-option\n    :filterable=\"editable\"\n    @update:model-value=\"(event) => $emit('update:modelValue', event)\"\n    @change=\"(event) => $emit('change', event)\"\n    @blur=\"(event) => $emit('blur', event)\"\n    @focus=\"(event) => $emit('focus', event)\"\n  >\n    <el-option\n      v-for=\"item in items\"\n      :key=\"item.value\"\n      :label=\"item.value\"\n      :value=\"item.value\"\n      :disabled=\"item.disabled\"\n    />\n    <template #prefix>\n      <el-icon v-if=\"prefixIcon\" class=\"el-input__prefix-icon\">\n        <component :is=\"prefixIcon\" />\n      </el-icon>\n    </template>\n  </el-select>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\nimport ElSelect from '@element-plus/components/select'\nimport ElIcon from '@element-plus/components/icon'\nimport { CircleClose, Clock } from '@element-plus/icons-vue'\n\nimport type { PropType, Component } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\ndayjs.extend(customParseFormat)\n\nconst { Option: ElOption } = ElSelect\n\ninterface Time {\n  hours: number\n  minutes: number\n}\n\nconst parseTime = (time: string): null | Time => {\n  const values = (time || '').split(':')\n  if (values.length >= 2) {\n    let hours = parseInt(values[0], 10)\n    const minutes = parseInt(values[1], 10)\n    const timeUpper = time.toUpperCase()\n    if (timeUpper.includes('AM') && hours === 12) {\n      hours = 0\n    } else if (timeUpper.includes('PM') && hours !== 12) {\n      hours += 12\n    }\n    return {\n      hours,\n      minutes,\n    }\n  }\n  return null\n}\nconst compareTime = (time1: string, time2: string): number => {\n  const value1 = parseTime(time1)\n  const value2 = parseTime(time2)\n  const minutes1 = value1.minutes + value1.hours * 60\n  const minutes2 = value2.minutes + value2.hours * 60\n  if (minutes1 === minutes2) {\n    return 0\n  }\n  return minutes1 > minutes2 ? 1 : -1\n}\nconst padTime = (time: number | string) => {\n  return `${time}`.padStart(2, '0')\n}\nconst formatTime = (time: Time): string => {\n  return `${padTime(time.hours)}:${padTime(time.minutes)}`\n}\nconst nextTime = (time: string, step: string): string => {\n  const timeValue = parseTime(time)\n  const stepValue = parseTime(step)\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes,\n  }\n  next.minutes += stepValue.minutes\n  next.hours += stepValue.hours\n  next.hours += Math.floor(next.minutes / 60)\n  next.minutes = next.minutes % 60\n  return formatTime(next)\n}\n\nexport default defineComponent({\n  name: 'ElTimeSelect',\n  components: { ElSelect, ElOption, ElIcon },\n  model: {\n    prop: 'value',\n    event: 'change',\n  },\n  props: {\n    format: {\n      type: String,\n      default: 'HH:mm',\n    },\n    modelValue: String,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    editable: {\n      type: Boolean,\n      default: true,\n    },\n    effect: {\n      type: String as PropType<'light' | 'dark' | string>,\n      default: 'light',\n    },\n    clearable: {\n      type: Boolean,\n      default: true,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      default: 'default',\n      validator: (value: string) =>\n        !value || ['large', 'default', 'small'].indexOf(value) !== -1,\n    },\n    placeholder: {\n      type: String,\n      default: '',\n    },\n    start: {\n      type: String,\n      default: '09:00',\n    },\n    end: {\n      type: String,\n      default: '18:00',\n    },\n    step: {\n      type: String,\n      default: '00:30',\n    },\n    minTime: {\n      type: String,\n      default: '',\n    },\n    maxTime: {\n      type: String,\n      default: '',\n    },\n    name: {\n      type: String,\n      default: '',\n    },\n    prefixIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: Clock,\n    },\n    clearIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: CircleClose,\n    },\n  },\n  emits: ['change', 'blur', 'focus', 'update:modelValue'],\n  setup(props) {\n    // computed\n    const select = ref(null)\n    const value = computed(() => props.modelValue)\n    const start = computed(() => {\n      const time = parseTime(props.start)\n      return formatTime(time)\n    })\n    const end = computed(() => {\n      const time = parseTime(props.end)\n      return formatTime(time)\n    })\n    const step = computed(() => {\n      const time = parseTime(props.step)\n      return formatTime(time)\n    })\n    const minTime = computed(() => {\n      const time = parseTime(props.minTime)\n      return time ? formatTime(time) : null\n    })\n    const maxTime = computed(() => {\n      const time = parseTime(props.maxTime)\n      return time ? formatTime(time) : null\n    })\n    const items = computed(() => {\n      const result = []\n      if (props.start && props.end && props.step) {\n        let current = start.value\n        let currentTime\n        while (compareTime(current, end.value) <= 0) {\n          currentTime = dayjs(current, 'HH:mm').format(props.format)\n          result.push({\n            value: currentTime,\n            disabled:\n              compareTime(current, minTime.value || '-1:-1') <= 0 ||\n              compareTime(current, maxTime.value || '100:100') >= 0,\n          })\n          current = nextTime(current, step.value)\n        }\n      }\n      return result\n    })\n    const blur = () => {\n      select.value?.blur?.()\n    }\n    const focus = () => {\n      select.value?.focus?.()\n    }\n\n    return {\n      select,\n      value,\n      items,\n      blur,\n      focus,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}