{"ast":null,"code":"import { defineComponent, inject, ref, provide, computed, unref, onMounted, watch, openBlock, createElementBlock, normalizeStyle, normalizeClass, renderSlot } from 'vue';\nimport { createPopper } from '@popperjs/core';\nimport '../../../hooks/index.mjs';\nimport { POPPER_INJECTION_KEY, POPPER_CONTENT_INJECTION_KEY } from './tokens.mjs';\nimport { usePopperContentProps } from './popper.mjs';\nimport { buildPopperOptions, unwrapMeasurableEl } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElPopperContent\",\n  props: usePopperContentProps,\n  emits: [\"mouseenter\", \"mouseleave\"],\n\n  setup(props) {\n    const {\n      triggerRef,\n      popperInstanceRef,\n      contentRef\n    } = inject(POPPER_INJECTION_KEY, void 0);\n    const {\n      nextZIndex\n    } = useZIndex();\n    const ns = useNamespace(\"popper\");\n    const popperContentRef = ref(null);\n    const arrowRef = ref(null);\n    const arrowOffset = ref();\n    provide(POPPER_CONTENT_INJECTION_KEY, {\n      arrowRef,\n      arrowOffset\n    });\n    const contentZIndex = ref(props.zIndex || nextZIndex());\n    const contentStyle = computed(() => [{\n      zIndex: unref(contentZIndex)\n    }, props.popperStyle]);\n    const contentClass = computed(() => [ns.b(), ns.is(\"pure\", props.pure), ns.is(props.effect), props.popperClass]);\n\n    const createPopperInstance = ({\n      referenceEl,\n      popperContentEl,\n      arrowEl\n    }) => {\n      const options = buildPopperOptions(props, {\n        arrowEl,\n        arrowOffset: unref(arrowOffset)\n      });\n      return createPopper(referenceEl, popperContentEl, options);\n    };\n\n    const updatePopper = () => {\n      var _a;\n\n      (_a = unref(popperInstanceRef)) == null ? void 0 : _a.update();\n      contentZIndex.value = props.zIndex || nextZIndex();\n    };\n\n    const togglePopoerAlive = () => {\n      var _a;\n\n      const monitorable = {\n        name: \"eventListeners\",\n        enabled: props.visible\n      };\n      (_a = unref(popperInstanceRef)) == null ? void 0 : _a.setOptions(options => ({ ...options,\n        modifiers: [...options.modifiers, monitorable]\n      }));\n    };\n\n    onMounted(() => {\n      let updateHandle;\n      watch(() => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef), val => {\n        var _a;\n\n        updateHandle == null ? void 0 : updateHandle();\n\n        if (val) {\n          (_a = popperInstanceRef.value) == null ? void 0 : _a.destroy();\n          const popperContentEl = unref(popperContentRef);\n          contentRef.value = popperContentEl;\n          const arrowEl = unref(arrowRef);\n          const newInstance = createPopperInstance({\n            referenceEl: val,\n            popperContentEl: unref(popperContentRef),\n            arrowEl\n          });\n          popperInstanceRef.value = newInstance;\n          updateHandle = watch(() => val.getBoundingClientRect(), () => {\n            updatePopper();\n          }, {\n            immediate: true\n          });\n        } else {\n          popperInstanceRef.value = null;\n        }\n      }, {\n        immediate: true\n      });\n      watch(() => props.visible, togglePopoerAlive, {\n        immediate: true\n      });\n      watch(() => buildPopperOptions(props, {\n        arrowEl: unref(arrowRef),\n        arrowOffset: unref(arrowOffset)\n      }), option => {\n        var _a;\n\n        return (_a = popperInstanceRef.value) == null ? void 0 : _a.setOptions(option);\n      });\n    });\n    return {\n      ns,\n      popperContentRef,\n      popperInstanceRef,\n      contentStyle,\n      contentClass,\n      updatePopper\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"popperContentRef\",\n    style: normalizeStyle(_ctx.contentStyle),\n    class: normalizeClass(_ctx.contentClass),\n    role: \"tooltip\",\n    onMouseenter: _cache[0] || (_cache[0] = e => _ctx.$emit(\"mouseenter\", e)),\n    onMouseleave: _cache[1] || (_cache[1] = e => _ctx.$emit(\"mouseleave\", e))\n  }, [renderSlot(_ctx.$slots, \"default\")], 38);\n}\n\nvar ElPopperContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElPopperContent as default };","map":{"version":3,"mappings":";;;;;;;;;;AA8BA,MAAKA,YAAaC,gBAAa;AAC7BC,QAAM,iBADuB;AAE7BC,SAAOC,qBAFsB;AAG7BC,SAAO,CAAC,YAAD,EAAe,YAAf,CAHsB;;AAI7BC,QAAMH,KAAN,EAAa;AACX,UAAM;AAAEI,gBAAF;AAAcC,uBAAd;AAAiCC;AAAjC,QAAgDC,OACpDC,oBADoD,EAEpD,MAFoD,CAAtD;AAIA,UAAM;AAAEC;AAAF,QAAiBC,WAAvB;AACA,UAAMC,KAAKC,aAAa,QAAb,CAAX;AACA,UAAMC,mBAAmBC,IAAwB,IAAxB,CAAzB;AACA,UAAMC,WAAWD,IAAwB,IAAxB,CAAjB;AACA,UAAME,cAAcF,KAApB;AACAG,YAAQC,4BAAR,EAAsC;AACpCH,cADoC;AAEpCC;AAFoC,KAAtC;AAIA,UAAMG,gBAAgBL,IAAId,MAAMoB,MAAN,IAAgBX,YAApB,CAAtB;AAEA,UAAMY,eAAeC,SACnB,MAAM,CAAC;AAAEF,cAAQG,MAAMJ,aAAN;AAAV,KAAD,EAAmCnB,MAAMwB,WAAzC,CADa,CAArB;AAIA,UAAMC,eAAeH,SAAS,MAAM,CAClCX,GAAGe,CAAH,EADkC,EAElCf,GAAGgB,EAAH,CAAM,MAAN,EAAc3B,MAAM4B,IAApB,CAFkC,EAGlCjB,GAAGgB,EAAH,CAAM3B,MAAM6B,MAAZ,CAHkC,EAIlC7B,MAAM8B,WAJ4B,CAAf,CAArB;;AAOA,UAAMC,uBAAuB,CAAC;AAC5BC,iBAD4B;AAE5BC,qBAF4B;AAG5BC;AAH4B,KAAD,KAIvB;AACJ,YAAMC,UAAUC,mBAAmBpC,KAAnB,EAA0B;AACxCkC,eADwC;AAExClB,qBAAaO,MAAMP,WAAN;AAF2B,OAA1B,CAAhB;AAKA,aAAOqB,aAAaL,WAAb,EAA0BC,eAA1B,EAA2CE,OAA3C,CAAP;AAAkD,KAVpD;;AAaA,UAAMG,eAAe,MAAM;AACzB;;AACA;AAAsCnB;AAGxC,KALA;;AAME;AACA;;AAAmD;AAAApB;AAAAwC;AAAA;AAC9C,qFAC+B,UAD/B;AAC+BC;AAD/B;AAML,KARA;;AASAC;AAGI;AACAC,YAAI,gEAAJ,EAAIC;AACF;;AACAC,wCAA8BA,cAA9B;;AACA;AACA,gBAAMvC,uBAAN,KAAM,IAAN,GAAM,MAAN,GAAMwC,YAAN;AAEA,gBAAMZ,yCAAN;AAAyC3B;AAC1B;AACU;AACvB0B,4BADuB;AAGzBC,oDAHyB;AAKzBC;AALyB;AAQrB7B;AAEFuC;AACaN;AAAA,WADb,EACa;AAIfQ;AAJe,WADb;AAQN,SAvBI,MAuBJ;AAAAzC;AACa;AAIf,OA/BI,EA+BJ;AAEAyC;AAFA,OA/BI;AAoCiBJ;AAAAI;AAAA;AACIJ,WAEtB;AAA+CR,gCAA/C;AAILlB;AAJK,UAIE+B;AACL;;AACA;AACA,OAPG,CAFsB;AAUzB,KAnDA;AAoDA;AACApC,QADA;AACAE,sBADA;AACAR,uBADA;kBAAA;kBAAA;;AAAA;AA3IE;;AA4BuB,CAAb,CAAlB;;AAzBS,mDACe2C,KADf,EACeC,QADf,EACe;AAAoB;AACAnC,2BADA;AAGxCoC,4CAHwC;AAGhCC,4CAHgC;mBAAA;6EAAA;;AAAA","names":["_sfc_main","defineComponent","name","props","usePopperContentProps","emits","setup","triggerRef","popperInstanceRef","contentRef","inject","POPPER_INJECTION_KEY","nextZIndex","useZIndex","ns","useNamespace","popperContentRef","ref","arrowRef","arrowOffset","provide","POPPER_CONTENT_INJECTION_KEY","contentZIndex","zIndex","contentStyle","computed","unref","popperStyle","contentClass","b","is","pure","effect","popperClass","createPopperInstance","referenceEl","popperContentEl","arrowEl","options","buildPopperOptions","createPopper","updatePopper","enabled","modifiers","onMounted","watch","val","updateHandle","_a","immediate","option","$data","$options","style","class"],"sources":["../../../../../../packages/components/popper/src/content.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"popperContentRef\"\n    :style=\"contentStyle\"\n    :class=\"contentClass\"\n    role=\"tooltip\"\n    @mouseenter=\"(e) => $emit('mouseenter', e)\"\n    @mouseleave=\"(e) => $emit('mouseleave', e)\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  ref,\n  inject,\n  provide,\n  unref,\n  onMounted,\n  watch,\n} from 'vue'\nimport { createPopper } from '@popperjs/core'\nimport { useZIndex, useNamespace } from '@element-plus/hooks'\nimport { POPPER_INJECTION_KEY, POPPER_CONTENT_INJECTION_KEY } from './tokens'\nimport { usePopperContentProps } from './popper'\nimport { buildPopperOptions, unwrapMeasurableEl } from './utils'\n\nexport default defineComponent({\n  name: 'ElPopperContent',\n  props: usePopperContentProps,\n  emits: ['mouseenter', 'mouseleave'],\n  setup(props) {\n    const { triggerRef, popperInstanceRef, contentRef } = inject(\n      POPPER_INJECTION_KEY,\n      undefined\n    )!\n    const { nextZIndex } = useZIndex()\n    const ns = useNamespace('popper')\n    const popperContentRef = ref<HTMLElement | null>(null)\n    const arrowRef = ref<HTMLElement | null>(null)\n    const arrowOffset = ref<number>()\n    provide(POPPER_CONTENT_INJECTION_KEY, {\n      arrowRef,\n      arrowOffset,\n    })\n    const contentZIndex = ref(props.zIndex || nextZIndex())\n\n    const contentStyle = computed(\n      () => [{ zIndex: unref(contentZIndex) }, props.popperStyle] as any\n    )\n\n    const contentClass = computed(() => [\n      ns.b(),\n      ns.is('pure', props.pure),\n      ns.is(props.effect),\n      props.popperClass,\n    ])\n\n    const createPopperInstance = ({\n      referenceEl,\n      popperContentEl,\n      arrowEl,\n    }) => {\n      const options = buildPopperOptions(props, {\n        arrowEl,\n        arrowOffset: unref(arrowOffset),\n      })\n\n      return createPopper(referenceEl, popperContentEl, options)\n    }\n\n    const updatePopper = () => {\n      unref(popperInstanceRef)?.update()\n      contentZIndex.value = props.zIndex || nextZIndex()\n    }\n\n    const togglePopoerAlive = () => {\n      const monitorable = { name: 'eventListeners', enabled: props.visible }\n      unref(popperInstanceRef)?.setOptions((options) => ({\n        ...options,\n        modifiers: [...options.modifiers, monitorable],\n      }))\n    }\n\n    onMounted(() => {\n      let updateHandle: ReturnType<typeof watch>\n      watch(\n        () => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef),\n        (val) => {\n          updateHandle?.()\n          if (val) {\n            popperInstanceRef.value?.destroy()\n            const popperContentEl = unref(popperContentRef)!\n            contentRef.value = popperContentEl\n            const arrowEl = unref(arrowRef)\n\n            const newInstance = createPopperInstance({\n              referenceEl: val,\n              popperContentEl: unref(popperContentRef)!,\n              arrowEl,\n            })\n            popperInstanceRef.value = newInstance\n\n            updateHandle = watch(\n              () => val!.getBoundingClientRect(),\n              () => {\n                updatePopper()\n              },\n              {\n                immediate: true,\n              }\n            )\n          } else {\n            popperInstanceRef.value = null\n          }\n        },\n        {\n          immediate: true,\n        }\n      )\n\n      watch(() => props.visible, togglePopoerAlive, { immediate: true })\n\n      watch(\n        () =>\n          buildPopperOptions(props, {\n            arrowEl: unref(arrowRef),\n            arrowOffset: unref(arrowOffset),\n          }),\n        (option) => popperInstanceRef.value?.setOptions(option)\n      )\n    })\n\n    return {\n      ns,\n      popperContentRef,\n      popperInstanceRef,\n      contentStyle,\n      contentClass,\n      updatePopper,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}