{"ast":null,"code":"import { ref, computed, inject, nextTick, watch } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { on, off } from '../../../utils/dom/event.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\n\nconst useTooltip = (props, formatTooltip, showTooltip) => {\n  const tooltip = ref(null);\n  const tooltipVisible = ref(false);\n  const enableFormat = computed(() => {\n    return formatTooltip.value instanceof Function;\n  });\n  const formatValue = computed(() => {\n    return enableFormat.value && formatTooltip.value(props.modelValue) || props.modelValue;\n  });\n  const displayTooltip = debounce(() => {\n    showTooltip.value && (tooltipVisible.value = true);\n  }, 50);\n  const hideTooltip = debounce(() => {\n    showTooltip.value && (tooltipVisible.value = false);\n  }, 50);\n  return {\n    tooltip,\n    tooltipVisible,\n    formatValue,\n    displayTooltip,\n    hideTooltip\n  };\n};\n\nconst useSliderButton = (props, initData, emit) => {\n  const {\n    disabled,\n    min,\n    max,\n    step,\n    showTooltip,\n    precision,\n    sliderSize,\n    formatTooltip,\n    emitChange,\n    resetSize,\n    updateDragging\n  } = inject(\"SliderProvider\");\n  const {\n    tooltip,\n    tooltipVisible,\n    formatValue,\n    displayTooltip,\n    hideTooltip\n  } = useTooltip(props, formatTooltip, showTooltip);\n  const currentPosition = computed(() => {\n    return `${(props.modelValue - min.value) / (max.value - min.value) * 100}%`;\n  });\n  const wrapperStyle = computed(() => {\n    return props.vertical ? {\n      bottom: currentPosition.value\n    } : {\n      left: currentPosition.value\n    };\n  });\n\n  const handleMouseEnter = () => {\n    initData.hovering = true;\n    displayTooltip();\n  };\n\n  const handleMouseLeave = () => {\n    initData.hovering = false;\n\n    if (!initData.dragging) {\n      hideTooltip();\n    }\n  };\n\n  const onButtonDown = event => {\n    if (disabled.value) return;\n    event.preventDefault();\n    onDragStart(event);\n    on(window, \"mousemove\", onDragging);\n    on(window, \"touchmove\", onDragging);\n    on(window, \"mouseup\", onDragEnd);\n    on(window, \"touchend\", onDragEnd);\n    on(window, \"contextmenu\", onDragEnd);\n  };\n\n  const onLeftKeyDown = () => {\n    if (disabled.value) return;\n    initData.newPosition = parseFloat(currentPosition.value) - step.value / (max.value - min.value) * 100;\n    setPosition(initData.newPosition);\n    emitChange();\n  };\n\n  const onRightKeyDown = () => {\n    if (disabled.value) return;\n    initData.newPosition = parseFloat(currentPosition.value) + step.value / (max.value - min.value) * 100;\n    setPosition(initData.newPosition);\n    emitChange();\n  };\n\n  const getClientXY = event => {\n    let clientX;\n    let clientY;\n\n    if (event.type.startsWith(\"touch\")) {\n      clientY = event.touches[0].clientY;\n      clientX = event.touches[0].clientX;\n    } else {\n      clientY = event.clientY;\n      clientX = event.clientX;\n    }\n\n    return {\n      clientX,\n      clientY\n    };\n  };\n\n  const onDragStart = event => {\n    initData.dragging = true;\n    initData.isClick = true;\n    const {\n      clientX,\n      clientY\n    } = getClientXY(event);\n\n    if (props.vertical) {\n      initData.startY = clientY;\n    } else {\n      initData.startX = clientX;\n    }\n\n    initData.startPosition = parseFloat(currentPosition.value);\n    initData.newPosition = initData.startPosition;\n  };\n\n  const onDragging = event => {\n    if (initData.dragging) {\n      initData.isClick = false;\n      displayTooltip();\n      resetSize();\n      let diff;\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n\n      if (props.vertical) {\n        initData.currentY = clientY;\n        diff = (initData.startY - initData.currentY) / sliderSize.value * 100;\n      } else {\n        initData.currentX = clientX;\n        diff = (initData.currentX - initData.startX) / sliderSize.value * 100;\n      }\n\n      initData.newPosition = initData.startPosition + diff;\n      setPosition(initData.newPosition);\n    }\n  };\n\n  const onDragEnd = () => {\n    if (initData.dragging) {\n      setTimeout(() => {\n        initData.dragging = false;\n\n        if (!initData.hovering) {\n          hideTooltip();\n        }\n\n        if (!initData.isClick) {\n          setPosition(initData.newPosition);\n          emitChange();\n        }\n      }, 0);\n      off(window, \"mousemove\", onDragging);\n      off(window, \"touchmove\", onDragging);\n      off(window, \"mouseup\", onDragEnd);\n      off(window, \"touchend\", onDragEnd);\n      off(window, \"contextmenu\", onDragEnd);\n    }\n  };\n\n  const setPosition = async newPosition => {\n    if (newPosition === null || isNaN(newPosition)) return;\n\n    if (newPosition < 0) {\n      newPosition = 0;\n    } else if (newPosition > 100) {\n      newPosition = 100;\n    }\n\n    const lengthPerStep = 100 / ((max.value - min.value) / step.value);\n    const steps = Math.round(newPosition / lengthPerStep);\n    let value = steps * lengthPerStep * (max.value - min.value) * 0.01 + min.value;\n    value = parseFloat(value.toFixed(precision.value));\n    emit(UPDATE_MODEL_EVENT, value);\n\n    if (!initData.dragging && props.modelValue !== initData.oldValue) {\n      initData.oldValue = props.modelValue;\n    }\n\n    await nextTick();\n    initData.dragging && displayTooltip();\n    tooltip.value.updatePopper();\n  };\n\n  watch(() => initData.dragging, val => {\n    updateDragging(val);\n  });\n  return {\n    tooltip,\n    tooltipVisible,\n    showTooltip,\n    wrapperStyle,\n    formatValue,\n    handleMouseEnter,\n    handleMouseLeave,\n    onButtonDown,\n    onLeftKeyDown,\n    onRightKeyDown,\n    setPosition\n  };\n};\n\nexport { useSliderButton };","map":{"version":3,"mappings":"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","names":["useTooltip","props","formatTooltip","showTooltip","tooltip","ref","tooltipVisible","enableFormat","computed","value","Function","formatValue","modelValue","displayTooltip","debounce","hideTooltip","useSliderButton","initData","emit","disabled","min","max","step","precision","sliderSize","emitChange","resetSize","updateDragging","inject","currentPosition","wrapperStyle","vertical","bottom","left","handleMouseEnter","hovering","handleMouseLeave","dragging","onButtonDown","event","preventDefault","onDragStart","on","window","onDragging","onDragEnd","onLeftKeyDown","newPosition","parseFloat","setPosition","onRightKeyDown","getClientXY","clientX","clientY","type","startsWith","touches","isClick","startY","startX","startPosition","diff","currentY","currentX","setTimeout","off","isNaN","lengthPerStep","steps","Math","round","toFixed","UPDATE_MODEL_EVENT","oldValue","nextTick","updatePopper","watch","val"],"sources":["../../../../../../packages/components/slider/src/useSliderButton.ts"],"sourcesContent":["import { computed, inject, nextTick, ref, watch } from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { off, on } from '@element-plus/utils'\n\nimport type { ComputedRef, CSSProperties } from 'vue'\nimport type {\n  ISliderButtonInitData,\n  ISliderButtonProps,\n  ISliderProvider,\n} from './slider.type'\n\nconst useTooltip = (\n  props: ISliderButtonProps,\n  formatTooltip: ComputedRef<(value: number) => number | string>,\n  showTooltip: ComputedRef<boolean>\n) => {\n  const tooltip = ref(null)\n\n  const tooltipVisible = ref(false)\n\n  const enableFormat = computed(() => {\n    return formatTooltip.value instanceof Function\n  })\n\n  const formatValue = computed(() => {\n    return (\n      (enableFormat.value && formatTooltip.value(props.modelValue)) ||\n      props.modelValue\n    )\n  })\n\n  const displayTooltip = debounce(() => {\n    showTooltip.value && (tooltipVisible.value = true)\n  }, 50)\n\n  const hideTooltip = debounce(() => {\n    showTooltip.value && (tooltipVisible.value = false)\n  }, 50)\n\n  return {\n    tooltip,\n    tooltipVisible,\n    formatValue,\n    displayTooltip,\n    hideTooltip,\n  }\n}\n\nexport const useSliderButton = (\n  props: ISliderButtonProps,\n  initData: ISliderButtonInitData,\n  emit\n) => {\n  const {\n    disabled,\n    min,\n    max,\n    step,\n    showTooltip,\n    precision,\n    sliderSize,\n    formatTooltip,\n    emitChange,\n    resetSize,\n    updateDragging,\n  } = inject<ISliderProvider>('SliderProvider')\n\n  const { tooltip, tooltipVisible, formatValue, displayTooltip, hideTooltip } =\n    useTooltip(props, formatTooltip, showTooltip)\n\n  const currentPosition = computed(() => {\n    return `${\n      ((props.modelValue - min.value) / (max.value - min.value)) * 100\n    }%`\n  })\n\n  const wrapperStyle = computed(() => {\n    return (\n      props.vertical\n        ? { bottom: currentPosition.value }\n        : { left: currentPosition.value }\n    ) as CSSProperties\n  })\n\n  const handleMouseEnter = () => {\n    initData.hovering = true\n    displayTooltip()\n  }\n\n  const handleMouseLeave = () => {\n    initData.hovering = false\n    if (!initData.dragging) {\n      hideTooltip()\n    }\n  }\n\n  const onButtonDown = (event: MouseEvent | TouchEvent) => {\n    if (disabled.value) return\n    event.preventDefault()\n    onDragStart(event)\n    on(window, 'mousemove', onDragging)\n    on(window, 'touchmove', onDragging)\n    on(window, 'mouseup', onDragEnd)\n    on(window, 'touchend', onDragEnd)\n    on(window, 'contextmenu', onDragEnd)\n  }\n\n  const onLeftKeyDown = () => {\n    if (disabled.value) return\n    initData.newPosition =\n      parseFloat(currentPosition.value) -\n      (step.value / (max.value - min.value)) * 100\n    setPosition(initData.newPosition)\n    emitChange()\n  }\n\n  const onRightKeyDown = () => {\n    if (disabled.value) return\n    initData.newPosition =\n      parseFloat(currentPosition.value) +\n      (step.value / (max.value - min.value)) * 100\n    setPosition(initData.newPosition)\n    emitChange()\n  }\n\n  const getClientXY = (event: MouseEvent | TouchEvent) => {\n    let clientX: number\n    let clientY: number\n    if (event.type.startsWith('touch')) {\n      clientY = (event as TouchEvent).touches[0].clientY\n      clientX = (event as TouchEvent).touches[0].clientX\n    } else {\n      clientY = (event as MouseEvent).clientY\n      clientX = (event as MouseEvent).clientX\n    }\n    return {\n      clientX,\n      clientY,\n    }\n  }\n\n  const onDragStart = (event: MouseEvent | TouchEvent) => {\n    initData.dragging = true\n    initData.isClick = true\n    const { clientX, clientY } = getClientXY(event)\n    if (props.vertical) {\n      initData.startY = clientY\n    } else {\n      initData.startX = clientX\n    }\n    initData.startPosition = parseFloat(currentPosition.value)\n    initData.newPosition = initData.startPosition\n  }\n\n  const onDragging = (event: MouseEvent | TouchEvent) => {\n    if (initData.dragging) {\n      initData.isClick = false\n      displayTooltip()\n      resetSize()\n      let diff: number\n      const { clientX, clientY } = getClientXY(event)\n      if (props.vertical) {\n        initData.currentY = clientY\n        diff = ((initData.startY - initData.currentY) / sliderSize.value) * 100\n      } else {\n        initData.currentX = clientX\n        diff = ((initData.currentX - initData.startX) / sliderSize.value) * 100\n      }\n      initData.newPosition = initData.startPosition + diff\n      setPosition(initData.newPosition)\n    }\n  }\n\n  const onDragEnd = () => {\n    if (initData.dragging) {\n      /*\n       * 防止在 mouseup 后立即触发 click，导致滑块有几率产生一小段位移\n       * 不使用 preventDefault 是因为 mouseup 和 click 没有注册在同一个 DOM 上\n       */\n      setTimeout(() => {\n        initData.dragging = false\n        if (!initData.hovering) {\n          hideTooltip()\n        }\n        if (!initData.isClick) {\n          setPosition(initData.newPosition)\n          emitChange()\n        }\n      }, 0)\n      off(window, 'mousemove', onDragging)\n      off(window, 'touchmove', onDragging)\n      off(window, 'mouseup', onDragEnd)\n      off(window, 'touchend', onDragEnd)\n      off(window, 'contextmenu', onDragEnd)\n    }\n  }\n\n  const setPosition = async (newPosition: number) => {\n    if (newPosition === null || isNaN(newPosition)) return\n    if (newPosition < 0) {\n      newPosition = 0\n    } else if (newPosition > 100) {\n      newPosition = 100\n    }\n    const lengthPerStep = 100 / ((max.value - min.value) / step.value)\n    const steps = Math.round(newPosition / lengthPerStep)\n    let value =\n      steps * lengthPerStep * (max.value - min.value) * 0.01 + min.value\n    value = parseFloat(value.toFixed(precision.value))\n    emit(UPDATE_MODEL_EVENT, value)\n\n    if (!initData.dragging && props.modelValue !== initData.oldValue) {\n      initData.oldValue = props.modelValue\n    }\n\n    await nextTick()\n    initData.dragging && displayTooltip()\n    tooltip.value.updatePopper()\n  }\n\n  watch(\n    () => initData.dragging,\n    (val) => {\n      updateDragging(val)\n    }\n  )\n\n  return {\n    tooltip,\n    tooltipVisible,\n    showTooltip,\n    wrapperStyle,\n    formatValue,\n    handleMouseEnter,\n    handleMouseLeave,\n    onButtonDown,\n    onLeftKeyDown,\n    onRightKeyDown,\n    setPosition,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}