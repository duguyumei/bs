{"ast":null,"code":"import { defineComponent, ref, inject, watch, nextTick, onMounted, onUpdated, onBeforeUnmount, h, Fragment } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../utils/dom/resize-event.mjs';\nvar LabelWrap = defineComponent({\n  name: \"ElLabelWrap\",\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean\n  },\n\n  setup(props, {\n    slots\n  }) {\n    const el = ref(null);\n    const elForm = inject(elFormKey);\n    const elFormItem = inject(elFormItemKey);\n    const computedWidth = ref(0);\n    watch(computedWidth, (val, oldVal) => {\n      if (props.updateAll) {\n        elForm.registerLabelWidth(val, oldVal);\n        elFormItem.updateComputedLabelWidth(val);\n      }\n    });\n\n    const getLabelWidth = () => {\n      var _a;\n\n      if ((_a = el.value) == null ? void 0 : _a.firstElementChild) {\n        const width = window.getComputedStyle(el.value.firstElementChild).width;\n        return Math.ceil(parseFloat(width));\n      } else {\n        return 0;\n      }\n    };\n\n    const updateLabelWidth = (action = \"update\") => {\n      nextTick(() => {\n        if (slots.default && props.isAutoWidth) {\n          if (action === \"update\") {\n            computedWidth.value = getLabelWidth();\n          } else if (action === \"remove\") {\n            elForm.deregisterLabelWidth(computedWidth.value);\n          }\n        }\n      });\n    };\n\n    const updateLabelWidthFn = () => updateLabelWidth(\"update\");\n\n    onMounted(() => {\n      addResizeListener(el.value.firstElementChild, updateLabelWidthFn);\n      updateLabelWidthFn();\n    });\n    onUpdated(updateLabelWidthFn);\n    onBeforeUnmount(() => {\n      var _a;\n\n      updateLabelWidth(\"remove\");\n      removeResizeListener((_a = el.value) == null ? void 0 : _a.firstElementChild, updateLabelWidthFn);\n    });\n\n    function render() {\n      var _a, _b;\n\n      if (!slots) return null;\n\n      if (props.isAutoWidth) {\n        const autoLabelWidth = elForm.autoLabelWidth;\n        const style = {};\n\n        if (autoLabelWidth && autoLabelWidth !== \"auto\") {\n          const marginWidth = Math.max(0, parseInt(autoLabelWidth, 10) - computedWidth.value);\n          const marginPosition = elForm.labelPosition === \"left\" ? \"marginRight\" : \"marginLeft\";\n\n          if (marginWidth) {\n            style[marginPosition] = `${marginWidth}px`;\n          }\n        }\n\n        return h(\"div\", {\n          ref: el,\n          class: [\"el-form-item__label-wrap\"],\n          style\n        }, (_a = slots.default) == null ? void 0 : _a.call(slots));\n      } else {\n        return h(Fragment, {\n          ref: el\n        }, (_b = slots.default) == null ? void 0 : _b.call(slots));\n      }\n    }\n\n    return render;\n  }\n\n});\nexport { LabelWrap as default };","map":{"version":3,"mappings":"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","names":["defineComponent","name","props","isAutoWidth","Boolean","updateAll","setup","slots","el","ref","elForm","inject","elFormKey","elFormItem","elFormItemKey","computedWidth","watch","val","oldVal","registerLabelWidth","updateComputedLabelWidth","getLabelWidth","_a","value","firstElementChild","width","window","getComputedStyle","Math","ceil","parseFloat","updateLabelWidth","action","nextTick","default","deregisterLabelWidth","updateLabelWidthFn","onMounted","addResizeListener","onUpdated","onBeforeUnmount","removeResizeListener","render","_b","autoLabelWidth","style","marginWidth","max","parseInt","marginPosition","labelPosition","h","class","call","Fragment"],"sources":["../../../../../../packages/components/form/src/label-wrap.ts"],"sourcesContent":["import {\n  defineComponent,\n  Fragment,\n  h,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  onUpdated,\n  ref,\n  watch,\n} from 'vue'\nimport { addResizeListener, removeResizeListener } from '@element-plus/utils'\nimport { elFormItemKey, elFormKey } from '@element-plus/tokens'\nimport type { ResizableElement, Nullable } from '@element-plus/utils'\n\nimport type { CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElLabelWrap',\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean,\n  },\n  setup(props, { slots }) {\n    const el = ref<Nullable<HTMLElement>>(null)\n    const elForm = inject(elFormKey)\n    const elFormItem = inject(elFormItemKey)\n\n    const computedWidth = ref(0)\n    watch(computedWidth, (val, oldVal) => {\n      if (props.updateAll) {\n        elForm.registerLabelWidth(val, oldVal)\n        elFormItem.updateComputedLabelWidth(val)\n      }\n    })\n\n    const getLabelWidth = () => {\n      if (el.value?.firstElementChild) {\n        const width = window.getComputedStyle(el.value.firstElementChild).width\n        return Math.ceil(parseFloat(width))\n      } else {\n        return 0\n      }\n    }\n    const updateLabelWidth = (action = 'update') => {\n      nextTick(() => {\n        if (slots.default && props.isAutoWidth) {\n          if (action === 'update') {\n            computedWidth.value = getLabelWidth()\n          } else if (action === 'remove') {\n            elForm.deregisterLabelWidth(computedWidth.value)\n          }\n        }\n      })\n    }\n    const updateLabelWidthFn = () => updateLabelWidth('update')\n\n    onMounted(() => {\n      addResizeListener(\n        el.value.firstElementChild as ResizableElement,\n        updateLabelWidthFn\n      )\n      updateLabelWidthFn()\n    })\n\n    onUpdated(updateLabelWidthFn)\n\n    onBeforeUnmount(() => {\n      updateLabelWidth('remove')\n      removeResizeListener(\n        el.value?.firstElementChild as ResizableElement,\n        updateLabelWidthFn\n      )\n    })\n\n    function render() {\n      if (!slots) return null\n      if (props.isAutoWidth) {\n        const autoLabelWidth = elForm.autoLabelWidth\n        const style = {} as CSSProperties\n        if (autoLabelWidth && autoLabelWidth !== 'auto') {\n          const marginWidth = Math.max(\n            0,\n            parseInt(autoLabelWidth, 10) - computedWidth.value\n          )\n          const marginPosition =\n            elForm.labelPosition === 'left' ? 'marginRight' : 'marginLeft'\n          if (marginWidth) {\n            style[marginPosition] = `${marginWidth}px`\n          }\n        }\n        return h(\n          'div',\n          {\n            ref: el,\n            class: ['el-form-item__label-wrap'],\n            style,\n          },\n          slots.default?.()\n        )\n      } else {\n        return h(Fragment, { ref: el }, slots.default?.())\n      }\n    }\n\n    return render\n  },\n})\n"]},"metadata":{},"sourceType":"module"}