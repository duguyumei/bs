{"ast":null,"code":"import { defineComponent, inject, ref, getCurrentInstance, computed, watch, nextTick, reactive, toRefs, onMounted, onBeforeUnmount, provide, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, withCtx, normalizeStyle, renderSlot, createTextVNode, toDisplayString, createCommentVNode, createElementVNode, Transition } from 'vue';\nimport { NOOP } from '@vue/shared';\nimport AsyncValidator from 'async-validator';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport LabelWrap from './label-wrap.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nimport { addUnit } from '../../../utils/vue/style.mjs';\nimport { getPropByPath } from '../../../utils/objects.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElFormItem\",\n  componentName: \"ElFormItem\",\n  components: {\n    LabelWrap\n  },\n  props: {\n    label: String,\n    labelWidth: {\n      type: [String, Number],\n      default: \"\"\n    },\n    prop: String,\n    required: {\n      type: Boolean,\n      default: void 0\n    },\n    rules: [Object, Array],\n    error: String,\n    validateStatus: String,\n    for: String,\n    inlineMessage: {\n      type: [String, Boolean],\n      default: \"\"\n    },\n    showMessage: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    }\n  },\n\n  setup(props, {\n    slots\n  }) {\n    const elForm = inject(elFormKey, {});\n    const validateState = ref(\"\");\n    const validateMessage = ref(\"\");\n    const isValidationEnabled = ref(false);\n    const computedLabelWidth = ref(\"\");\n    const formItemRef = ref();\n    const vm = getCurrentInstance();\n    const isNested = computed(() => {\n      let parent = vm.parent;\n\n      while (parent && parent.type.name !== \"ElForm\") {\n        if (parent.type.name === \"ElFormItem\") {\n          return true;\n        }\n\n        parent = parent.parent;\n      }\n\n      return false;\n    });\n    let initialValue = void 0;\n    watch(() => props.error, val => {\n      validateMessage.value = val;\n      validateState.value = val ? \"error\" : \"\";\n    }, {\n      immediate: true\n    });\n    watch(() => props.validateStatus, val => {\n      validateState.value = val;\n    });\n    const labelFor = computed(() => props.for || props.prop);\n    const labelStyle = computed(() => {\n      const ret = {};\n      if (elForm.labelPosition === \"top\") return ret;\n      const labelWidth = addUnit(props.labelWidth || elForm.labelWidth);\n\n      if (labelWidth) {\n        ret.width = labelWidth;\n      }\n\n      return ret;\n    });\n    const contentStyle = computed(() => {\n      const ret = {};\n\n      if (elForm.labelPosition === \"top\" || elForm.inline) {\n        return ret;\n      }\n\n      if (!props.label && !props.labelWidth && isNested.value) {\n        return ret;\n      }\n\n      const labelWidth = addUnit(props.labelWidth || elForm.labelWidth);\n\n      if (!props.label && !slots.label) {\n        ret.marginLeft = labelWidth;\n      }\n\n      return ret;\n    });\n    const fieldValue = computed(() => {\n      const model = elForm.model;\n\n      if (!model || !props.prop) {\n        return;\n      }\n\n      let path = props.prop;\n\n      if (path.indexOf(\":\") !== -1) {\n        path = path.replace(/:/, \".\");\n      }\n\n      return getPropByPath(model, path, true).v;\n    });\n    const isRequired = computed(() => {\n      const rules = getRules();\n      let required = false;\n\n      if (rules && rules.length) {\n        rules.every(rule => {\n          if (rule.required) {\n            required = true;\n            return false;\n          }\n\n          return true;\n        });\n      }\n\n      return required;\n    });\n    const sizeClass = useSize(void 0, {\n      formItem: false\n    });\n\n    const validate = (trigger, callback = NOOP) => {\n      if (!isValidationEnabled.value) {\n        callback();\n        return;\n      }\n\n      const rules = getFilteredRule(trigger);\n\n      if ((!rules || rules.length === 0) && props.required === void 0) {\n        callback();\n        return;\n      }\n\n      validateState.value = \"validating\";\n      const descriptor = {};\n\n      if (rules && rules.length > 0) {\n        rules.forEach(rule => {\n          delete rule.trigger;\n        });\n      }\n\n      descriptor[props.prop] = rules;\n      const validator = new AsyncValidator(descriptor);\n      const model = {};\n      model[props.prop] = fieldValue.value;\n      validator.validate(model, {\n        firstFields: true\n      }, (errors, fields) => {\n        var _a;\n\n        validateState.value = !errors ? \"success\" : \"error\";\n        validateMessage.value = errors ? errors[0].message || `${props.prop} is required` : \"\";\n        callback(validateMessage.value, errors ? fields : {});\n        (_a = elForm.emit) == null ? void 0 : _a.call(elForm, \"validate\", props.prop, !errors, validateMessage.value || null);\n      });\n    };\n\n    const clearValidate = () => {\n      validateState.value = \"\";\n      validateMessage.value = \"\";\n    };\n\n    const resetField = () => {\n      const model = elForm.model;\n      const value = fieldValue.value;\n      let path = props.prop;\n\n      if (path.indexOf(\":\") !== -1) {\n        path = path.replace(/:/, \".\");\n      }\n\n      const prop = getPropByPath(model, path, true);\n\n      if (Array.isArray(value)) {\n        prop.o[prop.k] = [].concat(initialValue);\n      } else {\n        prop.o[prop.k] = initialValue;\n      }\n\n      nextTick(() => {\n        clearValidate();\n      });\n    };\n\n    const getRules = () => {\n      const formRules = elForm.rules;\n      const selfRules = props.rules;\n      const requiredRule = props.required !== void 0 ? {\n        required: !!props.required\n      } : [];\n      const prop = getPropByPath(formRules, props.prop || \"\", false);\n      const normalizedRule = formRules ? prop.o[props.prop || \"\"] || prop.v : [];\n      return [].concat(selfRules || normalizedRule || []).concat(requiredRule);\n    };\n\n    const getFilteredRule = trigger => {\n      const rules = getRules();\n      return rules.filter(rule => {\n        if (!rule.trigger || trigger === \"\") return true;\n\n        if (Array.isArray(rule.trigger)) {\n          return rule.trigger.indexOf(trigger) > -1;\n        } else {\n          return rule.trigger === trigger;\n        }\n      }).map(rule => ({ ...rule\n      }));\n    };\n\n    const evaluateValidationEnabled = () => {\n      var _a;\n\n      isValidationEnabled.value = !!((_a = getRules()) == null ? void 0 : _a.length);\n    };\n\n    const updateComputedLabelWidth = width => {\n      computedLabelWidth.value = width ? `${width}px` : \"\";\n    };\n\n    const elFormItem = reactive({ ...toRefs(props),\n      size: sizeClass,\n      validateState,\n      $el: formItemRef,\n      evaluateValidationEnabled,\n      resetField,\n      clearValidate,\n      validate,\n      updateComputedLabelWidth\n    });\n    onMounted(() => {\n      if (props.prop) {\n        elForm == null ? void 0 : elForm.addField(elFormItem);\n        const value = fieldValue.value;\n        initialValue = Array.isArray(value) ? [...value] : value;\n        evaluateValidationEnabled();\n      }\n    });\n    onBeforeUnmount(() => {\n      elForm == null ? void 0 : elForm.removeField(elFormItem);\n    });\n    provide(elFormItemKey, elFormItem);\n    const formItemClass = computed(() => [{\n      \"el-form-item--feedback\": elForm.statusIcon,\n      \"is-error\": validateState.value === \"error\",\n      \"is-validating\": validateState.value === \"validating\",\n      \"is-success\": validateState.value === \"success\",\n      \"is-required\": isRequired.value || props.required,\n      \"is-no-asterisk\": elForm.hideRequiredAsterisk\n    }, sizeClass.value ? `el-form-item--${sizeClass.value}` : \"\"]);\n    const shouldShowError = computed(() => {\n      return validateState.value === \"error\" && props.showMessage && elForm.showMessage;\n    });\n    const currentLabel = computed(() => (props.label || \"\") + (elForm.labelSuffix || \"\"));\n    return {\n      formItemRef,\n      formItemClass,\n      shouldShowError,\n      elForm,\n      labelStyle,\n      contentStyle,\n      validateMessage,\n      labelFor,\n      resetField,\n      clearValidate,\n      currentLabel\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"for\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_LabelWrap = resolveComponent(\"LabelWrap\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"formItemRef\",\n    class: normalizeClass([\"el-form-item\", _ctx.formItemClass])\n  }, [createVNode(_component_LabelWrap, {\n    \"is-auto-width\": _ctx.labelStyle.width === \"auto\",\n    \"update-all\": _ctx.elForm.labelWidth === \"auto\"\n  }, {\n    default: withCtx(() => [_ctx.label || _ctx.$slots.label ? (openBlock(), createElementBlock(\"label\", {\n      key: 0,\n      for: _ctx.labelFor,\n      class: \"el-form-item__label\",\n      style: normalizeStyle(_ctx.labelStyle)\n    }, [renderSlot(_ctx.$slots, \"label\", {\n      label: _ctx.currentLabel\n    }, () => [createTextVNode(toDisplayString(_ctx.currentLabel), 1)])], 12, _hoisted_1)) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  }, 8, [\"is-auto-width\", \"update-all\"]), createElementVNode(\"div\", {\n    class: \"el-form-item__content\",\n    style: normalizeStyle(_ctx.contentStyle)\n  }, [renderSlot(_ctx.$slots, \"default\"), createVNode(Transition, {\n    name: \"el-zoom-in-top\"\n  }, {\n    default: withCtx(() => [_ctx.shouldShowError ? renderSlot(_ctx.$slots, \"error\", {\n      key: 0,\n      error: _ctx.validateMessage\n    }, () => [createElementVNode(\"div\", {\n      class: normalizeClass([\"el-form-item__error\", {\n        \"el-form-item__error--inline\": typeof _ctx.inlineMessage === \"boolean\" ? _ctx.inlineMessage : _ctx.elForm.inlineMessage || false\n      }])\n    }, toDisplayString(_ctx.validateMessage), 3)]) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  })], 4)], 2);\n}\n\nvar FormItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { FormItem as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","componentName","components","LabelWrap","props","label","String","labelWidth","type","Number","default","prop","required","Boolean","rules","Object","Array","error","validateStatus","for","inlineMessage","showMessage","size","validator","isValidComponentSize","setup","slots","elForm","inject","elFormKey","validateState","ref","validateMessage","isValidationEnabled","computedLabelWidth","formItemRef","vm","getCurrentInstance","isNested","computed","parent","initialValue","watch","val","value","immediate","labelFor","labelStyle","ret","labelPosition","addUnit","width","contentStyle","inline","marginLeft","fieldValue","model","path","indexOf","replace","getPropByPath","v","isRequired","getRules","length","every","rule","sizeClass","useSize","formItem","validate","trigger","callback","NOOP","getFilteredRule","descriptor","forEach","AsyncValidator","firstFields","errors","fields","message","o","nextTick","clearValidate","formRules","selfRules","requiredRule","map","_a","$el","evaluateValidationEnabled","resetField","updateComputedLabelWidth","onMounted","elFormItem","onBeforeUnmount","provide","formItemClass","shouldShowError","currentLabel","$setup","class","createVNode","key","style","renderSlot","createElementVNode"],"sources":["../../../../../../packages/components/form/src/form-item.vue"],"sourcesContent":["<template>\n  <div ref=\"formItemRef\" class=\"el-form-item\" :class=\"formItemClass\">\n    <LabelWrap\n      :is-auto-width=\"labelStyle.width === 'auto'\"\n      :update-all=\"elForm.labelWidth === 'auto'\"\n    >\n      <label\n        v-if=\"label || $slots.label\"\n        :for=\"labelFor\"\n        class=\"el-form-item__label\"\n        :style=\"labelStyle\"\n      >\n        <slot name=\"label\" :label=\"currentLabel\">\n          {{ currentLabel }}\n        </slot>\n      </label>\n    </LabelWrap>\n    <div class=\"el-form-item__content\" :style=\"contentStyle\">\n      <slot></slot>\n      <transition name=\"el-zoom-in-top\">\n        <slot v-if=\"shouldShowError\" name=\"error\" :error=\"validateMessage\">\n          <div\n            class=\"el-form-item__error\"\n            :class=\"{\n              'el-form-item__error--inline':\n                typeof inlineMessage === 'boolean'\n                  ? inlineMessage\n                  : elForm.inlineMessage || false,\n            }\"\n          >\n            {{ validateMessage }}\n          </div>\n        </slot>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n  nextTick,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport AsyncValidator from 'async-validator'\nimport {\n  addUnit,\n  isValidComponentSize,\n  getPropByPath,\n} from '@element-plus/utils'\nimport { elFormItemKey, elFormKey } from '@element-plus/tokens'\nimport { useSize } from '@element-plus/hooks'\nimport LabelWrap from './label-wrap'\n\nimport type { PropType, CSSProperties } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type { ElFormContext, ValidateFieldCallback } from '@element-plus/tokens'\nimport type { FormItemRule } from './form.type'\n\nexport default defineComponent({\n  name: 'ElFormItem',\n  componentName: 'ElFormItem',\n  components: {\n    LabelWrap,\n  },\n  props: {\n    label: String,\n    labelWidth: {\n      type: [String, Number],\n      default: '',\n    },\n    prop: String,\n    required: {\n      type: Boolean,\n      default: undefined,\n    },\n    rules: [Object, Array] as PropType<FormItemRule | FormItemRule[]>,\n    error: String,\n    validateStatus: String,\n    for: String,\n    inlineMessage: {\n      type: [String, Boolean],\n      default: '',\n    },\n    showMessage: {\n      type: Boolean,\n      default: true,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n  },\n  setup(props, { slots }) {\n    const elForm = inject(elFormKey, {} as ElFormContext)\n    const validateState = ref('')\n    const validateMessage = ref('')\n    const isValidationEnabled = ref(false)\n\n    const computedLabelWidth = ref('')\n\n    const formItemRef = ref<HTMLDivElement>()\n\n    const vm = getCurrentInstance()\n    const isNested = computed(() => {\n      let parent = vm.parent\n      while (parent && parent.type.name !== 'ElForm') {\n        if (parent.type.name === 'ElFormItem') {\n          return true\n        }\n        parent = parent.parent\n      }\n      return false\n    })\n\n    let initialValue = undefined\n\n    watch(\n      () => props.error,\n      (val) => {\n        validateMessage.value = val\n        validateState.value = val ? 'error' : ''\n      },\n      {\n        immediate: true,\n      }\n    )\n    watch(\n      () => props.validateStatus,\n      (val) => {\n        validateState.value = val\n      }\n    )\n\n    const labelFor = computed(() => props.for || props.prop)\n    const labelStyle = computed(() => {\n      const ret: CSSProperties = {}\n      if (elForm.labelPosition === 'top') return ret\n      const labelWidth = addUnit(props.labelWidth || elForm.labelWidth)\n      if (labelWidth) {\n        ret.width = labelWidth\n      }\n      return ret\n    })\n    const contentStyle = computed(() => {\n      const ret: CSSProperties = {}\n      if (elForm.labelPosition === 'top' || elForm.inline) {\n        return ret\n      }\n      if (!props.label && !props.labelWidth && isNested.value) {\n        return ret\n      }\n      const labelWidth = addUnit(props.labelWidth || elForm.labelWidth)\n      if (!props.label && !slots.label) {\n        ret.marginLeft = labelWidth\n      }\n      return ret\n    })\n    const fieldValue = computed(() => {\n      const model = elForm.model\n      if (!model || !props.prop) {\n        return\n      }\n\n      let path = props.prop\n      if (path.indexOf(':') !== -1) {\n        path = path.replace(/:/, '.')\n      }\n\n      return getPropByPath(model, path, true).v\n    })\n    const isRequired = computed(() => {\n      const rules = getRules()\n      let required = false\n\n      if (rules && rules.length) {\n        rules.every((rule) => {\n          if (rule.required) {\n            required = true\n            return false\n          }\n          return true\n        })\n      }\n      return required\n    })\n    const sizeClass = useSize(undefined, { formItem: false })\n\n    const validate = (\n      trigger: string,\n      callback: ValidateFieldCallback = NOOP\n    ) => {\n      if (!isValidationEnabled.value) {\n        callback()\n        return\n      }\n      const rules = getFilteredRule(trigger)\n      if ((!rules || rules.length === 0) && props.required === undefined) {\n        callback()\n        return\n      }\n      validateState.value = 'validating'\n      const descriptor = {}\n      if (rules && rules.length > 0) {\n        rules.forEach((rule) => {\n          delete rule.trigger\n        })\n      }\n      descriptor[props.prop] = rules\n      const validator = new AsyncValidator(descriptor)\n      const model = {}\n      model[props.prop] = fieldValue.value\n      validator.validate(model, { firstFields: true }, (errors, fields) => {\n        validateState.value = !errors ? 'success' : 'error'\n        validateMessage.value = errors\n          ? errors[0].message || `${props.prop} is required`\n          : ''\n        // fix: #3860 after version 3.5.2, async-validator also return fields if validation fails\n        callback(validateMessage.value, errors ? fields : {})\n        elForm.emit?.(\n          'validate',\n          props.prop,\n          !errors,\n          validateMessage.value || null\n        )\n      })\n    }\n\n    const clearValidate = () => {\n      validateState.value = ''\n      validateMessage.value = ''\n    }\n    const resetField = () => {\n      const model = elForm.model\n      const value = fieldValue.value\n      let path = props.prop\n      if (path.indexOf(':') !== -1) {\n        path = path.replace(/:/, '.')\n      }\n      const prop = getPropByPath(model, path, true)\n      if (Array.isArray(value)) {\n        prop.o[prop.k] = [].concat(initialValue)\n      } else {\n        prop.o[prop.k] = initialValue\n      }\n      nextTick(() => {\n        clearValidate()\n      })\n    }\n\n    const getRules = () => {\n      const formRules = elForm.rules\n      const selfRules = props.rules\n      const requiredRule =\n        props.required !== undefined ? { required: !!props.required } : []\n\n      const prop = getPropByPath(formRules, props.prop || '', false)\n      const normalizedRule = formRules ? prop.o[props.prop || ''] || prop.v : []\n\n      return [].concat(selfRules || normalizedRule || []).concat(requiredRule)\n    }\n    const getFilteredRule = (trigger) => {\n      const rules = getRules()\n\n      return rules\n        .filter((rule) => {\n          if (!rule.trigger || trigger === '') return true\n          if (Array.isArray(rule.trigger)) {\n            return rule.trigger.indexOf(trigger) > -1\n          } else {\n            return rule.trigger === trigger\n          }\n        })\n        .map((rule) => ({ ...rule }))\n    }\n\n    const evaluateValidationEnabled = () => {\n      isValidationEnabled.value = !!getRules()?.length\n    }\n\n    const updateComputedLabelWidth = (width: string | number) => {\n      computedLabelWidth.value = width ? `${width}px` : ''\n    }\n\n    const elFormItem = reactive({\n      ...toRefs(props),\n      size: sizeClass,\n      validateState,\n      $el: formItemRef,\n      evaluateValidationEnabled,\n      resetField,\n      clearValidate,\n      validate,\n      updateComputedLabelWidth,\n    })\n\n    onMounted(() => {\n      if (props.prop) {\n        elForm?.addField(elFormItem)\n\n        const value = fieldValue.value\n        initialValue = Array.isArray(value) ? [...value] : value\n\n        evaluateValidationEnabled()\n      }\n    })\n    onBeforeUnmount(() => {\n      elForm?.removeField(elFormItem)\n    })\n\n    provide(elFormItemKey, elFormItem)\n\n    const formItemClass = computed(() => [\n      {\n        'el-form-item--feedback': elForm.statusIcon,\n        'is-error': validateState.value === 'error',\n        'is-validating': validateState.value === 'validating',\n        'is-success': validateState.value === 'success',\n        'is-required': isRequired.value || props.required,\n        'is-no-asterisk': elForm.hideRequiredAsterisk,\n      },\n      sizeClass.value ? `el-form-item--${sizeClass.value}` : '',\n    ])\n\n    const shouldShowError = computed(() => {\n      return (\n        validateState.value === 'error' &&\n        props.showMessage &&\n        elForm.showMessage\n      )\n    })\n\n    const currentLabel = computed(\n      () => (props.label || '') + (elForm.labelSuffix || '')\n    )\n\n    return {\n      formItemRef,\n      formItemClass,\n      shouldShowError,\n      elForm,\n      labelStyle,\n      contentStyle,\n      validateMessage,\n      labelFor,\n      resetField,\n      clearValidate,\n      currentLabel,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}