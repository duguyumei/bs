{"ast":null,"code":"//封装axios\nimport axios from 'axios';\nconst request = axios.create({\n  baseURL: '/api',\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000 // baseURL: 'http://localhost:8090',  // 注意！！ 这里是全局统一加上了 后端接口前缀 前缀，后端必须进行跨域配置！\n\n}); // request 拦截器  请求头\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'; // config.headers['token'] = user.token;  // 设置请求头\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); // response 拦截器 响应结果\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(response => {\n  let res = response.data; //从data中取数据\n  // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据 转换为json\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n}); //路由拦截\n\nrouter.beforeEach((to, from, next) => {\n  //验证token\n  let token = localStorage.getItem(\"token\");\n\n  if (token.equal(\"111333\") || to.path.equal(\"/login\")) {\n    next();\n  } else {\n    next(\"/login\");\n  }\n});\nexport default request;","map":{"version":3,"sources":["E:/notejs/manage/vue/src/utils/requst.js"],"names":["axios","request","create","baseURL","timeout","interceptors","use","config","headers","error","Promise","reject","response","res","data","responseType","JSON","parse","console","log","router","beforeEach","to","from","next","token","localStorage","getItem","equal","path"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAE,MADgB;AACP;AAClBC,EAAAA,OAAO,EAAE,IAFgB,CAGzB;;AAHyB,CAAb,CAAhB,C,CAMA;AACA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiCC,MAAM,IAAI;AACvCA,EAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CADuC,CAGvC;;AACA,SAAOD,MAAP;AACH,CALD,EAKGE,KAAK,IAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAPD,E,CASA;AACA;;AACAR,OAAO,CAACI,YAAR,CAAqBO,QAArB,CAA8BN,GAA9B,CACIM,QAAQ,IAAI;AACR,MAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CACiB;AACzB;;AACA,MAAIF,QAAQ,CAACL,MAAT,CAAgBQ,YAAhB,KAAiC,MAArC,EAA6C;AACzC,WAAOF,GAAP;AACH,GALO,CAMR;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAH,GAAqBA,GAA9B;AACH;;AACD,SAAOA,GAAP;AACH,CAZL,EAaIJ,KAAK,IAAI;AACLS,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQV,KAApB,EADK,CACsB;;AAC3B,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAhBL,E,CAkBA;;AACAW,MAAM,CAACC,UAAP,CAAkB,CAACC,EAAD,EAAIC,IAAJ,EAASC,IAAT,KAAgB;AAC9B;AACA,MAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;AACA,MAAGF,KAAK,CAACG,KAAN,CAAY,QAAZ,KAAyBN,EAAE,CAACO,IAAH,CAAQD,KAAR,CAAc,QAAd,CAA5B,EAAoD;AAChDJ,IAAAA,IAAI;AACP,GAFD,MAEK;AACDA,IAAAA,IAAI,CAAC,QAAD,CAAJ;AACH;AACJ,CARD;AAUA,eAAevB,OAAf","sourcesContent":["//封装axios\r\nimport axios from 'axios'\r\n\r\nconst request = axios.create({\r\n    baseURL: '/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n    timeout: 5000\r\n    // baseURL: 'http://localhost:8090',  // 注意！！ 这里是全局统一加上了 后端接口前缀 前缀，后端必须进行跨域配置！\r\n})\r\n\r\n// request 拦截器  请求头\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n    // config.headers['token'] = user.token;  // 设置请求头\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器 响应结果\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data; //从data中取数据\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据 转换为json\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n//路由拦截\r\nrouter.beforeEach((to,from,next)=>{\r\n    //验证token\r\n    let token = localStorage.getItem(\"token\");\r\n    if(token.equal(\"111333\") || to.path.equal(\"/login\")){\r\n        next();\r\n    }else{\r\n        next(\"/login\");\r\n    }\r\n})\r\n\r\nexport default request\r\n\r\n"]},"metadata":{},"sourceType":"module"}