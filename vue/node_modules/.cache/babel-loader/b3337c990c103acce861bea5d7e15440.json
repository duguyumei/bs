{"ast":null,"code":"import { defineComponent, ref, unref, computed, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createElementVNode, normalizeClass, normalizeStyle, resolveDynamicComponent, createCommentVNode, createTextVNode, toDisplayString, createVNode, renderSlot } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../popper/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { popconfirmProps } from './popconfirm.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useDeprecateAppendToBody } from '../../popper/src/deprecation.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst COMPONENT_NAME = \"ElPopconfirm\";\n\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElButton,\n    ElTooltip,\n    ElIcon\n  },\n  props: popconfirmProps,\n\n  setup(props) {\n    const {\n      compatTeleported\n    } = useDeprecateAppendToBody(COMPONENT_NAME, \"appendToBody\");\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"popconfirm\");\n    const tooltipRef = ref();\n\n    const hidePopper = () => {\n      var _a, _b;\n\n      (_b = (_a = unref(tooltipRef)) == null ? void 0 : _a.onClose) == null ? void 0 : _b.call(_a);\n    };\n\n    const handleCallback = () => {\n      hidePopper();\n    };\n\n    const confirm = e => {\n      var _a;\n\n      (_a = props.onConfirm) == null ? void 0 : _a.call(props, e);\n      handleCallback();\n    };\n\n    const cancel = e => {\n      var _a;\n\n      (_a = props.onCancel) == null ? void 0 : _a.call(props, e);\n      handleCallback();\n    };\n\n    const finalConfirmButtonText = computed(() => props.confirmButtonText || t(\"el.popconfirm.confirmButtonText\"));\n    const finalCancelButtonText = computed(() => props.cancelButtonText || t(\"el.popconfirm.cancelButtonText\"));\n    return {\n      finalConfirmButtonText,\n      finalCancelButtonText,\n      tooltipRef,\n      ns,\n      compatTeleported,\n      confirm,\n      cancel\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_button = resolveComponent(\"el-button\");\n\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  return openBlock(), createBlock(_component_el_tooltip, mergeProps({\n    ref: \"tooltipRef\"\n  }, _ctx.$attrs, {\n    trigger: \"click\",\n    effect: \"light\",\n    \"popper-class\": `${_ctx.ns.namespace.value}-popover`,\n    teleported: _ctx.compatTeleported,\n    \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n    \"hide-after\": _ctx.hideAfter,\n    persistent: _ctx.persistent\n  }), {\n    content: withCtx(() => [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.b())\n    }, [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"main\"))\n    }, [!_ctx.hideIcon && _ctx.icon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass(_ctx.ns.e(\"icon\")),\n      style: normalizeStyle({\n        color: _ctx.iconColor\n      })\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))]),\n      _: 1\n    }, 8, [\"class\", \"style\"])) : createCommentVNode(\"v-if\", true), createTextVNode(\" \" + toDisplayString(_ctx.title), 1)], 2), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"action\"))\n    }, [createVNode(_component_el_button, {\n      size: \"small\",\n      type: _ctx.cancelButtonType,\n      onClick: _ctx.cancel\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.finalCancelButtonText), 1)]),\n      _: 1\n    }, 8, [\"type\", \"onClick\"]), createVNode(_component_el_button, {\n      size: \"small\",\n      type: _ctx.confirmButtonType,\n      onClick: _ctx.confirm\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.finalConfirmButtonText), 1)]),\n      _: 1\n    }, 8, [\"type\", \"onClick\"])], 2)], 2)]),\n    default: withCtx(() => [_ctx.$slots.reference ? renderSlot(_ctx.$slots, \"reference\", {\n      key: 0\n    }) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  }, 16, [\"popper-class\", \"teleported\", \"hide-after\", \"persistent\"]);\n}\n\nvar Popconfirm = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Popconfirm as default };","map":{"version":3,"mappings":";;;;;;;;;;;AAiDA,MAAMA,iBAAiB,cAAvB;;AACA,MAAKC,YAAaC,gBAAa;AAC7BC,QAAMH,cADuB;AAG7BI,cAAY;AACVC,YADU;AAEVC,aAFU;AAGVC;AAHU,GAHiB;AAS7BC,SAAOC,eATsB;;AAW7BC,QAAMF,KAAN,EAAa;AACX,UAAM;AAAEG;AAAF,QAAuBC,yBAC3BZ,cAD2B,EAE3B,cAF2B,CAA7B;AAIA,UAAM;AAAEa;AAAF,QAAQC,WAAd;AACA,UAAMC,KAAKC,aAAa,YAAb,CAAX;AACA,UAAMC,aAAaC,KAAnB;;AAEA,UAAMC,aAAa,MAAM;AACvB,cAAMC,EAAN;;AAAmB;AAGrB,KAJA;;AAKE;AAAAD;AAGF,KAHE;;AAIA;AACA;;AAAA;AAEFE,oBAAgB;AACd,KAJA;;AAKA;AAAA;;AAGF,sCAA+B,MAA/B,GACEC,GAAMC,IAAN,CAAMf,KAAN,EAAMgB,CAAN,CADF;AAGAH;AAIA,KAVE;;AAUK;AACL;AACA;AAEAI,4BAFA;AAKAC,2BALA;AAOAT,gBAPA;AAQAF,QARA;AAQAJ,sBARA;AAQAgB,aARA;AAQAC;AARA;;;AA9CyB,CAAb,CAAlB;;;;;AA/CkB;;AACN;;AACD,sBACWC;AAAAA;AAAAA;AACjBC,oBADiBD;AAEjBE,mBAFiBF;AAGjB,oBAAY,oCAHKA;AAIjBG,gBAAYC,qBAJKJ;AAIL,6DAJKA;AAMP,sBACT,UAPgBA;AA0BVK;AA1BUL,MA0BV;AAnBUM;AAURC;OATW,oBAEM;AAKXA;AALW,QACP;AACKC,YADL;8CAAA;AAGYC;AAAAC;AAAA;AAHZ,OAGI;AAAAC;AAEVC;AAFU,KAHJ,8DAOVC,sBAAOC,2BAAPD,EAAOC,CAAPD,IAAW,EAVA;AAaHN;OAFI,CAAeQ;AAA0BC,mBAA1B;iCAAA;AACFC;AADE,OACL;AAAAN;AAEfC;AAFe,KADK,EAGf,CAHe,EAGf,mBAHe,CAAf,EAGeG;AAA2BC,mBAA3B;kCAAA;AACDC;AADC,OACJ;AAAAN;;AAAA,KADI,yBAHf,KAXD,GAsBV,EAvBO,EAmBV;;;2CAAA;;AAAA,GA1BUX,iEADX","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","components","ElButton","ElTooltip","ElIcon","props","popconfirmProps","setup","compatTeleported","useDeprecateAppendToBody","t","useLocale","ns","useNamespace","tooltipRef","ref","hidePopper","_b","handleCallback","_a","call","e","finalConfirmButtonText","finalCancelButtonText","confirm","cancel","_createBlock","trigger","effect","teleported","_ctx","persistent","content","class","key","style","color","default","_","_createTextVNode","_toDisplayString","createVNode","size","onClick"],"sources":["../../../../../../packages/components/popconfirm/src/popconfirm.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"tooltipRef\"\n    v-bind=\"$attrs\"\n    trigger=\"click\"\n    effect=\"light\"\n    :popper-class=\"`${ns.namespace.value}-popover`\"\n    :teleported=\"compatTeleported\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :hide-after=\"hideAfter\"\n    :persistent=\"persistent\"\n  >\n    <template #content>\n      <div :class=\"ns.b()\">\n        <div :class=\"ns.e('main')\">\n          <el-icon\n            v-if=\"!hideIcon && icon\"\n            :class=\"ns.e('icon')\"\n            :style=\"{ color: iconColor }\"\n          >\n            <component :is=\"icon\" />\n          </el-icon>\n          {{ title }}\n        </div>\n        <div :class=\"ns.e('action')\">\n          <el-button size=\"small\" :type=\"cancelButtonType\" @click=\"cancel\">\n            {{ finalCancelButtonText }}\n          </el-button>\n          <el-button size=\"small\" :type=\"confirmButtonType\" @click=\"confirm\">\n            {{ finalConfirmButtonText }}\n          </el-button>\n        </div>\n      </div>\n    </template>\n    <template v-if=\"$slots.reference\">\n      <slot name=\"reference\" />\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, computed, unref } from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport ElIcon from '@element-plus/components/icon'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { useDeprecateAppendToBody } from '@element-plus/components/popper'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { popconfirmProps } from './popconfirm'\n\nconst COMPONENT_NAME = 'ElPopconfirm'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n\n  components: {\n    ElButton,\n    ElTooltip,\n    ElIcon,\n  },\n\n  props: popconfirmProps,\n\n  setup(props) {\n    const { compatTeleported } = useDeprecateAppendToBody(\n      COMPONENT_NAME,\n      'appendToBody'\n    )\n    const { t } = useLocale()\n    const ns = useNamespace('popconfirm')\n    const tooltipRef = ref<{ onClose: () => void }>()\n\n    const hidePopper = () => {\n      unref(tooltipRef)?.onClose?.()\n    }\n\n    const handleCallback = () => {\n      hidePopper()\n    }\n\n    const confirm = (e: Event) => {\n      props.onConfirm?.(e)\n      handleCallback()\n    }\n    const cancel = (e: Event) => {\n      props.onCancel?.(e)\n      handleCallback()\n    }\n\n    const finalConfirmButtonText = computed(\n      () => props.confirmButtonText || t('el.popconfirm.confirmButtonText')\n    )\n    const finalCancelButtonText = computed(\n      () => props.cancelButtonText || t('el.popconfirm.cancelButtonText')\n    )\n\n    return {\n      finalConfirmButtonText,\n      finalCancelButtonText,\n      tooltipRef,\n      ns,\n\n      // Deprecation in 2.1.0\n      compatTeleported,\n\n      confirm,\n      cancel,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}